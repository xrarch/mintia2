//
// Implements the debugger prompt.
//

#INCLUDE "Dbg.hjk"
#INCLUDE "<ll>/System/OsContext.hjk"

#IF ( == BLD_BITS 64 )

#DEFINE DBG_POINTER_ALIGN_MASK 7

#ELSE

#DEFINE DBG_POINTER_ALIGN_MASK 3

#END

#DEFINE DBG_TOKEN_BUFFER_SIZE 128
#DEFINE DBG_MONITOR_HEIGHT 24

DbgCommandBuffer : UBYTE[256]
DbgTokenBuffer : UBYTE[DBG_TOKEN_BUFFER_SIZE]

DbgNextTokenPointer : ^UBYTE

PUBLIC DbgCurrentContext : ^OsContext
PUBLIC DbgCurrentPrb : ^KiPrb

FNPTR DbgCommandF ()

STRUCT DbgCommand
    Name : ^UBYTE,
    Function : DbgCommandF,
    Help : ^UBYTE,
END

// FORWARD
EXTERN DbgCommandTable : DbgCommand[]

DbgUsedLines : UBYTE
DbgAllLines : UBYTE
DbgExit : UBYTE = FALSE

FN DbgPaginate () : UWORD

    // Simple text pagination for the console.

    IF DbgAllLines THEN
        RETURN TRUE
    END

    result := TRUE

    IF DbgUsedLines >= DBG_MONITOR_HEIGHT - 1 THEN
        RtlPrint (
        "\[[7m(any) for more, (a) for all, (p) for a page, (q) to quit\[[0m" )

        c := -1

        WHILE c == -1 DO
            c = HalDebugRead ()
        END

        RtlPrint ( "\[[2K\r" )

        IF c == 'q' THEN
            result = FALSE
        
        ELSEIF c == 'p' THEN
            DbgUsedLines = 0

        ELSEIF c == 'a' THEN
            DbgAllLines = TRUE
        END
    END

    DbgUsedLines += 1

    RETURN result
END

FN DbgResetPagination ()
    
    // Reset the pagination; should be called before printing a list.

    DbgUsedLines = 0
    DbgAllLines = FALSE
END

FN DbgNextToken (
    IN tokenbuffer : ^UBYTE,
    IN bufsize : UWORD,
) : UWORD

    // Helper routine for getting the next token from a monitor command line.

    IF NOT DbgNextTokenPointer THEN
        RETURN FALSE
    END

    DbgNextTokenPointer = RtlTokenize (
        DbgNextTokenPointer, // buffer
        tokenbuffer, // tokenbuffer
        bufsize, // bufsize
        ' ', // delimiter
    )

    IF DbgNextTokenPointer THEN
        RETURN TRUE
    END

    RETURN FALSE
END

FN (DbgCommandF) DbgCommandHelp ()

    // Print the help table.

    DbgResetPagination ()

    i := 0

    WHILE DbgCommandTable[i].Name DO
        cmd := &DbgCommandTable[i]

        IF cmd^.Help THEN
            IF NOT DbgPaginate () THEN
                LEAVE
            END

            RtlPrint ( " %-10s%s\n", cmd^.Name, cmd^.Help )
        END

        i += 1
    END
END

FN (DbgCommandF) DbgCommandClear ()

    // Print magic ANSI-compatible sequence to clear the terminal and reset the
    // cursor back to the top left.

    RtlPrint ( "\[[0m\[[1;1H\[[2J" )

    RtlPrint ( "MINTIA System Debugger\n" )
END

FN (DbgCommandF) DbgCommandExit ()

    DbgExit = TRUE
END

FN (DbgCommandF) DbgCommandReg ()

    DbgDumpRegisters ( DbgCurrentContext )
END

FN (DbgCommandF) DbgCommandPcSym ()

    num : UBYTE[32]

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        RtlPrint ( "Usage: pcsym [pc]\n" )

        LEAVE
    END

    numval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT numval, // num
    ) THEN

        RtlPrint ( "Usage: pcsym [pc]\n" )

        LEAVE
    END

    dll : ^BlDll
    symvalue : ^VOID
    symname : ^UBYTE

    sym := DbgGetSymbolAndDll (
        CAST numval TO ^VOID, // address
        OUT dll, // dll
        OUT symvalue, // symvalue
        OUT symname, // symname
    )

    IF NOT sym THEN
        RtlPrint ( "Couldn't find matching symbol\n" )

        LEAVE
    END

    dllname := RtlGetFileName ( &dll^.Name[0] )

    RtlPrint (
        "%s!%s+%x\n", // fmt
        dllname,
        symname,
        numval - symvalue,
    )
END

FN (DbgCommandF) DbgCommandPeekUlong ()

    num : UBYTE[32]

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        RtlPrint ( "Usage: peekl [addr]\n" )

        LEAVE
    END

    numval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT numval, // num
    ) THEN

        RtlPrint ( "Usage: peekl [addr]\n" )

        LEAVE
    END

    addr := CAST numval TO ^ULONG

    IF NOT MmIsVirtualValid ( addr ) THEN
        RtlPrint ( "Invalid address\n" )

        LEAVE
    END

    IF addr & 3 THEN
        RtlPrint ( "Unaligned address\n" )

        LEAVE
    END

    RtlPrint ( "%08x\n", addr[0] )
END

FN (DbgCommandF) DbgCommandPokeUlong ()

    num : UBYTE[32]

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        RtlPrint ( "Usage: pokel [addr] [value]\n" )

        LEAVE
    END

    numval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT numval, // num
    ) THEN

        RtlPrint ( "Usage: pokel [addr] [value]\n" )

        LEAVE
    END

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        RtlPrint ( "Usage: pokel [addr] [value]\n" )

        LEAVE
    END

    newval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT newval, // num
    ) THEN

        RtlPrint ( "Usage: pokel [addr] [value]\n" )

        LEAVE
    END

    addr := CAST numval TO ^ULONG

    IF NOT MmIsVirtualValid ( addr ) THEN
        RtlPrint ( "Invalid address\n" )

        LEAVE
    END

    IF addr & 3 THEN
        RtlPrint ( "Unaligned address\n" )

        LEAVE
    END

    addr[0] = newval

    RtlPrint ( "%08x = %08x\n", addr, newval )
END

FN (DbgCommandF) DbgCommandCrash ()

    DbgExit = TRUE
    DbgCauseCrash = TRUE
END

FN (DbgCommandF) DbgCommandSym ()

    name : UBYTE[64]

    IF NOT DbgNextToken (
        &name[0], // tokenbuffer
        64, // bufsize
    ) THEN

        RtlPrint ( "Usage: sym [name]\n" )

        LEAVE
    END

    dll : ^BlDll
    value : ^VOID

    IF NOT DbgGetSymbolValueByName (
        &name[0], // name
        OUT dll, // dll
        OUT value, // symvalue
    ) THEN

        RtlPrint ( "Couldn't find that symbol\n" )

        LEAVE
    END

    dllname := RtlGetFileName ( &dll^.Name[0] )

    RtlPrint ( "%s!%s = %p\n", dllname, &name[0], value )
END

FN (DbgCommandF) DbgCommandCpu ()

    num : UBYTE[32]

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        GOTO PrintCpuInfo
    END

    numval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT numval, // num
    ) THEN

        RtlPrint ( "Usage: cpu [num]\n" )

        LEAVE
    END

    IF numval >= KeLoaderBlock.ProcessorCount THEN
        RtlPrint ( "No such CPU\n" )

        LEAVE
    END

    prb := KiPrbFromNumber ( numval )

    context := prb^.FrozenContext

    // Check for validity.

    IF NOT context THEN
        RtlPrint ( "Processor failed to freeze%s", " - not switched\n" )

        LEAVE
    END

    IF NOT MmIsVirtualValid ( context ) THEN
        RtlPrint ( "Context lies in invalid virtual space%s", " - not switched\n" )

        LEAVE
    END

    IF NOT MmIsVirtualValid ( context + SIZEOF OsContext ) THEN
        RtlPrint ( "Context ends in invalid virtual space%s", " - not switched\n" )

        LEAVE
    END

    DbgCurrentContext = context
    DbgCurrentPrb = prb

@PrintCpuInfo

    RtlPrint ( "CPU is %d    PRB @ %p\n", DbgCurrentPrb^.Id, DbgCurrentPrb )
END

FN (DbgCommandF) DbgCommandReady ()

    prb := DbgCurrentPrb

    idleempty := 1

    IF RtlEmptyList ( &prb^.IdleListHead ) THEN
        idleempty = 0
    END

    RtlPrint ( "Current=%p Next=%p\n", prb^.CurrentThread, prb^.NextThread )

    RtlPrint (
        "RT=%08x TS=%08x Idle=%d TSR=%d TSE=%d PEND=%02x", // fmt
        prb^.RealTimeReady,
        prb^.CalendarReady,
        idleempty,
        prb^.CalendarRunIndex,
        prb^.CalendarEnqueueIndex,
        prb^.PendingSoftwareInterrupts,
    )

#IF BLD_MP
    RtlPrint ( " LOAD=%d PENDSET=%02x", prb^.Load, prb^.SetIplPending )
#END

    RtlPrint ( "\n" )

    RtlPrint ( "\nRT Queues\n" )

    i := 0
    head : ^RtlListEntry
    listentry : ^RtlListEntry
    thread : ^KeThread

    WHILE i < OS_PRIORITY_MAX DO
        head = &prb^.RealTimeListHeads[i]

        IF NOT RtlEmptyList ( head ) THEN
            RtlPrint ( "%d: ", i )
        END

        listentry = head^.Next

        WHILE listentry != head DO
            thread = CONTAINEROF listentry TO KeThread.ReadyEntry

            RtlPrint ( "%p ", thread )

            listentry = listentry^.Next
        END

        IF NOT RtlEmptyList ( head ) THEN
            RtlPrint ( "\n" )
        END

        i += 1
    END

    RtlPrint ( "\nTS Queues\n" )

    i = 0

    WHILE i < KI_TIMESHARED_QUEUES DO
        head = &prb^.CalendarListHeads[i]

        IF NOT RtlEmptyList ( head ) THEN
            RtlPrint ( "%d: ", i )
        END

        listentry = head^.Next

        WHILE listentry != head DO
            thread = CONTAINEROF listentry TO KeThread.ReadyEntry

            RtlPrint ( "%p ", thread )

            listentry = listentry^.Next
        END

        IF NOT RtlEmptyList ( head ) THEN
            RtlPrint ( "\n" )
        END

        i += 1
    END

    RtlPrint ( "\nIdle Queue (thread is %08x)\n", &prb^.IdleThread )

    head = &prb^.IdleListHead
    listentry = head^.Next

    WHILE listentry != head DO
        thread = CONTAINEROF listentry TO KeThread.ReadyEntry

        RtlPrint ( "%p ", thread )

        listentry = listentry^.Next
    END

    IF NOT RtlEmptyList ( head ) THEN
        RtlPrint ( "\n" )
    END
END

DbgThreadStatusName : ^UBYTE[8] = {
    [KI_THREAD_RUNNING] = "RUNNING",
    [KI_THREAD_READY] = "READY",
    [KI_THREAD_WAITING] = "WAITING",
    [KI_THREAD_INITIALIZED] = "INIT",
    [KI_THREAD_STANDBY] = "STANDBY",
    [KI_THREAD_INFLIGHT] = "INFLIGHT",
    [KI_THREAD_TERMINATED] = "TERM",
}

FN (DbgCommandF) DbgCommandThreads ()

    num : UBYTE[32]

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        RtlPrint ( "Usage: threads [proc]\n" )

        LEAVE
    END

    numval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT numval, // num
    ) THEN

        RtlPrint ( "Usage: threads [proc]\n" )

        LEAVE
    END

    proc := CAST numval TO ^KeProcess

    IF proc & DBG_POINTER_ALIGN_MASK THEN
        RtlPrint ( "Unaligned pointer %p\n", proc )

        LEAVE
    END

    IF NOT MmIsVirtualValid ( proc ) OR
        NOT MmIsVirtualValid ( proc + SIZEOF KeProcess - 1 ) THEN

        RtlPrint ( "Process object %p overlaps invalid page\n", proc )

        LEAVE
    END

    RtlPrint ( "%-8s %-22s %-8s %-4s\n", "PTR", "NAME", "STATUS", "PRI" )

    listhead := &proc^.ThreadListHead
    listentry := listhead^.Next

    WHILE listentry != listhead DO
        thread := CONTAINEROF listentry TO KeThread.ProcessListEntry

        IF thread & DBG_POINTER_ALIGN_MASK THEN
            RtlPrint ( "Unaligned thread object %p\n", thread )

            LEAVE
        END

        IF NOT MmIsVirtualValid ( thread ) OR
            NOT MmIsVirtualValid ( thread + SIZEOF KeThread - 1 ) THEN

            RtlPrint ( "Thread object %p overlaps invalid page\n", thread )

            LEAVE
        END

        RtlPrint (
            "%p %-22s %-8s %-4u\n",
            thread,
            &thread^.Name[0],
            DbgThreadStatusName[thread^.Status],
            thread^.Priority,
        )

        listentry = listentry^.Next
    END
END

FN (DbgCommandF) DbgCommandWait ()

    num : UBYTE[32]

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        RtlPrint ( "Usage: wait [thread]\n" )

        LEAVE
    END

    numval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT numval, // num
    ) THEN

        RtlPrint ( "Usage: wait [thread]\n" )

        LEAVE
    END

    thread := CAST numval TO ^KeThread

    IF thread & DBG_POINTER_ALIGN_MASK THEN
        RtlPrint ( "Unaligned pointer %p\n", thread )

        LEAVE
    END

    IF NOT MmIsVirtualValid ( thread ) OR
        NOT MmIsVirtualValid ( thread + SIZEOF KeThread - 1 ) THEN

        RtlPrint ( "Thread object %p overlaps invalid page\n", thread )

        LEAVE
    END

    RtlPrint ( "Thread timer: %p ", &thread^.Timeout )

    IF thread^.Timeout.EnqueuedTo THEN
        RtlPrint ( "(enqueued to %p)", thread^.Timeout.EnqueuedTo )
    END

    RtlPrint ( "\n" )

    waitblock := thread^.WaitBlockTable

    count := thread^.WaitCount

    RtlPrint ( "Waiting on %u objects\n", count )

    i := 0

    WHILE count DO
        IF waitblock & DBG_POINTER_ALIGN_MASK THEN
            RtlPrint ( "Unaligned waitblock %p\n", waitblock )

            LEAVE
        END

        IF NOT MmIsVirtualValid ( waitblock ) OR
            NOT MmIsVirtualValid ( waitblock + SIZEOF KiWaitBlock - 1 ) THEN

            RtlPrint ( "Wait block %p overlaps invalid page\n", waitblock )

            LEAVE
        END

        object := waitblock^.Object

        IF object & DBG_POINTER_ALIGN_MASK THEN
            RtlPrint ( "Unaligned object %p\n", object )

            LEAVE
        END

        IF NOT MmIsVirtualValid ( object ) OR
            NOT MmIsVirtualValid ( object + SIZEOF KiDispatchHeader - 1 ) THEN

            RtlPrint ( "Object %p overlaps invalid page\n", object )

            LEAVE
        END

        name := object^.Name

        IF NOT name THEN
            name = "NO NAME"
        END

        RtlPrint ( "wait(%u): %p '%s'\n", i, waitblock^.Object, name )

        waitblock += SIZEOF KiWaitBlock
        count -= 1
        i += 1
    END
END

FN (DbgCommandF) DbgCommandTrace ()

    num : UBYTE[32]

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN
        // Trace the CPU.

        DbgTraceContext ( DbgCurrentContext )

        LEAVE
    END

    numval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT numval, // num
    ) THEN
        RtlPrint ( "Usage: trace [thread]\n" )

        LEAVE
    END

    thread := CAST numval TO ^KeThread

    IF thread & DBG_POINTER_ALIGN_MASK THEN
        RtlPrint ( "Unaligned pointer %p\n", thread )

        LEAVE
    END

    IF NOT MmIsVirtualValid ( thread ) OR
        NOT MmIsVirtualValid ( thread + SIZEOF KeThread - 1 ) THEN

        RtlPrint ( "Thread object %p overlaps invalid page\n", thread )

        LEAVE
    END

    IF thread^.Status == KI_THREAD_RUNNING THEN
        RtlPrint ( "Running - no context.\n" )

#IF BLD_MP
        id := thread^.CurrentPrb^.Id
#ELSE
        id := 0
#END


        RtlPrint ( "Was running on CPU %u, switch there and run trace.\n", id )

        LEAVE
    END

    DbgTraceThreadContext ( thread^.Context )
END

#SECTION "text"
DbgCommandTable : DbgCommand[] = {
    {
        [Name] = "help",
        [Function] = &DbgCommandHelp,
        [Help] = "Display this help text.",
    },
    {
        [Name] = "clear",
        [Function] = &DbgCommandClear,
        [Help] = "Clear the console.",
    },
    {
        [Name] = "exit",
        [Function] = &DbgCommandExit,
        [Help] = "Exit the debugger.",
    },
    {
        [Name] = "reg",
        [Function] = &DbgCommandReg,
        [Help] = "Dump register contents.",
    },
    {
        [Name] = "pcsym",
        [Function] = &DbgCommandPcSym,
        [Help] = "Convert a program counter to a symbol name.",
    },
    {
        [Name] = "trace",
        [Function] = &DbgCommandTrace,
        [Help] = "Perform a backtrace.",
    },
    {
        [Name] = "peekl",
        [Function] = &DbgCommandPeekUlong,
        [Help] = "Peek a ULONG.",
    },
    {
        [Name] = "pokel",
        [Function] = &DbgCommandPokeUlong,
        [Help] = "Poke a ULONG.",
    },
    {
        [Name] = "crash",
        [Function] = &DbgCommandCrash,
        [Help] = "Cause a test crash.",
    },
    {
        [Name] = "sym",
        [Function] = &DbgCommandSym,
        [Help] = "Look up the value of a symbol by name.",
    },
    {
        [Name] = "cpu",
        [Function] = &DbgCommandCpu,
        [Help] = "Switch to examining the specified CPU's context.",
    },
    {
        [Name] = "ready",
        [Function] = &DbgCommandReady,
        [Help] = "Dump the ready queues of the current CPU.",
    },
    {
        [Name] = "threads",
        [Function] = &DbgCommandThreads,
        [Help] = "Dump the threads of the given process.",
    },
    {
        [Name] = "wait",
        [Function] = &DbgCommandWait,
        [Help] = "Dump wait information for a thread.",
    },
#IF 0
    {
        [Name] = "dispatch",
        [Function] = &DbgCommandDispatch,
        [Help] = "Dump wait information for a dispatch object.",
    },
#END

    // Sentinel.

    {},
}

FN DbgGetString (
    IN buffer : ^UBYTE,
    IN bufsize : UWORD,
)

    // Collect a string into the buffer.

    len := 0

    WHILE TRUE DO
        c := -1

        WHILE c == -1 DO
            c = HalDebugRead ()
        END

        IF c == '\r' THEN
            RtlPrint ( "\n" )

            BREAK
        END

        IF c == '\b' THEN
            IF len THEN
                len -= 1

                RtlPrint ( "\b \b" )
            END

        ELSEIF len < bufsize - 1 THEN
            buffer[len] = c

            RtlPrint ( "%c", c )

            len += 1
        END
    END

    buffer[len] = 0
END

FN DbgPrompt ()

    RtlPrint ( "\nMINTIA System Debugger\n" )

    DbgExit = FALSE

    WHILE NOT DbgExit DO
        RtlPrint ( ">> " )

        DbgGetString (
            &DbgCommandBuffer[0], // buffer
            256, // bufsize
        )

        DbgNextTokenPointer = &DbgCommandBuffer[0]

        IF DbgNextToken (
            &DbgTokenBuffer[0], // tokenbuffer
            DBG_TOKEN_BUFFER_SIZE, // bufsize
        ) THEN

            i := 0

            WHILE DbgCommandTable[i].Name DO
                cmd := &DbgCommandTable[i]

                IF RtlCompareString ( &DbgTokenBuffer[0], cmd^.Name ) == 0 THEN
                    cmd^.Function ()

                    BREAK
                END

                i += 1
            END

            IF NOT DbgCommandTable[i].Name THEN
                RtlPrint ( "%s is not a recognized command.\n",
                    &DbgTokenBuffer[0] )
            END
        END
    END
END