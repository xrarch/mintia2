//
// Implements the debugger prompt.
//

#INCLUDE "Dbg.hjk"
#INCLUDE "<ll>/System/OsContext.hjk"

#DEFINE DBG_TOKEN_BUFFER_SIZE 128
#DEFINE DBG_MONITOR_HEIGHT 24

DbgCommandBuffer : UBYTE[256]
DbgTokenBuffer : UBYTE[DBG_TOKEN_BUFFER_SIZE]

DbgNextTokenPointer : ^UBYTE

PUBLIC DbgCurrentContext : ^OsContext

FNPTR DbgCommandF ()

STRUCT DbgCommand
    Name : ^UBYTE,
    Function : DbgCommandF,
    Help : ^UBYTE,
END

// FORWARD
EXTERN DbgCommandTable : DbgCommand[]

DbgUsedLines : UBYTE
DbgAllLines : UBYTE
DbgExit : UBYTE = FALSE

FN DbgPaginate () : UWORD

    // Simple text pagination for the console.

    IF DbgAllLines THEN
        RETURN TRUE
    END

    result := TRUE

    IF DbgUsedLines >= DBG_MONITOR_HEIGHT - 1 THEN
        RtlPrint (
        "\[[7m(any) for more, (a) for all, (p) for a page, (q) to quit\[[0m" )

        c := -1

        WHILE c == -1 DO
            c = HalDebugRead ()
        END

        RtlPrint ( "\[[2K\r" )

        IF c == 'q' THEN
            result = FALSE
        
        ELSEIF c == 'p' THEN
            DbgUsedLines = 0

        ELSEIF c == 'a' THEN
            DbgAllLines = TRUE
        END
    END

    DbgUsedLines += 1

    RETURN result
END

FN DbgResetPagination ()
    
    // Reset the pagination; should be called before printing a list.

    DbgUsedLines = 0
    DbgAllLines = FALSE
END

FN DbgNextToken (
    IN tokenbuffer : ^UBYTE,
    IN bufsize : UWORD,
) : UWORD

    // Helper routine for getting the next token from a monitor command line.

    IF NOT DbgNextTokenPointer THEN
        RETURN FALSE
    END

    DbgNextTokenPointer = RtlTokenize (
        DbgNextTokenPointer, // buffer
        tokenbuffer, // tokenbuffer
        bufsize, // bufsize
        ' ', // delimiter
    )

    IF DbgNextTokenPointer THEN
        RETURN TRUE
    END

    RETURN FALSE
END

FN (DbgCommandF) DbgCommandHelp ()

    // Print the help table.

    DbgResetPagination ()

    i := 0

    WHILE DbgCommandTable[i].Name DO
        cmd := &DbgCommandTable[i]

        IF cmd^.Help THEN
            IF NOT DbgPaginate () THEN
                LEAVE
            END

            RtlPrint ( " %-10s%s\n", cmd^.Name, cmd^.Help )
        END

        i += 1
    END
END

FN (DbgCommandF) DbgCommandClear ()

    // Print magic ANSI-compatible sequence to clear the terminal and reset the
    // cursor back to the top left.

    RtlPrint ( "\[[0m\[[1;1H\[[2J" )

    RtlPrint ( "MINTIA System Debugger\n" )
END

FN (DbgCommandF) DbgCommandExit ()

    DbgExit = TRUE
END

FN (DbgCommandF) DbgCommandReg ()

    DbgDumpRegisters ( DbgCurrentContext )
END

FN (DbgCommandF) DbgCommandPcSym ()

    num : UBYTE[32]

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        RtlPrint ( "Usage: pcsym [pc]\n" )

        LEAVE
    END

    numval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT numval, // num
    ) THEN

        RtlPrint ( "Usage: pcsym [pc]\n" )

        LEAVE
    END

    dll : ^BlDll
    symvalue : ^VOID
    symname : ^UBYTE

    sym := DbgGetSymbolAndDll (
        CAST numval TO ^VOID, // address
        OUT dll, // dll
        OUT symvalue, // symvalue
        OUT symname, // symname
    )

    IF NOT sym THEN
        RtlPrint ( "Couldn't find matching symbol\n" )

        LEAVE
    END

    dllname := RtlGetFileName ( &dll^.Name[0] )

    RtlPrint (
        "%s!%s+%x\n", // fmt
        dllname,
        symname,
        numval - symvalue,
    )
END

FN (DbgCommandF) DbgCommandTrace ()

    DbgTraceContext ( DbgCurrentContext )
END

FN (DbgCommandF) DbgCommandPeekUlong ()

    num : UBYTE[32]

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        RtlPrint ( "Usage: peekl [addr]\n" )

        LEAVE
    END

    numval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT numval, // num
    ) THEN

        RtlPrint ( "Usage: peekl [addr]\n" )

        LEAVE
    END

    addr := CAST numval TO ^ULONG

    IF NOT MmIsVirtualValid ( addr ) THEN
        RtlPrint ( "Invalid address\n" )

        LEAVE
    END

    IF addr & 3 THEN
        RtlPrint ( "Unaligned address\n" )

        LEAVE
    END

    RtlPrint ( "%08x\n", addr[0] )
END

FN (DbgCommandF) DbgCommandPokeUlong ()

    num : UBYTE[32]

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        RtlPrint ( "Usage: pokel [addr] [value]\n" )

        LEAVE
    END

    numval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT numval, // num
    ) THEN

        RtlPrint ( "Usage: pokel [addr] [value]\n" )

        LEAVE
    END

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        RtlPrint ( "Usage: pokel [addr] [value]\n" )

        LEAVE
    END

    newval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT newval, // num
    ) THEN

        RtlPrint ( "Usage: pokel [addr] [value]\n" )

        LEAVE
    END

    addr := CAST numval TO ^ULONG

    IF NOT MmIsVirtualValid ( addr ) THEN
        RtlPrint ( "Invalid address\n" )

        LEAVE
    END

    IF addr & 3 THEN
        RtlPrint ( "Unaligned address\n" )

        LEAVE
    END

    addr[0] = newval

    RtlPrint ( "%08x = %08x\n", addr, newval )
END

FN (DbgCommandF) DbgCommandCrash ()

    DbgExit = TRUE
    DbgCauseCrash = TRUE
END

FN (DbgCommandF) DbgCommandSym ()

    name : UBYTE[64]

    IF NOT DbgNextToken (
        &name[0], // tokenbuffer
        64, // bufsize
    ) THEN

        RtlPrint ( "Usage: sym [name]\n" )

        LEAVE
    END

    dll : ^BlDll
    value : ^VOID

    IF NOT DbgGetSymbolValueByName (
        &name[0], // name
        OUT dll, // dll
        OUT value, // symvalue
    ) THEN

        RtlPrint ( "Couldn't find that symbol\n" )

        LEAVE
    END

    dllname := RtlGetFileName ( &dll^.Name[0] )

    RtlPrint ( "%s!%s = %p\n", dllname, &name[0], value )
END

FN (DbgCommandF) DbgCommandCpu ()

    num : UBYTE[32]

    IF NOT DbgNextToken (
        &num[0], // tokenbuffer
        32, // bufsize
    ) THEN

        RtlPrint ( "Usage: cpu [num]\n" )

        LEAVE
    END

    numval : UWORD

    IF NOT RtlStringToNumber (
        &num[0], // src
        32, // bufsize
        OUT numval, // num
    ) THEN

        RtlPrint ( "Usage: cpu [num]\n" )

        LEAVE
    END

    IF numval >= KeLoaderBlock.ProcessorCount THEN
        RtlPrint ( "No such CPU\n" )

        LEAVE
    END

    prb := KiPrbFromNumber ( numval )

    context := prb^.FrozenContext

    // Check for validity.

    IF NOT context THEN
        RtlPrint ( "Processor failed to freeze%s", " - not switched\n" )

        LEAVE
    END

    IF NOT MmIsVirtualValid ( context ) THEN
        RtlPrint ( "Context lies in invalid virtual space%s", " - not switched\n" )

        LEAVE
    END

    IF NOT MmIsVirtualValid ( context + SIZEOF OsContext ) THEN
        RtlPrint ( "Context ends in invalid virtual space%s", " - not switched\n" )

        LEAVE
    END

    DbgCurrentContext = context
END

#SECTION "text"
DbgCommandTable : DbgCommand[] = {
    {
        [Name] = "help",
        [Function] = &DbgCommandHelp,
        [Help] = "Display this help text.",
    },
    {
        [Name] = "clear",
        [Function] = &DbgCommandClear,
        [Help] = "Clear the console.",
    },
    {
        [Name] = "exit",
        [Function] = &DbgCommandExit,
        [Help] = "Exit the debugger.",
    },
    {
        [Name] = "reg",
        [Function] = &DbgCommandReg,
        [Help] = "Dump register contents.",
    },
    {
        [Name] = "pcsym",
        [Function] = &DbgCommandPcSym,
        [Help] = "Convert a program counter to a symbol name.",
    },
    {
        [Name] = "trace",
        [Function] = &DbgCommandTrace,
        [Help] = "Perform a backtrace.",
    },
    {
        [Name] = "peekl",
        [Function] = &DbgCommandPeekUlong,
        [Help] = "Peek a ULONG.",
    },
    {
        [Name] = "pokel",
        [Function] = &DbgCommandPokeUlong,
        [Help] = "Poke a ULONG.",
    },
    {
        [Name] = "crash",
        [Function] = &DbgCommandCrash,
        [Help] = "Cause a test crash.",
    },
    {
        [Name] = "sym",
        [Function] = &DbgCommandSym,
        [Help] = "Look up the value of a symbol by name.",
    },
    {
        [Name] = "cpu",
        [Function] = &DbgCommandCpu,
        [Help] = "Switch to examining the specified CPU's context.",
    },

    // Sentinel.

    {},
}

FN DbgGetString (
    IN buffer : ^UBYTE,
    IN bufsize : UWORD,
)

    // Collect a string into the buffer.

    len := 0

    WHILE TRUE DO
        c := -1

        WHILE c == -1 DO
            c = HalDebugRead ()
        END

        IF c == '\r' THEN
            RtlPrint ( "\n" )

            BREAK
        END

        IF c == '\b' THEN
            IF len THEN
                len -= 1

                RtlPrint ( "\b \b" )
            END

        ELSEIF len < bufsize - 1 THEN
            buffer[len] = c

            RtlPrint ( "%c", c )

            len += 1
        END
    END

    buffer[len] = 0
END

FN DbgPrompt ()

    RtlPrint ( "\nMINTIA System Debugger\n" )

    DbgExit = FALSE

    WHILE NOT DbgExit DO
        RtlPrint ( ">> " )

        DbgGetString (
            &DbgCommandBuffer[0], // buffer
            256, // bufsize
        )

        DbgNextTokenPointer = &DbgCommandBuffer[0]

        IF DbgNextToken (
            &DbgTokenBuffer[0], // tokenbuffer
            DBG_TOKEN_BUFFER_SIZE, // bufsize
        ) THEN

            i := 0

            WHILE DbgCommandTable[i].Name DO
                cmd := &DbgCommandTable[i]

                IF RtlCompareString ( &DbgTokenBuffer[0], cmd^.Name ) == 0 THEN
                    cmd^.Function ()

                    BREAK
                END

                i += 1
            END

            IF NOT DbgCommandTable[i].Name THEN
                RtlPrint ( "%s is not a recognized command.\n",
                    &DbgTokenBuffer[0] )
            END
        END
    END
END