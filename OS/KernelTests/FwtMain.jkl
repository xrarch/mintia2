//
// Main function for the fireworks test.
//

#INCLUDE "Fwt.hjk"

PUBLIC FwtDataCache : ^MiPoolCache

FN (KeStartThreadF) FwtMainThread (
    IN context1 : UWORD,
    IN context2 : UWORD
)

    // Main loop for fireworks test.

    RtlPrint ( "FwtMainThread: Fireworks looping\n" )
    
    WHILE TRUE DO
        count := FwtRand () % 2 + 1

        i := 0

        WHILE i < count DO
            FwtSpawnExplodeable ()

            i += 1
        END

        interval : RtlUquad

        RtlSetUquadToUlong (
            &interval, // uquad
            CAST 2000 + FwtRand() % 2000 TO UWORD, // ulong
        )

        KeSleep (
            &interval, // interval
            KE_KERNEL_MODE, // waitmode
            FALSE, // alertable
        )
    END
END

FN FwtMain ()

    // Perform the fireworks test.
    
    thread : ^PsThread
    
    FwtDataCache = MmCreatePoolCache (
        PsCurrentNode (), // node
        "Fireworks Data", // name
        SIZEOF FwtData, // size
        MM_NONPAGED_POOL, // poolindex
        'FwtD', // tag
        NULLPTR, // constructor
        NULLPTR, // destructor
        NULLPTR, // context
    )

    FwtInitGraphics ()

    FwtFillScreen ( FWT_BACKGROUND_COLOR )

    name : RtlString
    RtlInitializeString ( &name, "FireworksMain" )
    
    status := PsCreateExecutiveThread (
        &name, // name
        &FwtMainThread, // startfunc
        NULLPTR, // context1
        NULLPTR, // context2
        0, // flags
        OUT thread // thread
    )
    
    IF OsError ( status ) THEN
        RtlPrint ( "FwtMain: Could not create main thread\n" )

        MmDeletePoolCache ( FwtDataCache )

        LEAVE
    END
    
    ObUnreferenceObject ( thread )
END

EXPORT FN KtMain ()

    // ktests.sys entrypoint

    FwtMain ()
END