//
// Boot resource management for the MINTIA Loader.
//

#INCLUDE "Bl.hjk"

FN (BlCallbackPerLineF) BlLoadResourceCallback (
    IN buf : ^UBYTE,
    IN context : ^VOID,
    IN linenum : UWORD,
)

    WHILE buf^ == ' ' OR buf^ == '\t' DO
        buf += 1
    END

    IF buf^ == '#' THEN
        // Comment line. Ignore.

        LEAVE
    END

    // Parse a resource line of the format:
    // name path

    tokenbuf := &BlTemporaryBuffer[0]

    next := RtlTokenize (
        buf, // buffer
        tokenbuf, // tokenbuffer
        1024, // bufsize
        ' ', // delimiter
    )

    IF NOT next THEN
        // Empty line.

        LEAVE
    END

    rsrc := CAST BlAllocateMemory (
        SIZEOF BlResource, // bytes
    ) TO ^BlResource

    rsrc^.Jettison = TRUE

    RtlCopyString (
        &rsrc^.Name[0], // dest
        tokenbuf, // src
        BL_RESOURCE_NAME_MAX, // bufsize
    )

    RtlCopyString (
        tokenbuf, // dest
        "/mintia/Resources/", // src
        1024, // bufsize
    )

    next = RtlTokenize (
        next, // buffer
        &tokenbuf[18], // tokenbuffer
        1024 - 18, // bufsize
        ' ', // delimiter
    )

    IF NOT next THEN
        RtlPrint ( "WARNING: Resources.txt:%d: Badly formatted\n", linenum )

        LEAVE
    END

    file := BlOpenFile (
        &BlBootDevice, // device
        tokenbuf, // path
    )

    IF NOT file THEN
        RtlPrint (
            "WARNING: Couldn't load %s (%s)\n", // fmt
            &rsrc^.Name[0],
            tokenbuf,
        )

        LEAVE
    END

    rsrc^.Size = file^.Size

    filepages := file^.Size + 1
    filepages += RTL_PAGE_SIZE - 1
    filepages >>= RTL_PAGE_SHIFT

    desc : ^BlMemoryDescriptor

    rsrc^.Data = CAST BlAllocateMappedRange (
        filepages, // pages
        BL_KERNEL_STRUCTURES, // preferredva
        FALSE, // fixed
        BL_MEMORY_USED, // type
        OUT desc, // desc
    ) TO ^UBYTE

    IF NOT buf THEN
        RtlPrint (
            "WARNING: Couldn't alloc %s (%s)\n", // fmt
            &rsrc^.Name[0],
            tokenbuf,
        )

        LEAVE
    END

    // Read the file contents.

    BlReadFile (
        file, // file
        0, // offset
        rsrc^.Data, // buf
        file^.Size, // length
    )

    // Insert in resources list.

    RtlInsertAtTailList (
        &BlInfoBlock.ResourceListHead, // head
        &rsrc^.Entry, // entry
    )

    BlInfoBlock.ResourceCount += 1
END

FN BlLoadResources ()

    // Initialize the resource list.

    RtlInitializeList ( &BlInfoBlock.ResourceListHead )

    // Load all of the boot resources.

    IF NOT BlCallbackPerLineFile (
        &BlBootDevice, // device
        "/mintia/Resources.txt", // path
        &BlLoadResourceCallback, // callback
        NULLPTR, // context
    ) THEN

        RtlPrint ( "WARNING: Couldn't open /mintia/Resources.txt\n" )
    END
END