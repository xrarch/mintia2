//
// Management for string internment for the MINTIA Executive.
//

#INCLUDE "Exp.hjk"

#DEFINE EXP_NAME_BUCKETS 128

STRUCT ExpNameBucket
    TreeRoot : RtlAvlNode,
    Lock : KeLock,
END

ExpNameBuckets : ExpNameBucket[EXP_NAME_BUCKETS]

#SECTION "INITtext"
FN ExpInitializeNames ()

    // Initialize the interned name buckets.

    i := 0

    WHILE i < EXP_NAME_BUCKETS DO
        RtlInitializeAvl ( &ExpNameBuckets[i].TreeRoot )
        KeInitializeLock ( &ExpNameBuckets[i].Lock )

        i += 1
    END
END

#SECTION "PAGEtext"
FN (RtlAvlLessThanF) ExpCompareNameNodes (
    IN a : ^RtlAvlNode,
    IN b : ^RtlAvlNode,
) : UWORD

    // Return whether A < B, lexicographically.

    RETURN CAST RtlCompareRtlString (
        ExNameToString ( CONTAINEROF a TO ExName.Entry ), // str1
        ExNameToString ( CONTAINEROF b TO ExName.Entry ), // str2
    ) TO WORD < 0
END

#SECTION "PAGEtext"
FN ExpHash (
    IN str : ^UBYTE,
) : UWORD

    // Simple hash for a string.

    hash := 0

    WHILE str^ DO
        hash += str^
        hash += hash << 10
        hash $= hash >> 6

        str += 1
    END

    hash += hash << 3
    hash $= hash >> 11
    hash += hash << 15

    RETURN hash
END

#SECTION "PAGEtext"
FN ExFindName (
    IN str : ^RtlString,
) : ^ExName

    // Find a name in the string internment buckets.

    node : ^ExName = NULLPTR

    // Hash the name.

    len := str^.Length

    hash := ExpHash ( str^.Data )

    // Get the hash bucket.

    bucket := &ExpNameBuckets[hash & (EXP_NAME_BUCKETS - 1)]

@Retry

    // Lock the bucket.

    KeAcquireLockExclusive ( &bucket^.Lock )

    // Look up the name in the bucket, which is an AVL tree keyed by string and
    // ordered lexicographically.

    avlnode := bucket^.TreeRoot.Right

    WHILE TRUE DO
        IF NOT avlnode THEN
            // Didn't find it, we'll need to create it.

            BREAK
        END

        checknode := CONTAINEROF avlnode TO ExName.Entry

        res := CAST RtlCompareRtlString (
            str, // str1
            ExNameToString ( checknode ), // str2
        ) TO WORD

        IF res == 0 THEN
            // Found it! Unlock the bucket and return the node.

            checknode^.References += 1

            KeReleaseLock ( &bucket^.Lock )

            IF node THEN
                // We allocated a node unnecessarily earlier, have to free it.

                MmFreePool (
                    node, // ptr
                    'Name', // tag
                )
            END

            RETURN checknode
        END

        IF res < 0 THEN
            avlnode = avlnode^.Left
        ELSE
            avlnode = avlnode^.Right
        END
    END

    IF NOT node THEN
        // Have to create a node.
        // Unlock the bucket across the allocation.

        KeReleaseLock ( &bucket^.Lock )

        node = MmAllocatePool (
            MM_PAGED_POOL, // poolindex
            SIZEOF ExName + SIZEOF RtlString + len + 1, // bytes
            'Name', // tag
            TRUE, // wait
        )

        IF NOT node THEN
            // Failed to allocate the name.

            RETURN NULLPTR
        END

        // Retry the lookup. We'll use the node we just allocated if it's still
        // not there, otherwise we'll free it.

        GOTO Retry
    END

    // Initialize the name.

    node^.References = 1
    node^.BucketIndex = hash & (EXP_NAME_BUCKETS - 1)

    newstr := ExNameToString ( node )

    newstr^.Length = len
    newstr^.Data = CAST newstr + SIZEOF RtlString TO ^UBYTE

    RtlCopyBytes (
        newstr + SIZEOF RtlString, // dest
        str^.Data, // src
        len + 1, // sz
    )

    // Insert into the tree.

    RtlInsertAvl (
        &bucket^.TreeRoot, // root
        &node^.Entry, // node
        &ExpCompareNameNodes, // comparisonfunc
    )

    // Unlock bucket and return node.

    KeReleaseLock ( &bucket^.Lock )

    RETURN node
END

#SECTION "PAGEtext"
FN ExUnreferenceName (
    IN name : ^ExName,
)

    // Unreference the name node.

    bucket := &ExpNameBuckets[name^.BucketIndex]

    // Lock the bucket.

    KeAcquireLockExclusive ( &bucket^.Lock )

    // Decrement the reference count.

    oldcount := name^.References
    name^.References = oldcount - 1

    IF oldcount == 1 THEN
        // Remove from tree.

        RtlRemoveAvl (
            &bucket^.TreeRoot, // root
            &name^.Entry, // node
        )

        KeReleaseLock ( &bucket^.Lock )

        // Free outside the bucket lock.

        MmFreePool (
            name, // ptr
            'Name', // tag
        )

        LEAVE
    END

    // Unlock the bucket.

    KeReleaseLock ( &bucket^.Lock )
END

#SECTION "PAGEtext"
FN ExReferenceName (
    IN name : ^ExName,
)

    // Reference the name node.

    bucket := &ExpNameBuckets[name^.BucketIndex]

    // Lock the bucket.

    KeAcquireLockExclusive ( &bucket^.Lock )

    // Increment the reference count.

    name^.References += 1

    // Unlock the bucket.

    KeReleaseLock ( &bucket^.Lock )
END

#SECTION "PAGEtext"
FN ExDuplicateString (
    IN outputstring : ^RtlString,
    IN inputstring : ^RtlString,
    IN poolindex : UWORD,
    IN tag : UWORD,
) : OsStatus

    // Duplicate a string into an output string.

    // Copy the length.

    outputstring^.Length = inputstring^.Length

    // Create a new string buffer (this is the important work).

    outputstring^.Data = MmAllocatePool (
        poolindex, // poolindex
        inputstring^.Length + 1, // bytes
        tag, // tag
        TRUE, // wait
    )

    IF NOT outputstring^.Data THEN
        RETURN OS_STATUS_NO_MEMORY
    END

    // Copy the old string into the new one, including the null terminator.

    RtlCopyBytes (
        outputstring^.Data, // dest
        inputstring^.Data, // src
        inputstring^.Length + 1, // sz
    )

    RETURN OS_STATUS_SUCCESS
END