//
// Contains the self-initialization routines for the MINTIA Executive.
//

#INCLUDE "Exp.hjk"

ExZeroPageWorker : KeThread
ExZeroPageWorkerStack : UBYTE[(KE_STACK_PAGES << RTL_PAGE_SHIFT) + 32]

EXTERN FN MmZeroPageWorker ()

#SECTION "INIT$text"
FN (KeStartThreadF) ExpInitializeExecutive (
    IN context1 : UWORD,
    IN context2 : UWORD,
)

    // Initialize the Executive. Called in the context of the future Zero Page
    // Worker (ZPW) thread.

    // ...

    // The Executive is initialized, become the ZPW.

    MmZeroPageWorker ()
END

#SECTION "INIT$text"
FN ExStartExecutive ()

    // Called by the Kernel (Ke) after it finishes its own self-initialization.
    // Responsible for kick-starting the initialization of the rest of
    // the Executive.

    // We're currently in the context of the boot processor's idle thread, which
    // is not good enough for us to initialize with, as we'd like to be able to
    // block and stuff without destroying the scheduler. Therefore, we will now
    // hand-craft the thread that we perform initialization in. Afterwards, it
    // will repurpose itself as the Zero Page Worker (ZPW) thread.

    // First get a 32-byte-aligned pointer to its statically allocated kernel
    // stack.

    kstack := (&ExZeroPageWorkerStack[0] + 31) & ~31

    // Now initialize the thread object.

    KeInitializeThread (
        &KeIdleProcess, // process
        &ExZeroPageWorker, // thread
        "Zpw", // name
        kstack, // kstack
        KE_STACK_PAGES << RTL_PAGE_SHIFT, // kstacksize
        &ExpInitializeExecutive, // startfunc
        0, // context1
        0, // context2
    )

    // And ready the thread.

    KeReadyThread ( &ExZeroPageWorker )

    // Return and become the idle loop for the boot processor.
END