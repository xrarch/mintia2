//
// Implements the executive Event object.
//

#INCLUDE "Exp.hjk"

#INCLUDE "<inc>/Ob.hjk"
#INCLUDE "<inc>/Ns.hjk"
#INCLUDE "<inc>/Ps.hjk"

#INCLUDE "<ll>/System/OsObject.hjk"
#INCLUDE "<ll>/System/OsNamespace.hjk"

STRUCT ExpEventContext
    Notification : UBYTE,
    SignalState : UBYTE,
END

#SECTION "PAGEtext"
FN (ObTypeInitializeF) ExpInitializeEventObject (
    IN object : ^VOID,
    IN context : ^VOID,
) : OsStatus

    // We've been called to initialize a new event object, so do that.

    event := CAST object TO ^ExEvent

    ctx := CAST context TO ^ExpEventContext

    KeInitializeEvent (
        &event^.Event, // event
        "ExEventObject", // name
        ctx^.Notification, // notification
        ctx^.SignalState, // signalstate
    )
END

#SECTION "PAGEtext"
PUBLIC ExEventType : ObType = {
    [Name] = "Event", // name

    [Initialize] = &ExpInitializeEventObject,

    [WaitOffset] = OFFSETOF ExEvent.Event,
    [TypeIdentifier] = OS_EVENT_TYPE,
    [Tag] = 'Evnt',

    [IsPaged] = FALSE,
}

#SECTION "PAGEtext"
FN ExCreateEventObject (
    IN params : ^NsOpenParameters,
    IN notification : UWORD,
    IN signalstate : UWORD,
    OUT event : ^ExEvent,
) : OsStatus

    // Create an event object.

    ctx : ExpEventContext

    ctx.Notification = notification
    ctx.SignalState = signalstate

    obparams : ObParameters

    obparams.Type = &ExEventType
    obparams.BodySize = SIZEOF ExEvent
    obparams.PagedBodySize = 0
    obparams.NpQuotaBias = 0
    obparams.PgQuotaBias = 0

    obparams.Context = &ctx

    RETURN NsCreateObject (
        params, // params
        &obparams, // obparams
        OUT event, // object
    )
END

#SECTION "PAGEtext"
FN ExCreateEvent (
    IN params : ^NsOpenParameters,
    IN notification : UWORD,
    IN signalstate : UWORD,
    OUT handle : UWORD,
) : OsStatus

    // Create an event object handle.

    object : ^ExEvent

    status := ExCreateEventObject (
        params, // params
        notification, // notification
        signalstate, // signalstate
        OUT object, // object
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    status = ObInsertObject (
        PsCurrentProcess (), // process
        object, // object
        params^.Captured.Access, // access
        OUT handle, // handle
    )

    IF OsError ( status ) THEN
        ObUnreferenceObject ( object )
    END

    RETURN status
END

#SECTION "PAGEtext"
FN OsCreateEvent (
    IN params : ^OsOpenParameters,
    IN notification : UWORD,
    IN signalstate : UWORD,
    OUT handle : UWORD,
) : OsStatus

    // Create an event object, system service.

    sysparams : NsOpenParameters

    status := NsCaptureOpenParameters (
        params, // userparams
        &sysparams, // sysparams
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    status = ExCreateEvent (
        &sysparams, // params
        notification, // notification
        signalstate, // signalstate
        OUT handle, // handle
    )

    NsFreeOpenParameters ( &sysparams )

    RETURN status
END

#SECTION "PAGEtext"
FN OsResetEvent (
    IN handle : UWORD,
    OUT signaled : UWORD,
) : OsStatus

    event : ^ExEvent
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &ExEventType, // type
        OUT event, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_READ != access THEN
        // Not a subset of the required access.

        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    signaled = KeResetEvent ( &event^.Event )

@Exit

    ObUnreferenceObject ( event )

    RETURN status
END

#SECTION "PAGEtext"
FN OsSignalEvent (
    IN handle : UWORD,
    OUT signaled : UWORD,
) : OsStatus

    event : ^ExEvent
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &ExEventType, // type
        OUT event, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_EXEC != access THEN
        // Not a subset of the required access.

        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    signaled = KeSignalEvent (
        &event^.Event, // event
        0, // priorityboost
    )

@Exit

    ObUnreferenceObject ( event )

    RETURN status
END

#SECTION "PAGEtext"
FN OsReadEvent (
    IN handle : UWORD,
    OUT signaled : UWORD,
) : OsStatus

    event : ^ExEvent
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &ExEventType, // type
        OUT event, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_READ != access THEN
        // Not a subset of the required access.

        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    signaled = event^.Event.Header.SignalCount

@Exit

    ObUnreferenceObject ( event )

    RETURN status
END