//
// Implements a simple, general purpose handle table for the MINTIA Executive.
//
// Note that the handle table assumes that the first entry of a handle will have
// a clear low bit when in use, such as being an aligned pointer. If the low bit
// is set, it is considered free.
//

#INCLUDE "Exp.hjk"

#DEFINE EXP_FREE_HANDLE 1

#DEFINE EXP_NEXT_HANDLE_MASK [(~3)]
#DEFINE EXP_NEXT_HANDLE_SHIFT 2

#DEFINE EXP_EXTEND_BY 16

STRUCT ExpFreeHandle
    Next : UWORD,
END

#SECTION "PAGEtext"
FN ExInitializeHandleTable (
    IN handletable : ^ExHandleTable,
    IN entrysizelog : UWORD,
    IN quotablock : ^MiQuotaBlock,
)

    // Initialize a handle table.
    // Entry size log is given in units of 2 pointers.

    handletable^.EntrySizeLog = entrysizelog + RTL_MACHINE_WORD_LOG + 1
    handletable^.QuotaBlock = quotablock
    handletable^.Entries = 0
    handletable^.FreeListHead = -1
    handletable^.Table = NULLPTR

    MmReferenceQuotaBlock ( quotablock )
END

#SECTION "PAGEtext"
FN ExLookupHandle (
    IN handletable : ^ExHandleTable,
    IN handle : UWORD,
) : ^VOID

    // Look up a handle and return a pointer to the handle table entry.

    IF handle >= handletable^.Entries THEN
        RETURN NULLPTR
    END

    entry := handletable^.Table + (handle << handletable^.EntrySizeLog)

    IF (CAST entry TO ^UWORD)[0] & EXP_FREE_HANDLE THEN
        // This handle entry is free.

        RETURN NULLPTR
    END

    RETURN entry
END

#SECTION "PAGEtext"
FN ExEnumerateHandleTable (
    IN handletable : ^ExHandleTable,
    IN func : ExHandleTableEnumerationF,
    IN context : UWORD,
)

    // Call a function for each handle in the table.

    i := 0
    entries := handletable^.Entries

    WHILE i < entries DO
        entryptr := ExLookupHandle (
            handletable, // handletable
            i, // handle
        )

        IF entryptr THEN
            func (
                handletable, // handletable
                i, // index
                entryptr, // entryptr
                context, // context
            )
        END

        i += 1
    END
END

#SECTION "PAGEtext"
FN ExDeleteHandleTable (
    IN handletable : ^ExHandleTable,
    IN func : ExHandleTableEnumerationF,
    IN context : UWORD,
)

    // Prepare a handle table for deletion.

    IF func THEN
        // Call a function for each handle.

        ExEnumerateHandleTable (
            handletable, // handletable
            func, // func
            context, // context
        )
    END

    // Deallocate handle table structures.

    table := handletable^.Table

    IF table THEN
        MmFreePool (
            table, // ptr
            'HnTb', // tag
        )

        MmUnchargePoolQuota (
            handletable^.QuotaBlock, // quotablock
            handletable^.Entries << handletable^.EntrySizeLog, // charge
            MM_PAGED_POOL, // poolindex
        )
    END

    MmUnreferenceQuotaBlock ( handletable^.QuotaBlock )
END

#SECTION "PAGEtext"
FN ExDeleteHandle (
    IN handletable : ^ExHandleTable,
    IN handle : UWORD,
    IN entry : ^VOID,
) : UWORD

    // Delete the handle. Return TRUE if the handle was found and deleted,
    // otherwise FALSE. Copy the contents of the table entry to the provided
    // pointer.

    entryptr := CAST ExLookupHandle (
        handletable, // handletable
        handle, // handle
    ) TO ^ExpFreeHandle

    IF NOT entryptr THEN
        RETURN FALSE
    END

    log := handletable^.EntrySizeLog

    IF entry THEN
        RtlCopyBytes (
            entry, // dest
            entryptr, // src
            1 << log, // sz
        )
    END

    // Insert the free handle into the list.

    IF handletable^.FreeListHead == -1 THEN
        entryptr^.Next = EXP_NEXT_HANDLE_MASK | EXP_FREE_HANDLE

    ELSE
        entryptr^.Next = (handletable^.FreeListHead << EXP_NEXT_HANDLE_SHIFT) |
            EXP_FREE_HANDLE
    END

    handletable^.FreeListHead = handle

    RETURN TRUE
END

#SECTION "PAGEtext"
FN ExCreateHandle (
    IN handletable : ^ExHandleTable,
    OUT handle : UWORD,
    OUT entryptr : ^VOID,
) : OsStatus

    // Allocate a handle from the handle table.

    handle = handletable^.FreeListHead
    table := handletable^.Table
    log := handletable^.EntrySizeLog

    free : ^ExpFreeHandle

    IF handle != -1 THEN
        // Take a handle from the free list.

        entryptr = table + (handle << log)

        free = CAST entryptr TO ^ExpFreeHandle

        IF free^.Next == EXP_NEXT_HANDLE_MASK | EXP_FREE_HANDLE THEN
            handletable^.FreeListHead = -1
        ELSE
            handletable^.FreeListHead = free^.Next >> EXP_NEXT_HANDLE_SHIFT
        END

        RETURN OS_STATUS_SUCCESS
    END

    // Grow the handle table.

    oldsize := handletable^.Entries << log
    newsize := oldsize + (EXP_EXTEND_BY << log)

    // First charge quota for the new table.

    status := MmChargePoolQuota (
        handletable^.QuotaBlock, // quotablock
        newsize, // charge
        MM_PAGED_POOL, // poolindex
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    // Now allocate it.

    newtable := MmAllocatePool (
        MM_PAGED_POOL, // poolindex
        newsize, // bytes
        'HnTb', // tag
        TRUE, // wait
    )

    IF NOT newtable THEN
        // Uncharge quota.

        MmUnchargePoolQuota (
            handletable^.QuotaBlock, // quotablock
            newsize, // charge
            MM_PAGED_POOL, // poolindex
        )

        RETURN OS_STATUS_NO_MEMORY
    END

    IF table THEN
        // Copy old table into new.

        RtlCopyBytes (
            newtable, // dest
            table, // src
            oldsize, // sz
        )

        // Free old table.

        MmFreePool (
            table, // ptr
            'HnTb', // tag
        )

        // Uncharge old quota.

        MmUnchargePoolQuota (
            handletable^.QuotaBlock, // quotablock
            oldsize, // charge
            MM_PAGED_POOL, // poolindex
        )
    END

    entryptr = newtable + oldsize
    handle = handletable^.Entries

    // Set new table.

    handletable^.Table = newtable
    handletable^.Entries = handle + EXP_EXTEND_BY

    // Zero out the new space.

    RtlFillMemoryWithUlong (
        entryptr, // ptr
        EXP_EXTEND_BY << log, // sz
        0, // ulong
    )

    // Insert the new space into the free list.
    // First set the free list head to this handle plus one.

    handle += 1

    handletable^.FreeListHead = handle

    // Now set the last handle to be the tail of the list.

    free = newtable + newsize - (1 << log)

    free^.Next = EXP_NEXT_HANDLE_MASK | EXP_FREE_HANDLE

    // Now initialize the list items.

    free = newtable + oldsize

    i := EXP_EXTEND_BY - 2

    WHILE i DO
        i -= 1
        free += (1 << log)
        handle += 1

        free^.Next = (handle << EXP_NEXT_HANDLE_SHIFT) | EXP_FREE_HANDLE
    END

    RETURN OS_STATUS_SUCCESS
END