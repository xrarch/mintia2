//
// Implements initialization for the XR/station HAL.
//

#INCLUDE "Halp.hjk"

#SECTION "INIT$text"
FN HalpConfigureTimer ()

    // Configure the timer interrupt to interrupt at 5ms intervals.

    timer := CAST KeLoaderBlock.U.Xr.CitronBase + 0x80 TO ^HalpTimer

    timer^.DataPort = HAL_TIMER_INTERVAL
    BARRIER

    timer^.CmdPort = 1
    BARRIER
END

#SECTION "INIT$text"
FN HalpInitializeLsic (
    IN procid : UWORD,
)

    // Initialize the interrupt controller to mask out all interrupts except
    // for the timer interrupt and IPI interrupt. Then enable interrupts.

    lsic :=
        CAST KeLoaderBlock.U.Xr.LsicBase + procid * HALP_LSIC_GAP TO ^HalpLsic

    prb := KI_CURRENT_PRB

    // Stash the LSIC base.

    prb^.LsicBase = lsic

    // Reset the pending registers.

    lsic^.Pending0 = 0
    lsic^.Pending1 = 0
    BARRIER

    // Initially set the IPL to 63 to enable all.

    lsic^.Ipl = 63
    BARRIER

    // Configure the mask to enable IPIs and the timer.

    lsic^.Mask0 = 0xFFFFFFF9
    lsic^.Mask1 = 0xFFFFFFFF
    BARRIER

    // Initialize the timer interrupt object.

    int := &prb^.TimerInterrupt

    KeInitializeInterrupt (
        int, // interrupt
        &HalpTimerInterrupt, // routine
        0, // context
        2, // vector
        KI_IPL_CLOCK, // ipl
        FALSE, // edgetriggered
        FALSE, // sharevector
        procid, // procid
    )

    // Manually insert in PRB.

    prb^.IrqDispatchTable[2] = int

#IF BLD_MP
    // Initialize the IPI interrupt object.

    int = &prb^.IpiInterrupt

    KeInitializeInterrupt (
        int, // interrupt
        &HalpIpiInterrupt, // routine
        0, // context
        1, // vector
        KI_IPL_IPI, // ipl
        FALSE, // edgetriggered
        FALSE, // sharevector
        procid, // procid
    )

    // Manually insert in PRB.

    prb^.IrqDispatchTable[1] = int
#END

    // Enable interrupts.

    KiEnableInterrupts ()
END

#SECTION "INIT$text"
FN HalProcessorInitialize (
    IN prb : ^KiPrb,
)

    // Do whatever is needed to initialize the current processor.

    HalpInitializeLsic ( KiCurrentProcessor () )
END

#SECTION "INIT$text"
FN HalEarlyInitialize ()

    // This initialization routine is called before there is a system thread
    // context. Here we have to establish everything required for base line
    // functionality, including a simple boot console of some variety.

    HalpInitializeConsole ()

    HalpConfigureTimer ()
END

FN HalStartProcessors (
    IN startfunc : HalStartProcessorF,
)

    // Call the Loader to do platform-specific stuff to start the processors.
    // We have to call the firmware with paging disabled. We can't do that from
    // here, but on XR/station the Loader lives in an identity mapping of low
    // memory, so he can do that just fine.

    KeLoaderBlock.U.Xr.StartProcessors ( CAST startfunc TO BlStartProcessorF )
END