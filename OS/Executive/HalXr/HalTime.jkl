//
// Implements time management for the XR/station HAL.
//

#INCLUDE "Halp.hjk"

FN HalQueryTime (
    IN time : ^RtlUquad,
)

    // Query the time in milliseconds. This is called from the timer interrupt
    // on processor 0.

    timer := CAST KeLoaderBlock.U.Xr.CitronBase + 0x80 TO ^HalpTimer

    // Get seconds part.

    timer^.CmdPort = 2

    WHILE timer^.CmdPort DO
        BARRIER
    END

    sec := timer^.DataPort

@Retry

    // Get milliseconds part.

    timer^.CmdPort = 3

    WHILE timer^.CmdPort DO
        BARRIER
    END

    ms := timer^.DataPort

    // Get seconds part again. If it changed there was a roll-over and the
    // milliseconds are invalid.

    timer^.CmdPort = 2

    WHILE timer^.CmdPort DO
        BARRIER
    END

    sec2 := timer^.DataPort

    IF sec != sec2 THEN
        sec = sec2

        GOTO Retry
    END

    // Perform a 32x16->48 multiply of the seconds part by 1000.

    part1 := (sec & 0xFFFF) * 1000
    part2 := (sec >> 16) * 1000

    // Upper 16 bits of part2 become low 16 bits of high part of 64 bit result.

    time^.High = part2 >> 16

    // Low 16 bits of part2 become high 16 bits of low part.

    time^.Low = part2 << 16

    // Add part1 and milliseconds.

    part1 += ms

    RtlAddUlongToUquad (
        time, // quad
        part1, // val
    )
END