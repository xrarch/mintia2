//
// Implements executive-level process objects.
//

#INCLUDE "Psp.hjk"

STRUCT PspProcessContext
    Name : ^UBYTE,

    Partition : ^MiPartition,

    QuotaUid : ULONG,

    Flags : ULONG,
END

#SECTION "PAGEtext"
FN PsBlockRundownProcess (
    IN process : ^PsProcess,
    IN needsthread : UWORD,
) : UWORD

    // Prevent the rundown (clean-up) of the process until the next
    // PsUnblockRundownProcess. This works by locking the process lock shared,
    // so recursive nesting of this state is inadvisable (if not prohibited).
    //
    // If needsthread is set, atomically check for the existence of a living
    // thread who is going to tear down the process if its terminated. This is
    // intended to provide a guarantee that terminating a process, even one that
    // is only partially constructed, will reliably tear down certain resources
    // like handles and memory mappings. Returns TRUE on success, FALSE
    // otherwise.

    KeAcquireLockShared ( &process^.Pcb.Lock )

    IF NOT process^.Pcb.SignalThread THEN
        // No living thread.

        KeReleaseLock ( &process^.Pcb.Lock )

        RETURN FALSE
    END

    RETURN TRUE
END

#SECTION "PAGEtext"
FN (ObTypeDeleteF) PspDeleteProcessObject (
    IN object : ^VOID,
) : UWORD

    process := CAST object TO ^PsProcess

    // Delete a process object.

    KeCrash ( "NYI PspDeleteProcessObject\n" )

    RETURN TRUE
END

#SECTION "PAGEtext"
FN (ObTypeInitializeF) PspInitializeProcessObject (
    IN object : ^VOID,
    IN context : ^VOID,
) : OsStatus

    process := CAST object TO ^PsProcess
    ctx := CAST context TO ^PspProcessContext

    status : OsStatus

    // Initialize the process object.

    currentprocess := PsCurrentProcess ()

    flags := ctx^.Flags

    IF flags & (OS_PROCESS_DETACH_JOB | OS_PROCESS_NEW_SESSION) THEN
        // If either of these flags were specified, we can only do this if we
        // are an admin.

        IF currentprocess^.Paged^.Cred.Gid != OS_SYSTEM_GID THEN
            RETURN OS_STATUS_ACCESS_DENIED
        END
    END

    // Allocate the paged part of the process object.

    paged := CAST MmAllocatePool (
        MM_PAGED_POOL, // poolindex
        SIZEOF PsPagedProcess, // bytes
        'PgPr', // tag
        TRUE, // wait
    ) TO ^PsPagedProcess

    IF NOT paged THEN
        RETURN OS_STATUS_NO_MEMORY
    END

    // Set the paged part.

    process^.Paged = paged

    quotablock := PsQuotaBlock ( currentprocess )

    IF flags & (OS_PROCESS_NEW_SESSION | OS_PROCESS_DETACH_QUOTA) ==
        (OS_PROCESS_NEW_SESSION | OS_PROCESS_DETACH_QUOTA) THEN

        // Assign a new quota block.

        quotablock = MmLookupQuotaBlock (
            ctx^.QuotaUid, // uid
            quotablock, // copyquotablock
        )

        IF NOT quotablock THEN
            status = OS_STATUS_NO_MEMORY

            GOTO Error1
        END

    ELSE
        // Inherit the current process's quota block.

        MmReferenceQuotaBlock ( quotablock )
    END

    // Initialize the process for usage by Ke.

#IF ( STRCMP ARCHITECTURE "xr17032" )
    // Allocate an AsidTable.

    process^.Pcb.AsidTable = MmAllocatePool (
        MM_NONPAGED_POOL, // poolindex
        SIZEOF KiAsidInfoEntry * KeLoaderBlock.ProcessorCount, // bytes
        'Asid', // tag
        TRUE, // wait
    )

    IF NOT process^.Pcb.AsidTable THEN
        status = OS_STATUS_NO_MEMORY

        GOTO Error2
    END
#END

    KeInitializeProcess (
        &process^.Pcb, // process
        ctx^.Name, // name
    )

    // Initialize the process for usage by Ob.
    // This also sets the quotablock for the process.

    ObInitializeProcess (
        currentprocess, // parentprocess
        process, // process
        quotablock, // quotablock
    )

    // Initialize the process for usage by Ns.

    NsInitializeProcess (
        process, // process
        currentprocess, // parentprocess
    )

    // Initialize the process for usage by Mm.

    status = MmInitializeProcess (
        process, // process
        ctx^.Partition, // partition
    )

    IF OsError ( status ) THEN
        GOTO Error3
    END

    // Initialize the process for usage by Ps.

    // Intern the name.

    paged^.Name = ExFindName ( ctx^.Name )

    IF NOT paged^.Name THEN
        status = OS_STATUS_NO_MEMORY

        GOTO Error4
    END

    // Initialize the termination event.

    KeInitializeEvent (
        &process^.TerminationEvent, // event
        "Termination", // name
        TRUE, // notification
        FALSE, // signalstate
    )

    // Stash the parent PID into the child. This is just a hint, nothing
    // maintains this or relies on it to be completely accurate.

    paged^.ParentPid = currentprocess^.Paged^.Pid

    // Set not cleaned up yet.

    paged^.CleanedUp = FALSE

    // Create the activation event.

    paged^.ActivationEvent = ExAllocateEventCounter ( TRUE )

    IF NOT paged^.ActivationEvent THEN
        status = OS_STATUS_NO_MEMORY

        GOTO Error5
    END

    paged^.ActivationStatus = 0

    paged^.Job = NULLPTR
    paged^.ConsoleGroup = NULLPTR

    IF flags & OS_PROCESS_DETACH_JOB == 0 THEN
        // Inherit the parent process's job object.
        // This is also the point where we'll notice that a job has been terminated
        // and that this process creation should not be allowed to proceed.

        status = PspInheritJob (
            process, // child
            currentprocess, // parent
        )

        IF OsError ( status ) THEN
            GOTO Error6
        END
    END

    IF flags & OS_PROCESS_DETACH_CONSOLE == 0 THEN
        // Inherit the parent process's console group.

        DuInheritConsoleGroup (
            process, // child
            currentprocess, // parent
        )
    END

    // Put on the global process list.

    KeAcquireLockExclusive ( &PspProcessListLock )

    RtlInsertAtTailList (
        &PspProcessListHead, // head
        &paged^.GlobalEntry, // entry
    )

    KeReleaseLock ( &PspProcessListLock )

    // Give the process a PID. Do this last so that users can't look up an
    // incomplete process.

    status = PspCreateId (
        process, // object
        OUT paged^.Pid, // id
    )

    IF OsError ( status ) THEN
        GOTO Error7
    END

    RETURN OS_STATUS_SUCCESS

@Error7

    KeAcquireLockExclusive ( &PspProcessListLock )

    RtlRemoveEntryList ( &paged^.GlobalEntry )

    KeReleaseLock ( &PspProcessListLock )

    IF paged^.ConsoleGroup THEN
        DuRemoveConsoleGroup ( process )
    END

    IF paged^.Job THEN
        PspExitJobProcess (
            paged^.Job, // job
            process, // process
        )
    END

@Error6

    ExUnreferenceEventCounter ( paged^.ActivationEvent )

@Error5

    ExUnreferenceName ( paged^.Name )

@Error4

    MmUninitializeProcess ( process )

@Error3

#IF ( STRCMP ARCHITECTURE "xr17032" )
    MmFreePool (
        process^.Pcb.AsidTable, // ptr
        'Asid', // tag
    )
#END

@Error2

    MmUnreferenceQuotaBlock ( quotablock )

@Error1

    MmFreePool (
        paged, // ptr
        'PgPr', // tag
    )

    RETURN status
END

PUBLIC PsProcessType : ObType = {
    [Name] = "Process",

    [Delete] = &PspDeleteProcessObject,

    [Initialize] = &PspInitializeProcessObject,

    [WaitOffset] = OFFSETOF PsProcess.TerminationEvent,
    [TypeIdentifier] = OS_PROCESS_TYPE,
    [Tag] = 'Proc',

    [IsPaged] = FALSE,
}

#SECTION "PAGEtext"
FN PsCreateProcessObject (
    IN params : ^NsOpenParameters,
    IN partition : ^MiPartition,
    IN name : ^UBYTE,
    IN quotauid : UWORD,
    IN flags : UWORD,
    OUT process : ^PsProcess,
) : OsStatus

    // Create a process object.

    ctx : PspProcessContext

    ctx.Name = name
    ctx.QuotaUid = quotauid
    ctx.Flags = flags
    ctx.Partition = partition

    obparams : ObParameters

    obparams.Type = &PsProcessType
    obparams.BodySize = SIZEOF PsProcess
    obparams.NpQuotaBias = 0
    obparams.PgQuotaBias = MmGetOverheadOfBytes ( SIZEOF PsPagedProcess )

    obparams.Context = &ctx

    RETURN NsCreateObject (
        params, // params
        &obparams, // obparams
        OUT process, // object
    )
END