//
// Implements executive-level process objects.
//

#INCLUDE "Psp.hjk"

STRUCT PspProcessContext
    Name : ^RtlString,
    Partition : ^MiPartition,
    QuotaUid : ULONG,
    Flags : ULONG,
END

#SECTION "PAGEtext"
FN PsBlockRundownProcess (
    IN process : ^PsProcess,
) : UWORD

    // Prevent the rundown (clean-up) of the process until the next
    // PsUnblockRundownProcess. This works by locking the process lock shared,
    // so recursive nesting of this state is inadvisable (if not prohibited).
    //
    // If needsthread is set, atomically check for the existence of a living
    // thread who is going to tear down the process if its terminated. This is
    // intended to provide a guarantee that terminating a process, even one that
    // is only partially constructed, will reliably tear down certain resources
    // like handles and memory mappings. Returns TRUE on success, FALSE
    // otherwise.

    KeAcquireLockShared ( &process^.Pcb.Lock )

    IF NOT process^.Pcb.SignalThread THEN
        // No living thread.

        KeReleaseLock ( &process^.Pcb.Lock )

        RETURN FALSE
    END

    RETURN TRUE
END

#SECTION "PAGEtext"
FN PspSignalActivation (
    IN process : ^PsProcess,
    IN status : OsStatus,
)

    // Signal the activation of the process.

    paged := process^.Paged

    KeAcquireLockExclusive ( &paged^.ActivationLock )

    event := paged^.ActivationEvent

    IF NOT event THEN
        // Already activated.

        KeReleaseLock ( &paged^.ActivationLock )

        LEAVE
    END

    paged^.ActivationStatus = status

    paged^.ActivationEvent = NULLPTR

    KeReleaseLock ( &paged^.ActivationLock )

    // Wake anyone awaiting activation of this process.

    KeSignalEvent (
        &event^.Used.Event, // event
        0, // priorityboost
    )

    // Decrement the reference count on the event counter.

    ExUnreferenceEventCounter ( event )
END

#SECTION "PAGEtext"
FN PspAwaitActivation (
    IN process : ^PsProcess,
    IN timeout : ^RtlUquad,
    IN alertable : UWORD,
    OUT activationstatus : OsStatus,
) : OsStatus

    // Wait for the activation of the process.

    paged := process^.Paged

    KeAcquireLockShared ( &paged^.ActivationLock )

    event := paged^.ActivationEvent

    IF NOT event THEN
        // Already activated.

        KeReleaseLock ( &paged^.ActivationLock )

        activationstatus = paged^.ActivationStatus

        RETURN OS_STATUS_SUCCESS
    END

    ExReferenceEventCounter ( event )

    KeReleaseLock ( &paged^.ActivationLock )

    // Wait on the event counter.

    status := KeWaitForSingleObject (
        KE_USER_MODE, // waitmode
        KE_ALERTABLE, // alertable
        timeout, // timeout
        &event^.Used.Event.Header, // object
    )

    ExUnreferenceEventCounter ( event )

    activationstatus = paged^.ActivationStatus

    IF status == 0 THEN
        status = OS_STATUS_SUCCESS
    END

    RETURN status
END

#SECTION "PAGEtext"
FN PspExitProcess (
    IN process : ^PsProcess,
    IN status : OsStatus,
)

    // The process has exited and exit-time teardown must be performed. This can
    // occur in two situations:
    //
    //  1. The process's final thread has terminated, and called this routine.
    //  2. The process never had any threads, and the object is being deleted.
    //
    // We distinguish between exit-time and deletion-time teardown for the
    // process object so that it's more difficult for a malicious or buggy
    // program to hog system resources by keeping a long-lived handle to a
    // process that has terminated. The second thing we do is to forbid certain
    // operations (like memory mapping) from being performed until the first
    // thread for a process has been created. That way there's always someone
    // obvious to terminate, who will make their way through this codepath here,
    // and relinquish all of the resources associated with the process.

    paged := process^.Paged

    IF NOT paged^.TerminationStatus THEN
        paged^.TerminationStatus = status
    END

#IF BLD_CHK
    IF paged^.CleanedUp THEN
        KeCrash ( "PspExitProcess: already exited\n" )
    END
#END

    paged^.CleanedUp = TRUE

    IF paged^.Job THEN
        // Indicate termination to job.

        PspExitJobProcess ( process )
    END

    // Uninitialize the process with respect to Ob.

    ObUninitializeProcess ( process )

    // Uninitialize the process's virtual memory structures.

    MmUninitializeProcess ( process )

    // Remove from process group.

    IF paged^.ProcessGroup THEN
        PspRemoveProcessGroup ( process )
    END

    // If activation hasn't been signaled, do so now in order to get rid of the
    // activation event counter.

    IF paged^.ActivationEvent THEN
        PspSignalActivation (
            process, // process
            status, // status
        )
    END

    // Signal the termination event.

    KeSignalEvent (
        &process^.TerminationEvent, // event
        0, // priorityboost
    )
END

#SECTION "PAGEtext"
FN (ObTypeDeleteF) PspDeleteProcessObject (
    IN object : ^VOID,
) : UWORD

    // Delete a process object.

    process := CAST object TO ^PsProcess

    paged := process^.Paged

    IF NOT paged^.CleanedUp THEN
        // Clean up the process. It had no "final thread" to do this earlier.

        PspExitProcess (
            process, // process
            0, // status
        )
    END

    // Remove from the global process list.

    KeAcquireLockExclusive ( &PspProcessListLock )

    RtlRemoveEntryList ( &paged^.GlobalEntry )

    PsActiveProcessCount -= 1

    KeReleaseLock ( &PspProcessListLock )

    // Delete the PID.

    group := paged^.ProcessGroup

    IF group AND group^.LeaderPid == paged^.Pid THEN
        // We were the process group leader, so we need to exchange the PID
        // table entry with a pointer to the process group, to reserve it
        // until the last process group member has died. A process group ID not
        // being reused as a PID until all members are gone is a requirement of
        // POSIX.

        group^.LeaderDied = TRUE

        PspExchangeId (
            paged^.Pid, // id
            group, // object
        )

    ELSE
        PspDeleteId ( paged^.Pid )
    END

    IF group THEN
        PspRemoveProcessGroup ( process )
    END

    // Uninitialize the root and current directory of the process.

    NsUninitializeProcess ( process )

    // Perform deletion of the page directory, etc.

    MmDeleteProcess ( process )

    // Unreference the name.

    ExUnreferenceName ( paged^.Name )

    // Unreference the quota block.

    MmUnreferenceQuotaBlock ( paged^.HandleTable.QuotaBlock )

    RETURN TRUE
END

#SECTION "PAGEtext"
FN (ObTypeInitializeF) PspInitializeProcessObject (
    IN object : ^VOID,
    IN context : ^VOID,
) : OsStatus

    process := CAST object TO ^PsProcess
    ctx := CAST context TO ^PspProcessContext

    status : OsStatus

    // Initialize the process object.

    currentprocess := PsCurrentProcess ()

    flags := ctx^.Flags

    IF flags & OS_PROCESS_DETACH_JOB AND
        NOT PsCheckPrivilege ( currentprocess, OS_PRIVILEGE_DETACH_JOB ) THEN

        RETURN OS_STATUS_PRIVILEGE_NOT_HELD
    END

    IF flags & OS_PROCESS_NEW_SESSION AND
        NOT PsCheckPrivilege ( currentprocess, OS_PRIVILEGE_NEW_SESSION ) THEN

        RETURN OS_STATUS_PRIVILEGE_NOT_HELD
    END

    // Set the paged part.

    paged := CAST ObFindPagedPart ( process ) TO ^PsPagedProcess

    process^.Paged = paged
    paged^.Process = process

    quotablock := PsQuotaBlock ( currentprocess )

    IF flags & (OS_PROCESS_NEW_SESSION | OS_PROCESS_DETACH_QUOTA) ==
        (OS_PROCESS_NEW_SESSION | OS_PROCESS_DETACH_QUOTA) THEN

        // Assign a new quota block.

        quotablock = MmLookupQuotaBlock (
            ctx^.QuotaUid, // uid
            quotablock, // copyquotablock
        )

        IF NOT quotablock THEN
            RETURN OS_STATUS_NO_MEMORY
        END

    ELSE
        // Inherit the current process's quota block.

        MmReferenceQuotaBlock ( quotablock )
    END

    // Initialize the process for usage by Ke.

#IF ( STRCMP ARCHITECTURE "xr17032" )
    // Enough space for the AsidTable was allocated at the end of the nonpaged
    // part of the process object.

    process^.Pcb.AsidTable =
        CAST (process + SIZEOF PsProcess) TO ^KiAsidInfoEntry
#END

    KeInitializeProcess (
        &process^.Pcb, // process
        ctx^.Name^.Data, // name
    )

    // Initialize the process for usage by Ob.
    // This also sets the quotablock for the process.

    ObInitializeProcess (
        currentprocess, // parentprocess
        process, // process
        quotablock, // quotablock
    )

    // Initialize the process for usage by Ns.

    NsInitializeProcess (
        process, // process
        currentprocess, // parentprocess
    )

    // Initialize the process for usage by Mm.

    status = MmInitializeProcess (
        currentprocess, // parentprocess
        process, // process
        ctx^.Partition, // partition
    )

    IF OsError ( status ) THEN
        GOTO Error3
    END

    // Initialize the process for usage by Ps.

    // Initialize the privilege lock.

    KeInitializeLock ( &process^.Paged^.PrivilegeLock )

    // Inherit the granted privileges from the parent process.

    RtlCopyBytes (
        &process^.Paged^.GrantedPrivileges[0], // dest
        &currentprocess^.Paged^.GrantedPrivileges[0], // src
        SIZEOFVALUE process^.Paged^.GrantedPrivileges, // sz
    )

    // Zero out the enabled privileges.

    RtlFillMemoryWithUlong (
        &process^.Paged^.EnabledPrivileges[0], // ptr
        SIZEOFVALUE process^.Paged^.EnabledPrivileges, // sz
        0, // ulong
    )

    // Initialize the group lock.

    KeInitializeLock ( &paged^.GroupLock )

    // Intern the name.

    paged^.Name = ExFindName ( ctx^.Name )

    IF NOT paged^.Name THEN
        status = OS_STATUS_NO_MEMORY

        GOTO Error4
    END

    // Initialize the termination event.

    KeInitializeEvent (
        &process^.TerminationEvent, // event
        "Termination", // name
        TRUE, // notification
        FALSE, // signalstate
    )

    // Stash the parent PID into the child. This is just a hint, nothing
    // maintains this or relies on it to be completely accurate.

    paged^.ParentPid = currentprocess^.Paged^.Pid

    // Set not cleaned up yet.

    paged^.CleanedUp = FALSE

    // Create the activation event.

    paged^.ActivationEvent = ExAllocateEventCounter ( TRUE )

    IF NOT paged^.ActivationEvent THEN
        status = OS_STATUS_NO_MEMORY

        GOTO Error5
    END

    KeInitializeLock ( &paged^.ActivationLock )

    paged^.ActivationStatus = 0
    paged^.TerminationStatus = 0

    paged^.Job = NULLPTR

    IF flags & OS_PROCESS_DETACH_JOB == 0 THEN
        // Inherit the parent process's job object.
        // This is also the point where we'll notice that a job has been terminated
        // and that this process creation should not be allowed to proceed.

        status = PspInheritJob (
            process, // child
            currentprocess, // parent
        )

        IF OsError ( status ) THEN
            GOTO Error6
        END
    END

    // Inherit the parent process's group and session.

    PspInheritProcessGroup (
        process, // child
        currentprocess, // parent
    )

    // Put on the global process list.

    KeAcquireLockExclusive ( &PspProcessListLock )

    RtlInsertAtTailList (
        &PspProcessListHead, // head
        &paged^.GlobalEntry, // entry
    )

    PsActiveProcessCount += 1

    KeReleaseLock ( &PspProcessListLock )

    // Give the process a PID. Do this last so that users can't look up an
    // incomplete process.

    status = PspCreateId (
        process, // object
        OUT paged^.Pid, // id
    )

    IF OsError ( status ) THEN
        GOTO Error7
    END

    RETURN OS_STATUS_SUCCESS

@Error7

    KeAcquireLockExclusive ( &PspProcessListLock )

    RtlRemoveEntryList ( &paged^.GlobalEntry )

    PsActiveProcessCount -= 1

    KeReleaseLock ( &PspProcessListLock )

    IF paged^.ProcessGroup THEN
        PspRemoveProcessGroup ( process )
    END

    IF paged^.Job THEN
        PspExitJobProcess ( process )
    END

@Error6

    ExUnreferenceEventCounter ( paged^.ActivationEvent )

@Error5

    ExUnreferenceName ( paged^.Name )

@Error4

    MmUninitializeProcess ( process )

    MmDeleteProcess ( process )

@Error3

    NsUninitializeProcess ( process )

    ObUninitializeProcess ( process )

    MmUnreferenceQuotaBlock ( quotablock )

    RETURN status
END

#SECTION "PAGEtext"
FN PsEnablePrivilegeProcessObject (
    IN process : ^PsProcess,
    IN privilege : UWORD,
) : OsStatus

    // Attempt to enable the privilege for the provided process.

    paged := process^.Paged

    status := OS_STATUS_SUCCESS

    // Acquire the privilege lock.

    KeAcquireLockExclusive ( &paged^.PrivilegeLock )

    IF paged^.GrantedPrivileges[privilege / 8] &
        (1 << (privilege & 7)) == 0 THEN

        // The privilege isn't granted.

        status = OS_STATUS_PRIVILEGE_NOT_GRANTED

        GOTO Exit
    END

    // Set the enabled bit.

    paged^.EnabledPrivileges[privilege / 8] |= (1 << (privilege & 7))

@Exit

    KeReleaseLock ( &paged^.PrivilegeLock )

    RETURN status
END

#SECTION "PAGEtext"
FN OsEnablePrivilegeProcess (
    IN processhandle : UWORD,
    IN privilege : UWORD,
) : OsStatus

    // Enable a privilege in the specified process, system service.

    process : ^PsProcess
    access : UWORD

    status := ObReferenceByHandle (
        processhandle, // handle
        &PsProcessType, // type
        OUT process, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_WRITE != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    status = PsEnablePrivilegeProcessObject (
        process, // process
        privilege, // privilege
    )

@Exit

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
FN PsDisablePrivilegeProcessObject (
    IN process : ^PsProcess,
    IN privilege : UWORD,
) : OsStatus

    // Disable the privilege for the provided process.

    paged := process^.Paged

    status := OS_STATUS_SUCCESS

    // Acquire the privilege lock.

    KeAcquireLockExclusive ( &paged^.PrivilegeLock )

    IF paged^.EnabledPrivileges[privilege / 8] &
        (1 << (privilege & 7)) == 0 THEN

        // The privilege isn't enabled.
        // Strictly speaking we don't really need to check this but it
        // maximizes usefulness if we tell the caller whether we really disabled
        // it or not.

        status = OS_STATUS_PRIVILEGE_NOT_HELD

        GOTO Exit
    END

    // Clear the enabled bit.

    paged^.EnabledPrivileges[privilege / 8] &= ~(1 << (privilege & 7))

@Exit

    KeReleaseLock ( &paged^.PrivilegeLock )

    RETURN status
END


#SECTION "PAGEtext"
FN OsDisablePrivilegeProcess (
    IN processhandle : UWORD,
    IN privilege : UWORD,
) : OsStatus

    // Disable a privilege in the specified process, system service.

    process : ^PsProcess
    access : UWORD

    status := ObReferenceByHandle (
        processhandle, // handle
        &PsProcessType, // type
        OUT process, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_WRITE != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    status = PsDisablePrivilegeProcessObject (
        process, // process
        privilege, // privilege
    )

@Exit

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
FN PsGrantPrivilegeProcessObject (
    IN process : ^PsProcess,
    IN privilege : UWORD,
) : OsStatus

    // Grant a privilege to the specified process.

    currentprocess := PsCurrentProcess ()

    // We can only grant this privilege if we either already have it or are an
    // admin.

    IF NOT PsCheckPrivilege ( currentprocess, privilege ) AND
        NOT PsCheckPrivilege ( currentprocess, OS_PRIVILEGE_ADMIN ) THEN

        RETURN OS_STATUS_PRIVILEGE_NOT_HELD
    END

    // Set the granted bit under the privilege lock.

    paged := process^.Paged

    KeAcquireLockExclusive ( &paged^.PrivilegeLock )

    paged^.GrantedPrivileges[privilege / 8] |= (1 << (privilege & 7))

    KeReleaseLock ( &paged^.PrivilegeLock )

    RETURN OS_STATUS_SUCCESS
END


#SECTION "PAGEtext"
FN OsGrantPrivilegeProcess (
    IN processhandle : UWORD,
    IN privilege : UWORD,
) : OsStatus

    // Grant a privilege to the specified process, system service.

    process : ^PsProcess
    access : UWORD

    status := ObReferenceByHandle (
        processhandle, // handle
        &PsProcessType, // type
        OUT process, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_WRITE != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    status = PsGrantPrivilegeProcessObject (
        process, // process
        privilege, // privilege
    )

@Exit

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
FN PsRevokePrivilegeProcessObject (
    IN process : ^PsProcess,
    IN privilege : UWORD,
) : OsStatus

    // Revoke a privilege from the specified process.

    // Clear the granted and enable bits under the privilege lock.

    paged := process^.Paged

    KeAcquireLockExclusive ( &paged^.PrivilegeLock )

    paged^.GrantedPrivileges[privilege / 8] &= ~(1 << (privilege & 7))
    paged^.EnabledPrivileges[privilege / 8] &= ~(1 << (privilege & 7))

    KeReleaseLock ( &paged^.PrivilegeLock )

    RETURN OS_STATUS_SUCCESS
END

#SECTION "PAGEtext"
FN OsRevokePrivilegeProcess (
    IN processhandle : UWORD,
    IN privilege : UWORD,
) : OsStatus

    // Revoke a privilege from the specified process, system service.

    process : ^PsProcess
    access : UWORD

    status := ObReferenceByHandle (
        processhandle, // handle
        &PsProcessType, // type
        OUT process, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_WRITE != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    status = PsRevokePrivilegeProcessObject (
        process, // process
        privilege, // privilege
    )

@Exit

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
FN OsSignalProcess (
    IN handle : UWORD,
    IN signal : UWORD,
) : OsStatus

    // Signal a process, system service.

    process : ^PsProcess
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsProcessType, // type
        OUT process, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_EXEC != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    KeSignalProcess (
        &process^.Pcb, // process
        signal, // signal
    )

@Exit

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
FN OsSignalActivationProcess (
    IN status : OsStatus,
)

    // Signal activation for the current process, system service.

    PspSignalActivation (
        PsCurrentProcess (), // process
        status, // status
    )
END

#SECTION "PAGEtext"
FN OsAwaitActivationProcess (
    IN handle : UWORD,
    IN timeout : ^RtlUquad,
    IN alertable : UWORD,
    OUT activationstatus : OsStatus,
) : OsStatus

    // Await activation for the given process, system service.

    IF KeInvalidAlertability ( alertable ) THEN
        RETURN OS_STATUS_INVALID_ARGUMENT
    END

    sysinterval : RtlUquad

    status := MmSafeCopyIn (
        &sysinterval, // dest
        timeout, // src
        SIZEOF RtlUquad, // size
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    process : ^PsProcess
    access : UWORD

    status = ObReferenceByHandle (
        handle, // handle
        &PsProcessType, // type
        OUT process, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    status = PspAwaitActivation (
        process, // process
        &sysinterval, // timeout
        alertable, // alertable
        OUT activationstatus, // activationstatus
    )

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
PUBLIC PsProcessType : ObType = {
    [Name] = "Process",

    [Delete] = &PspDeleteProcessObject,

    [Initialize] = &PspInitializeProcessObject,

    [WaitOffset] = OFFSETOF PsProcess.TerminationEvent,
    [TypeIdentifier] = OS_PROCESS_TYPE,
    [Tag] = 'Proc',

    [IsPaged] = FALSE,
}

#SECTION "PAGEtext"
FN PsCreateProcessObject (
    IN params : ^NsOpenParameters,
    IN partition : ^MiPartition,
    IN name : ^RtlString,
    IN quotauid : UWORD,
    IN flags : UWORD,
    OUT process : ^PsProcess,
) : OsStatus

    // Create a process object.

    ctx : PspProcessContext

    ctx.Name = name
    ctx.QuotaUid = quotauid
    ctx.Flags = flags
    ctx.Partition = partition

    obparams : ObParameters

    obparams.Type = &PsProcessType
    obparams.BodySize = SIZEOF PsProcess
    obparams.PagedBodySize = SIZEOF PsPagedProcess
    obparams.NpQuotaBias = 0
    obparams.PgQuotaBias = 0

    obparams.Context = &ctx

#IF ( STRCMP ARCHITECTURE "xr17032" )
    // Put enough space at the end of the nonpaged part of the process for the
    // ASID table.

    obparams.BodySize += SIZEOF KiAsidInfoEntry * KeLoaderBlock.ProcessorCount
#END

    RETURN NsCreateObject (
        params, // params
        &obparams, // obparams
        OUT process, // object
    )
END

EXTERN MmPartitionType : ObType

#SECTION "PAGEtext"
FN PsCreateProcess (
    IN params : ^NsOpenParameters,
    IN partitionhandle : UWORD,
    IN name : ^RtlString,
    IN quotauid : UWORD,
    IN flags : UWORD,
    OUT handle : UWORD,
) : OsStatus

    // Create a process object - handle interface.

    partition : ^MiPartition = NULLPTR
    access : UWORD
    status : OsStatus

    IF partitionhandle != OS_NULL_HANDLE THEN
        status = ObReferenceByHandle (
            partitionhandle, // handle
            &MmPartitionType, // type
            OUT partition, // object
            OUT access, // access
        )

        IF OsError ( status ) THEN
            RETURN status
        END

        IF access | OS_ACCESS_WRITE != access THEN
            // Not a subset of the required access.

            status = OS_STATUS_ACCESS_DENIED

            GOTO Exit
        END
    END

    process : ^PsProcess

    status = PsCreateProcessObject (
        params, // params
        partition, // partition
        name, // name
        quotauid, // quotauid
        flags, // flags
        OUT process, // process
    )

    IF OsError ( status ) THEN
        GOTO Exit
    END

    status = ObInsertObject (
        PsCurrentProcess (), // process
        process, // object
        params^.Captured.Access, // access
        OUT handle, // handle
    )

    IF OsError ( status ) THEN
        ObUnreferenceObject ( process )
    END

@Exit

    IF partition THEN
        ObUnreferenceObject ( partition )
    END

    RETURN status
END

#SECTION "PAGEtext"
FN OsCreateProcess (
    IN params : ^OsOpenParameters,
    IN partitionhandle : UWORD,
    IN name : ^RtlString,
    IN quotauid : UWORD,
    IN flags : UWORD,
    OUT handle : UWORD,
) : OsStatus

    // Create a thread object, system service.

    sysname : RtlString

    status := MmCaptureString (
        name, // string
        &sysname, // output
        OS_NAME_MAX, // maxlen
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    sysparams : NsOpenParameters

    status = NsCaptureOpenParameters (
        params, // userparams
        &sysparams, // sysparams
    )

    IF OsError ( status ) THEN
        GOTO Exit
    END

    status = PsCreateProcess (
        &sysparams, // params
        partitionhandle, // partitionhandle
        &sysname, // name
        quotauid, // quotauid
        flags, // flags
        OUT handle, // handle
    )

    NsFreeOpenParameters ( &sysparams )

@Exit

    MmFreeCapturedString ( &sysname )

    RETURN status
END

#SECTION "PAGEtext"
FN OsOpenProcessByPid (
    IN pid : UWORD,
    IN access : UWORD,
    OUT handle : UWORD,
) : OsStatus

    // Open a process object by PID, system service.

    process : ^PsProcess

    // Get a referenced pointer to the process object.

    status := PspReferenceById (
        pid, // pid
        &PsProcessType, // type
        OUT process, // object
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    // Check for appropriate access rights to the process.

    IF NOT ObCheckAccessForCurrent (
        process, // object
        access, // access
    ) THEN

        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    // Insert the process object into the handle table.

    status = ObInsertObject (
        PsCurrentProcess (), // process
        process, // process
        access, // access
        OUT handle, // handle
    )

    IF OsError ( status ) THEN
        GOTO Exit
    END

    RETURN status

@Exit

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
FN PsReadStatusProcessObject (
    IN process : ^PsProcess,
) : OsStatus

    // Read the termination status of a process.

    IF NOT process^.Pcb.Terminated THEN
        RETURN OS_STATUS_PROCESS_IS_ALIVE
    END

    RETURN process^.Paged^.TerminationStatus
END

#SECTION "PAGEtext"
FN OsReadStatusProcess (
    IN handle : UWORD,
) : OsStatus

    // Read the termination status of a process, system service.

    process : ^PsProcess
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsProcessType, // type
        OUT process, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_READ != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    status = PsReadStatusProcessObject ( process )

@Exit

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
FN PsQueryProcessObject (
    IN process : ^PsProcess,
    IN query : ^OsProcessQuery,
)

    // Query information about a process object.

    RtlFillMemoryWithUlong (
        query, // dest
        SIZEOF OsProcessQuery, // sz
        0, // ulong
    )

    paged := process^.Paged

    query^.Pid = paged^.Pid
    query^.ParentPid = paged^.ParentPid

    query^.OwningUid = paged^.Cred.Uid
    query^.OwningGid = paged^.Cred.Gid

    IF PsBlockRundownProcess ( process ) THEN
        // If we successfully blocked process rundown then it definitely has at
        // least one thread, and therefore there must be a signal thread.

        query^.Status = process^.Pcb.SignalThread^.Status
        query^.Priority = process^.Pcb.SignalThread^.Priority

        PsUnblockRundownProcess ( process )
    END

    query^.ThreadCount = process^.Pcb.ThreadCount
    query^.TerminationStatus = paged^.TerminationStatus

    KeAcquireLockExclusive ( &paged^.GroupLock )

    IF paged^.SessionGroup THEN
        query^.Sid = paged^.SessionGroup^.LeaderPid
        query^.Pgid = paged^.ProcessGroup^.LeaderPid
    ELSE
        query^.Sid = 0
        query^.Pgid = 0
    END

    KeReleaseLock ( &paged^.GroupLock )

    MmQueryProcess (
        process, // process
        query, // query
    )

    RtlCopyString (
        &query^.Name[0], // dest
        ExNameToString ( paged^.Name )^.Data, // src
        OS_NAME_MAX + 1, // bufsize
    )

    // TODO copy name of controlling tty
END

#SECTION "PAGEtext"
FN PsQueryProcess (
    IN handle : UWORD,
    IN query : ^OsProcessQuery,
) : OsStatus

    // Query information about a process handle.

    process : ^PsProcess
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsProcessType, // type
        OUT process, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_READ != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    PsQueryProcessObject (
        process, // process
        query, // query
    )

@Exit

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
FN OsQueryProcess (
    IN handle : UWORD,
    IN query : ^OsProcessQuery,
) : OsStatus

    // Query information about a process, system service.

    sysquery : OsProcessQuery

    status := PsQueryProcess (
        handle, // handle
        &sysquery, // query
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    // Copy the information to userspace.

    RETURN MmSafeCopyOut (
        query, // dest
        &sysquery, // src
        SIZEOF OsProcessQuery, // size
    )
END

#SECTION "PAGEtext"
FN PsQueryProcessByPid (
    IN pid : UWORD,
    IN query : ^OsProcessQuery,
) : OsStatus

    // Open a process object by PID, system service.

    process : ^PsProcess

    // Get a referenced pointer to the process object.

    status := PspReferenceById (
        pid, // pid
        &PsProcessType, // type
        OUT process, // object
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    // Check for appropriate access rights to the process.

    IF NOT ObCheckAccessForCurrent (
        process, // object
        OS_ACCESS_READ, // access
    ) THEN

        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    // Query the process object.

    PsQueryProcessObject (
        process, // process
        query, // query
    )

@Exit

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
FN OsQueryProcessByPid (
    IN pid : UWORD,
    IN query : ^OsProcessQuery,
) : OsStatus

    // Query information about a process by PID, system service.

    sysquery : OsProcessQuery

    status := PsQueryProcessByPid (
        pid, // pid
        &sysquery, // query
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    // Copy the information to userspace.

    RETURN MmSafeCopyOut (
        query, // dest
        &sysquery, // src
        SIZEOF OsProcessQuery, // size
    )
END

#SECTION "PAGEtext"
FN OsSetBasePriorityProcess (
    IN processhandle : UWORD,
    IN priority : UWORD,
) : OsStatus

    // Set the base priority of a process, system service.

    IF priority >= OS_PRIORITY_MAX THEN
        RETURN OS_STATUS_INVALID_ARGUMENT
    END

    process : ^PsProcess
    access : UWORD

    status := ObReferenceByHandle (
        processhandle, // handle
        &PsProcessType, // type
        OUT process, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_WRITE != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    IF priority >= process^.Pcb.BasePriority THEN
        // Raising base priority requires special privileges.

        currentprocess := PsCurrentProcess ()

        IF priority >= OS_PRIORITY_LOW_REALTIME THEN
            IF NOT PsCheckPrivilege ( currentprocess,
                OS_PRIVILEGE_RAISE_PRIORITY_REALTIME ) THEN

                status = OS_STATUS_PRIVILEGE_NOT_HELD

                GOTO Exit
            END

        ELSEIF NOT PsCheckPrivilege ( currentprocess,
            OS_PRIVILEGE_RAISE_PRIORITY ) THEN

            status = OS_STATUS_PRIVILEGE_NOT_HELD

            GOTO Exit
        END
    END

    KeSetBasePriorityProcess (
        &process^.Pcb, // process
        priority, // priority
    )

@Exit

    ObUnreferenceObject ( process )

    RETURN status
END