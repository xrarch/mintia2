//
// Implementation of POSIX-compatible process groups.
//

#INCLUDE "Psp.hjk"

#SECTION "PAGEtext"
FN PspInheritProcessGroup (
    IN child : ^PsProcess,
    IN parent : ^PsProcess,
)

    // Inherit the process group of the parent into the child.

    parentpaged := parent^.Paged
    childpaged := child^.Paged

    KeAcquireLockExclusive ( &parentpaged^.GroupLock )

    IF parentpaged^.SessionGroup THEN
        // If there's a session group then there's a process group too.
        // Reference both and inherit in the child.

        group := parentpaged^.ProcessGroup
        sidgroup := parentpaged^.SessionGroup

        ObReferenceObject ( sidgroup )
        ObReferenceObject ( group )

        childpaged^.SessionGroup = sidgroup
        childpaged^.ProcessGroup = group

        // Add the child to the process group's list.

        KeAcquireLockExclusive ( &group^.Lock )

        RtlInsertAtTailList (
            &group^.ProcessListHead, // head
            &childpaged^.GroupEntry, // entry
        )

        KeReleaseLock ( &group^.Lock )

    ELSE
        childpaged^.SessionGroup = NULLPTR
        childpaged^.ProcessGroup = NULLPTR
    END

    KeReleaseLock ( &parentpaged^.GroupLock )
END

#SECTION "PAGEtext"
FN PspRemoveProcessGroup (
    IN process : ^PsProcess,
)

    // Remove the process from its process group.
    // Synchronization is taken care of by the caller.

    paged := process^.Paged
    group := paged^.ProcessGroup

    // Remove the child from the group list.

    KeAcquireLockExclusive ( &group^.Lock )

    RtlRemoveEntryList ( &paged^.GroupEntry )

    KeReleaseLock ( &group^.Lock )

    // Unreference the group.

    ObUnreferenceObject ( group )

    // Unreference the session.

    ObUnreferenceObject ( paged^.SessionGroup )
END

#SECTION "PAGEtext"
FN (ObTypeDeleteF) PspDeleteGroupObject (
    IN object : ^VOID,
) : UWORD

    // Delete a group object.

    group := CAST object TO ^PsProcessGroup

    IF group^.LeaderDied THEN
        // If the leader died then we're currently occupying a position in the
        // PID table, which we need to get rid of now.

        PspDeleteId ( group^.LeaderPid )
    END

    RETURN TRUE
END

#SECTION "PAGEtext"
FN (ObTypeInitializeF) PspInitializeGroupObject (
    IN object : ^VOID,
    IN context : ^VOID,
) : OsStatus

    // Initialize a group object.

    group := CAST object TO ^PsProcessGroup

    KeInitializeLock ( &group^.Lock )

    group^.LeaderDied = FALSE

    RtlInitializeList ( &group^.ProcessListHead )

    RETURN OS_STATUS_SUCCESS
END

#SECTION "PAGEtext"
PUBLIC PsGroupType : ObType = {
    [Name] = "Group",

    [Delete] = &PspDeleteGroupObject,
    [Initialize] = &PspInitializeGroupObject,

    [WaitOffset] = OB_TYPE_NO_WAIT_OFFSET,
    [TypeIdentifier] = OS_GROUP_TYPE,
    [Tag] = 'Grup',

    [IsPaged] = TRUE,
}

#SECTION "PAGEtext"
FN PspCreateGroup (
    IN leader : ^PsProcess,
    OUT group : ^PsProcessGroup,
) : OsStatus

    // Create a new group object.

    obparams : ObParameters

    mycred := &PsCurrentProcess()^.Paged^.Cred

    ObMoveCredentials (
        &obparams.Permissions.Cred, // dest
        mycred, // src
    )

    obparams.Permissions.Access = OS_ACCESS_OWNER_ALL
    obparams.Flags = 0
    obparams.Type = &PsGroupType
    obparams.BodySize = SIZEOF PsProcessGroup
    obparams.NpQuotaBias = 0
    obparams.PgQuotaBias = 0

    RETURN ObAllocateObject (
        &obparams, // obparams
        OUT group, // object
    )
END

#SECTION "PAGEtext"
FN PsSetGroupProcess (
    IN process : ^PsProcess,
    IN group : ^PsProcessGroup,
) : OsStatus

    // Set the group of the process to the specified group.

    status := OS_STATUS_SUCCESS

    paged := process^.Paged

    newgroup := NOT group

    IF newgroup THEN
        // No group was supplied, so make one.

        status = PspCreateGroup (
            process, // leader
            OUT group, // group
        )

        IF OsError ( status ) THEN
            RETURN status
        END

    ELSE
        // Add a reference to the group to reflect the new member.

        ObReferenceObject ( group )
    END

    // Acquire the process's group lock.

    KeAcquireLockExclusive ( &paged^.GroupLock )

    sessiongroup := paged^.SessionGroup

    IF NOT sessiongroup THEN
        // Doesn't even have a session group yet!
        // This must be an early system process doing something strange.
        // It should call OsSetSessionProcess.

        status = OS_STATUS_INVALID_ARGUMENT

        GOTO Error
    END

    oldgroup := paged^.ProcessGroup

    IF oldgroup^.LeaderPid == paged^.Pid THEN
        // This is a group leader. Group leaders can't switch groups.

        status = OS_STATUS_IS_GROUP_LEADER

        GOTO Error
    END

    IF oldgroup == group THEN
        // No change.

        status = OS_STATUS_SUCCESS

        GOTO Error
    END

    IF newgroup THEN
        // Initialize the new group.

        group^.LeaderSid = sessiongroup^.LeaderPid
        group^.LeaderPid = paged^.Pid

    ELSEIF sessiongroup^.LeaderPid != group^.LeaderSid THEN
        // Can't switch to a group outside our session.

        status = OS_STATUS_NOT_IN_SESSION

        GOTO Error
    END

    // Remove the process from the old group's list.

    KeAcquireLockExclusive ( &oldgroup^.Lock )

    RtlRemoveEntryList ( &paged^.GroupEntry )

    KeReleaseLock ( &oldgroup^.Lock )

    // Add the process to the new group's list.

    paged^.ProcessGroup = group

    KeAcquireLockExclusive ( &group^.Lock )

    RtlInsertAtTailList (
        &group^.ProcessListHead, // head
        &paged^.GroupEntry, // entry
    )

    KeReleaseLock ( &group^.Lock )

    // Unreference the old group; leave the new group referenced by this new
    // member.

    group = oldgroup

@Error

    // Release the process's group lock, unreference the group, and return.

    KeReleaseLock ( &paged^.GroupLock )

    ObUnreferenceObject ( group )

    RETURN status
END

#SECTION "PAGEtext"
FN OsSetGroupProcess (
    IN processhandle : UWORD,
    IN grouphandle : UWORD,
) : OsStatus

    // Set the group of a process, system service.

    process : ^PsProcess
    access : UWORD

    status := ObReferenceByHandle (
        processhandle, // handle
        &PsProcessType, // type
        OUT process, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_WRITE != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit1
    END

    group : ^PsProcessGroup = NULLPTR

    IF grouphandle != OS_NULL_HANDLE THEN
        status = ObReferenceByHandle (
            grouphandle, // handle
            &PsGroupType, // type
            OUT group, // object
            OUT access, // access
        )

        IF OsError ( status ) THEN
            GOTO Exit1
        END

        IF access | OS_ACCESS_WRITE != access THEN
            status = OS_STATUS_ACCESS_DENIED

            GOTO Exit2
        END
    END

    status = PsSetGroupProcess (
        process, // process
        group, // group
    )

@Exit2

    IF group THEN
        ObUnreferenceObject ( group )
    END

@Exit1

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
FN OsOpenGroupByPid (
    IN pid : UWORD,
    IN access : UWORD,
    OUT handle : UWORD,
) : OsStatus

    // Open a group object by PID, system service.

    group : ^PsProcessGroup

    // Get a referenced pointer to the group object.

    status := PspReferenceById (
        pid, // pid
        &PsGroupType, // type
        OUT group, // object
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    // Check for appropriate access rights to the group.

    IF NOT ObCheckAccessForCurrent (
        group, // object
        access, // access
    ) THEN

        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    // Insert the group object into the handle table.

    status = ObInsertObject (
        PsCurrentProcess (), // process
        group, // object
        access, // access
        OUT handle, // handle
    )

    IF OsError ( status ) THEN
        GOTO Exit
    END

    RETURN status

@Exit

    ObUnreferenceObject ( group )

    RETURN status
END

#SECTION "PAGEtext"
FN OsOpenSelfGroup (
    IN access : UWORD,
    OUT handle : UWORD,
) : OsStatus

    // Open my own group object, system service.

    // Get a referenced pointer to my group object.

    currentpaged := PsCurrentProcess()^.Paged

    KeAcquireLockExclusive ( &currentpaged^.GroupLock )

    group := currentpaged^.ProcessGroup

    IF NOT group THEN
        KeReleaseLock ( &currentpaged^.GroupLock )

        RETURN OS_STATUS_INVALID_ARGUMENT
    END

    ObReferenceObject ( group )

    KeReleaseLock ( &currentpaged^.GroupLock )

    status : OsStatus

    // Check for appropriate access rights to the group.

    IF NOT ObCheckAccessForCurrent (
        group, // object
        access, // access
    ) THEN

        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    // Insert the group object into the handle table.

    status = ObInsertObject (
        PsCurrentProcess (), // process
        group, // object
        access, // access
        OUT handle, // handle
    )

    IF OsError ( status ) THEN
        GOTO Exit
    END

    RETURN status

@Exit

    ObUnreferenceObject ( group )

    RETURN status
END

#SECTION "PAGEtext"
FN PsSignalGroup (
    IN group : ^PsProcessGroup,
    IN signal : UWORD,
)

    // Signal all the processes in the group.

    listhead := &group^.ProcessListHead

    KeAcquireLockExclusive ( &group^.Lock )

    listentry := listhead^.Next

    WHILE listentry != listhead DO
        process := (CONTAINEROF listentry TO PsPagedProcess.GroupEntry)^.Process

        KeSignalProcess (
            &process^.Pcb, // process
            signal, // signal
        )

        listentry = listentry^.Next
    END

    KeReleaseLock ( &group^.Lock )
END

#SECTION "PAGEtext"
FN OsSignalGroup (
    IN handle : UWORD,
    IN signal : UWORD,
) : OsStatus

    // Signal a group, system service.

    IF KeInvalidSignal ( signal ) THEN
        RETURN OS_STATUS_INVALID_ARGUMENT
    END

    group : ^PsProcessGroup
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsGroupType, // type
        OUT group, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_EXEC != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    PsSignalGroup (
        group, // group
        signal, // signal
    )

@Exit

    ObUnreferenceObject ( group )

    RETURN status
END