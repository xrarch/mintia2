//
// Implements executive-level thread objects.
//

#INCLUDE "Psp.hjk"

STRUCT PspThreadContext
    Name : ^RtlString,
    StartFunc : KeStartThreadF,
    Context1 : UWORD,
    Context2 : UWORD,
    Process : ^PsProcess,
    Flags : ULONG,
END

#DEFINE PSP_TURNSTILE_EXTENSION 16

PspTurnstileLock : KeLock = KE_INITIAL_LOCK

PUBLIC PspTurnstileZone : MmZoneHeader

#SECTION "PAGEtext"
FN PspAllocateTurnstile () : ^KiTurnstile

    // Allocate a turnstile from the free list.

    KeAcquireLockExclusive ( &PspTurnstileLock )

    turnstile := CAST MmAllocateZone (
        &PspTurnstileZone, // zone
    ) TO ^KiTurnstile

    IF NOT turnstile THEN
        // Allocate a new hunk of turnstiles.

        turnstile = MmAllocatePool (
            MM_NONPAGED_POOL, // poolindex
            SIZEOF KiTurnstile * PSP_TURNSTILE_EXTENSION +
            MM_ZONE_OVERHEAD, // bytes
            'Turn', // tag
            TRUE, // wait
        )

        IF turnstile THEN
            // Extend the zone starting from the second turnstile in the hunk.
            // We take the first for ourselves.

            MmExtendZone (
                &PspTurnstileZone, // zone
                turnstile + SIZEOF KiTurnstile, // hunk
                SIZEOF KiTurnstile * (PSP_TURNSTILE_EXTENSION - 1) +
                MM_ZONE_OVERHEAD, // bytes
            )
        END
    END

    KeReleaseLock ( &PspTurnstileLock )

    RETURN turnstile
END

#SECTION "PAGEtext"
FN PspFreeTurnstile (
    IN turnstile : ^KiTurnstile,
)

    // Free a turnstile to the free list.

    KeAcquireLockExclusive ( &PspTurnstileLock )

    MmFreeZone (
        &PspTurnstileZone, // zone
        turnstile, // ptr
    )

    KeReleaseLock ( &PspTurnstileLock )
END

#SECTION "PAGEtext"
FN (ObTypeDeleteF) PspDeleteThreadObject (
    IN object : ^VOID,
) : UWORD

    // Delete a thread object.

    thread := CAST object TO ^PsThread

    paged := thread^.Paged

    process := CONTAINEROF thread^.Tcb.Process TO PsProcess.Pcb

    // Delete the TID.

    PspDeleteId ( paged^.Tid )

    // Unreference the interned name.

    ExUnreferenceName ( paged^.Name )

    // Free the turnstile.

    PspFreeTurnstile ( thread^.Tcb.Turnstile )

    // Free the kernel stack.

    MmFreeKernelStack (
        process, // process
        thread^.Tcb.KernelStackTop - (KE_STACK_PAGES << RTL_PAGE_SHIFT), // kstack
    )

    IF paged^.IpcBlock THEN
        // Free the IPC block.

        MmFreePool (
            paged^.IpcBlock, // ptr
            'Ipcb', // tag
        )
    END

    // Unreference the process.

    ObUnreferenceObject ( process )

    RETURN TRUE
END

#SECTION "PAGEtext"
FN PsExitThread ()

    // This thread has reached the end of its life. Usermode will never regain
    // control.

    thread := PsCurrentThread ()

    process := PsCurrentProcess ()

    // Make our priority the lowest real-time priority to expedite the releasing
    // of this thread's resources.

    KeSetPriorityThread (
        &thread^.Tcb, // thread
        OS_PRIORITY_LOW_REALTIME, // priority
    )

    // Ignore events so nothing weird happens while we're cleaning up.

    KeIgnoreEvents ()

    // If there are any asynchronous I/O operations in-flight, try to cancel
    // them and wait for completion.

    IF NOT RtlEmptyList ( &thread^.IopListHead ) THEN
        // It's safe to check this list in this manner because the current
        // thread is the only one who will ever enqueue items to this list,
        // and we ain't doing that right now. Although, I/O completion APCs
        // can asynchronously remove items from it in our context, but that
        // doesn't matter when we're just checking for emptiness.

        IoRundownThread ( thread )
    END

    // Uninitialize the thread with respect to Mm.

    MmUninitializeThread (
        process, // process
        thread, // thread
    )

    // Uninitialize the thread with respect to Ke.

    IF KeUninitializeThread ( &thread^.Tcb ) THEN
        // Ke marked the thread's process terminated. Threads can no longer be
        // created within the process and early exit processing should be
        // performed.

        PspExitProcess (
            process, // process
            thread^.Paged^.TerminationStatus, // status
        )
    END

    // Now exit the thread. This does not return.
    // The thread object will be enqueued to the reaper thread.

    KeExitThread ( &thread^.Tcb )
END

#SECTION "PAGEtext"
FN (KeStartThreadF) PspUserThreadEntry (
    IN context1 : UWORD,
    IN context2 : UWORD,
)

    // Entry point for all usermode threads.

    thread := PsCurrentThread ()

    // Build the TEB.

    // ...

    // Copy the TEB to userspace.

    // ...

    // Enter usermode for the first time, in some architecture-dependent way.

    // ...

    KeCrash ( "NYI PspUserThreadEntry\n" )
END

#SECTION "PAGEtext"
FN (ObTypeInitializeF) PspInitializeThreadObject (
    IN object : ^VOID,
    IN context : ^VOID,
) : OsStatus

    thread := CAST object TO ^PsThread
    ctx := CAST context TO ^PspThreadContext

    status : OsStatus

    // Initialize the thread object.

    flags := ctx^.Flags
    process := ctx^.Process

    paged := CAST ObFindPagedPart ( thread ) TO ^PsPagedThread

    thread^.Paged = paged

    // Intern the name.

    paged^.Name = ExFindName ( ctx^.Name )

    IF NOT paged^.Name THEN
        RETURN OS_STATUS_NO_MEMORY
    END

    // Allocate the kernel stack.

    kstack : ^VOID

    status = MmCreateKernelStack (
        process, // process
        OUT kstack, // kstack
    )

    IF OsError ( status ) THEN
        GOTO Error2
    END

    // Create a TID.

    status = PspCreateId (
        thread, // object
        OUT paged^.Tid, // id
    )

    IF OsError ( status ) THEN
        GOTO Error3
    END

    paged^.TerminationStatus = OS_STATUS_SUCCESS

    // Allocate a turnstile.

    turnstile := PspAllocateTurnstile ()

    IF NOT turnstile THEN
        status = OS_STATUS_NO_MEMORY

        GOTO Error4
    END

    // Use the start function to determine whether this is a usermode or kernel
    // thread.

    IF ctx^.StartFunc == &PspUserThreadEntry THEN
        paged^.Mode = KE_USER_MODE
    ELSE
        paged^.Mode = KE_KERNEL_MODE
    END

    // Initialize the thread for usage by Mm.

    status = MmInitializeThread (
        process, // process
        thread, // thread
        paged^.Mode, // mode
    )

    IF OsError ( status ) THEN
        GOTO Error5
    END

    // Initialize the thread for usage by Ob.

    paged^.DeletingObject = FALSE
    paged^.DeferredObjectHead = NULLPTR

    // Initialize the thread for usage by Io.

    RtlInitializeList ( &thread^.IopListHead )

    RtlInitializeList ( &thread^.DeferredRequestListHead )

    thread^.InIoRequest = FALSE

    // Initialize for usage by Ipc.

    paged^.IpcBlock = NULLPTR

    // Initialize the thread for usage by Ke.
    // The thread should be initialized enough that its visibility to the
    // process via the thread list is safe, since it's added to that by Ke here.

    // Attach to the process to ensure it is resident.

    KeAttachProcess (
        &process^.Pcb, // process
        FALSE, // try
    )

    IF NOT KeInitializeThread (
        &process^.Pcb, // process
        &thread^.Tcb, // thread
        ctx^.Name^.Data, // name
        kstack, // kstack
        KE_STACK_PAGES << RTL_PAGE_SHIFT, // kstacksize
        turnstile, // turnstile
        ctx^.StartFunc, // startfunc
        ctx^.Context1, // context1
        ctx^.Context2, // context2
    ) THEN
        // The process was terminated already.

        KeDetachProcess ( &process^.Pcb )

        status = OS_STATUS_WAS_TERMINATED

        GOTO Error6
    END

    KeDetachProcess ( &process^.Pcb )

    // Inherit the signal mask from the current thread.

    thread^.Tcb.SignalAcceptMask = PsCurrentThread()^.Tcb.SignalAcceptMask

    // Bias the reference count of the thread object.
    // This reflects an active execution context existing, which means its
    // kernel stack and other resources should remain in existence. This bias is
    // removed by the reaper thread after the thread terminates.

    ObReferenceObject ( thread )

    // Bias the reference count of the process object.
    // This reflects an active thread existing within it. This bias is removed
    // when the thread object is deleted.

    ObReferenceObject ( process )

    IF flags & OS_THREAD_SUSPENDED THEN
        // Suspend the thread. It will block on the suspension event upon return
        // to usermode.

        KeSuspendThread ( &thread^.Tcb )
    END

    // Set the thread a-runnin'.
    //
    // KeReadyThread ( &thread^.Tcb )
    //
    // Nevermind, the caller will do that. Basically there might still be outer
    // failure modes and we can't know at this stage whether the thread should
    // be set running yet.

    RETURN OS_STATUS_SUCCESS

@Error6

    MmUninitializeThread (
        process, // process
        thread, // thread
    )

@Error5

    PspFreeTurnstile ( turnstile )

@Error4

    PspDeleteId ( paged^.Tid )

@Error3

    MmFreeKernelStack (
        process, // process
        kstack, // kstack
    )

@Error2

    ExUnreferenceName ( paged^.Name )

    RETURN status
END

FN (KeCustodyListActivateF) PspActivateReaper (
    IN list : ^KeCustodyList,
)

    // Enqueue the reaper work item. Called by Ke when the reaper list
    // transitions to non-empty. Cannot be paged because spinlocks are held.

    ExEnqueueWorkItem (
        &PspReaperWorkItem, // item
        EX_HIGH_WORK_PRIORITY, // priority
        0, // context1
        0, // context2
    )
END

#SECTION "PAGEtext"
FN (KeProcessCustodyListF) PspReapThread (
    IN list : ^KeCustodyList,
    IN object : ^VOID,
)

    // Called to reap a thread as a KeProcessCustodyList callback.

    // Ke uses the SwapNext link of the thread as the custody list link.
    // This is fine since it is useless at this point in the thread's lifetime.

    thread := CONTAINEROF object TO KeThread.SwapNext
    psthrd := CONTAINEROF thread TO PsThread.Tcb

#IF BLD_MP
    // Execute the reaper barrier to make sure the thread has fully switched off
    // its stack.

    KeReaperBarrier ( thread )
#END

    // Remove the reference from the thread object that signified that there
    // was an active execution context that depended on it. There no longer is
    // (and its last act was to place itself on our reaper list), so unreference
    // it.

    ObUnreferenceObject ( psthrd )
END

#SECTION "PAGEtext"
FN (ExWorkItemF) PspReaperWorker (
    IN context1 : UWORD,
    IN context2 : UWORD,
)

    // Implements the thread reaper.

    KeProcessCustodyList (
        &KeReaperCustodyList, // list
        &PspReapThread, // callback
    )
END

#SECTION "PAGEtext"
FN PsTerminateThreadObject (
    IN thread : ^PsThread,
    IN status : OsStatus,
)

    // Terminate the thread object.

    thread^.Paged^.TerminationStatus = status

    KeSignalThread (
        &thread^.Tcb, // thread
        OS_SIGNAL_KILL, // signal
    )
END

#SECTION "PAGEtext"
FN OsTerminateThread (
    IN handle : UWORD,
    IN status : OsStatus,
) : OsStatus

    // Terminate a thread, system service.

    thread : ^PsThread
    access : UWORD

    retstatus := ObReferenceByHandle (
        handle, // handle
        &PsThreadType, // type
        OUT thread, // object
        OUT access, // access
    )

    IF OsError ( retstatus ) THEN
        RETURN retstatus
    END

    IF access | OS_ACCESS_EXEC != access THEN
        retstatus = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    PsTerminateThreadObject (
        thread, // thread
        status, // status
    )

@Exit

    ObUnreferenceObject ( thread )

    RETURN retstatus
END

#SECTION "PAGEtext"
FN OsSuspendThread (
    IN handle : UWORD,
) : OsStatus

    // Suspend a thread, system service.

    thread : ^PsThread
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsThreadType, // type
        OUT thread, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_EXEC != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    KeSuspendThread ( &thread^.Tcb )

@Exit

    ObUnreferenceObject ( thread )

    RETURN status
END

#SECTION "PAGEtext"
FN OsUnsuspendThread (
    IN handle : UWORD,
    IN force : UWORD,
) : OsStatus

    // Unsuspend a thread, system service.

    thread : ^PsThread
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsThreadType, // type
        OUT thread, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_EXEC != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    KeUnsuspendThread (
        &thread^.Tcb, // thread
        force, // force
    )

@Exit

    ObUnreferenceObject ( thread )

    RETURN status
END

#SECTION "PAGEtext"
FN PsReadStatusThreadObject (
    IN thread : ^PsThread,
) : OsStatus

    // Read the termination status of a thread.

    IF NOT thread^.Tcb.Terminated THEN
        RETURN OS_STATUS_THREAD_IS_ALIVE
    END

    RETURN thread^.Paged^.TerminationStatus
END

#SECTION "PAGEtext"
FN OsReadStatusThread (
    IN handle : UWORD,
) : OsStatus

    // Read the termination status of a thread, system service.

    thread : ^PsThread
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsThreadType, // type
        OUT thread, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_READ != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    status = PsReadStatusThreadObject ( thread )

@Exit

    ObUnreferenceObject ( thread )

    RETURN status
END

#SECTION "PAGEtext"
FN PsQueryThreadObject (
    IN thread : ^PsThread,
    IN query : ^OsThreadQuery,
)

    // Query information about a thread object.

    RtlFillMemoryWithUlong (
        query, // dest
        SIZEOF OsThreadQuery, // sz
        0, // ulong
    )

    RtlMoveUquad (
        &query^.UserTimeMs, // destquad
        &thread^.Tcb.UserTimeMs, // srcquad
    )

    RtlMoveUquad (
        &query^.SystemTimeMs, // destquad
        &thread^.Tcb.SystemTimeMs, // srcquad
    )

    RtlMoveUquad (
        &query^.DpcTimeMs, // destquad
        &thread^.Tcb.DpcTimeMs, // srcquad
    )

    query^.Status = thread^.Tcb.Status
    query^.Terminated = thread^.Tcb.Terminated
    query^.ExitStatus = thread^.Paged^.TerminationStatus
    query^.Priority = thread^.Tcb.Priority
    query^.BasePriority = thread^.Tcb.BasePriority
END

#SECTION "PAGEtext"
FN PsQueryThread (
    IN handle : UWORD,
    IN query : ^OsThreadQuery,
) : OsStatus

    // Query information about a thread handle.

    thread : ^PsThread
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsThreadType, // type
        OUT thread, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_READ != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    PsQueryThreadObject (
        thread, // thread
        query, // query
    )

@Exit

    ObUnreferenceObject ( thread )

    RETURN status
END

#SECTION "PAGEtext"
FN OsQueryThread (
    IN handle : UWORD,
    IN query : ^OsThreadQuery,
) : OsStatus

    // Query information about a thread, system service.

    sysquery : OsThreadQuery

    status := PsQueryThread (
        handle, // handle
        &sysquery, // query
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    // Copy the information to userspace.

    RETURN MmSafeCopyOut (
        query, // dest
        &sysquery, // src
        SIZEOF OsThreadQuery, // size
    )
END

#SECTION "PAGEtext"
FN OsSignalThread (
    IN handle : UWORD,
    IN signal : UWORD,
) : OsStatus

    // Signal a thread, system service.

    IF KeInvalidSignal ( signal ) THEN
        RETURN OS_STATUS_INVALID_ARGUMENT
    END

    thread : ^PsThread
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsThreadType, // type
        OUT thread, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_EXEC != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    KeSignalThread (
        &thread^.Tcb, // thread
        signal, // signal
    )

@Exit

    ObUnreferenceObject ( thread )

    RETURN status
END

#SECTION "PAGEtext"
FN OsMaskSignalThread (
    IN handle : UWORD,
    IN signal : UWORD,
    IN enable : UWORD,
) : OsStatus

    // Mask a signal in a thread, system service.

    IF KeInvalidSignal ( signal ) THEN
        RETURN OS_STATUS_INVALID_ARGUMENT
    END

    thread : ^PsThread
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsThreadType, // type
        OUT thread, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_WRITE != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    KeMaskSignalThread (
        &thread^.Tcb, // thread
        signal, // signal
        enable, // enable
    )

@Exit

    ObUnreferenceObject ( thread )

    RETURN status
END

#SECTION "PAGEtext"
FN OsDeliverOnWaitSignalThread (
    IN handle : UWORD,
    IN signal : UWORD,
    IN enable : UWORD,
) : OsStatus

    // Deliver-on-wait a signal in a thread, system service.

    IF KeInvalidSignal ( signal ) THEN
        RETURN OS_STATUS_INVALID_ARGUMENT
    END

    thread : ^PsThread
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsThreadType, // type
        OUT thread, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_WRITE != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    KeDeliverOnWaitSignalThread (
        &thread^.Tcb, // thread
        signal, // signal
        enable, // enable
    )

@Exit

    ObUnreferenceObject ( thread )

    RETURN status
END

#SECTION "PAGEtext"
FN OsGetFaultStatusThread (
    IN handle : UWORD,
) : OsStatus

    // Get the status for the last fault that the thread incurred.

    thread : ^PsThread
    access : UWORD

    status := ObReferenceByHandle (
        handle, // handle
        &PsThreadType, // type
        OUT thread, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_READ != access THEN
        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    status = thread^.Tcb.LastFaultStatus

@Exit

    ObUnreferenceObject ( thread )

    RETURN status
END

#SECTION "PAGEtext"
FN OsSleepThread (
    IN interval : ^RtlUquad,
    IN alertable : UWORD,
) : OsStatus

    // Put the current thread to sleep for the specified number of milliseconds.

    IF KeInvalidAlertability ( alertable ) THEN
        RETURN OS_STATUS_INVALID_ARGUMENT
    END

    sysinterval : RtlUquad

    status := MmSafeCopyIn (
        &sysinterval, // dest
        interval, // src
        SIZEOF RtlUquad, // size
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    RETURN KeSleep (
        &sysinterval, // interval
        KE_USER_MODE, // waitmode
        alertable, // alertable
    )
END

#SECTION "PAGEtext"
PUBLIC PsThreadType : ObType = {
    [Name] = "Thread",

    [Delete] = &PspDeleteThreadObject,

    [Initialize] = &PspInitializeThreadObject,

    [WaitOffset] = OFFSETOF PsThread.Tcb.TerminationEvent,
    [TypeIdentifier] = OS_THREAD_TYPE,
    [Tag] = 'Thrd',

    [IsPaged] = FALSE,
}

#SECTION "PAGEtext"
FN PsCreateThreadObject (
    IN params : ^NsOpenParameters,
    IN name : ^RtlString,
    IN startfunc : KeStartThreadF,
    IN context1 : UWORD,
    IN context2 : UWORD,
    IN process : ^PsProcess,
    IN flags : UWORD,
    OUT thread : ^PsThread,
) : OsStatus

    // Create a thread object.

    ctx : PspThreadContext

    ctx.Name = name
    ctx.StartFunc = startfunc
    ctx.Context1 = context1
    ctx.Context2 = context2
    ctx.Process = process
    ctx.Flags = flags

    obparams : ObParameters

    obparams.Type = &PsThreadType
    obparams.BodySize = SIZEOF PsThread
    obparams.PagedBodySize = SIZEOF PsPagedThread
    obparams.NpQuotaBias = 0
    obparams.PgQuotaBias = 0

    obparams.Context = &ctx

    RETURN NsCreateObject (
        params, // params
        &obparams, // obparams
        OUT thread, // object
    )
END

#SECTION "PAGEtext"
FN PsCreateExecutiveThread (
    IN name : ^RtlString,
    IN startfunc : KeStartThreadF,
    IN context1 : UWORD,
    IN context2 : UWORD,
    IN flags : UWORD,
    OUT thread : ^PsThread,
) : OsStatus

    // Helper function for creating a thread that only executes code in the
    // system executive.

    params : NsOpenParameters

    params.Path.Data = NULLPTR

    params.Captured.Flags = 0
    params.Captured.ObFlags = 0
    params.Captured.Permissions = OS_ACCESS_OWNER_ALL

    status := PsCreateThreadObject (
        &params, // params
        name, // name
        startfunc, // startfunc
        context1, // context1
        context2, // context2
        PsSystemProcess, // process
        0, // flags
        OUT thread, // thread
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    // Set the thread running.

    KeReadyThread ( &thread^.Tcb )

    RETURN status
END

#SECTION "PAGEtext"
FN PsCreateThread (
    IN params : ^NsOpenParameters,
    IN name : ^RtlString,
    IN startfunc : KeStartThreadF,
    IN context1 : UWORD,
    IN context2 : UWORD,
    IN processhandle : UWORD,
    IN flags : UWORD,
    OUT handle : UWORD,
) : OsStatus

    // Create a thread object - handle interface.

    process : ^PsProcess
    access : UWORD

    status := ObReferenceByHandle (
        processhandle, // handle
        &PsProcessType, // type
        OUT process, // object
        OUT access, // access
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    IF access | OS_ACCESS_WRITE != access THEN
        // Not a subset of the required access.

        status = OS_STATUS_ACCESS_DENIED

        GOTO Exit
    END

    thread : ^PsThread

    status = PsCreateThreadObject (
        params, // params
        name, // name
        startfunc, // startfunc
        context1, // context1
        context2, // context2
        process, // process
        flags, // flags
        OUT thread, // thread
    )

    IF OsError ( status ) THEN
        GOTO Exit
    END

    status = ObInsertObject (
        PsCurrentProcess (), // process
        thread, // object
        params^.Captured.Access, // access
        OUT handle, // handle
    )

    IF OsError ( status ) THEN
        IF params^.ResultFlags & NS_RESULT_CREATED THEN
            // We created the thread object successfully, but we failed to
            // insert it into the handle table (quota limit reached or some
            // such). Set the thread terminated and ready it so that it kills
            // itself.

            PsTerminateThreadObject (
                thread, // thread
                status, // status
            )

            KeReadyThread ( &thread^.Tcb )
        END

        ObUnreferenceObject ( thread )

    ELSEIF params^.ResultFlags & NS_RESULT_CREATED THEN
        // Ready the thread because PsCreateThreadObject didn't do it yet.
        // We need to do this after a successful handle table insertion so that
        // the thread is only set loose when we know the caller will receive a
        // successful status. Otherwise we could get a situation where a user
        // process is very confused when a thread executed some stuff even
        // though it got an error back from the thread creation call.

        KeReadyThread ( &thread^.Tcb )
    END

@Exit

    ObUnreferenceObject ( process )

    RETURN status
END

#SECTION "PAGEtext"
FN OsCreateThread (
    IN params : ^OsOpenParameters,
    IN name : ^RtlString,
    IN startfunc : OsStartThreadF,
    IN context : UWORD,
    IN processhandle : UWORD,
    IN flags : UWORD,
    OUT handle : UWORD,
) : OsStatus

    // Create a thread object, system service.

    sysname : RtlString

    status := MmCaptureString (
        name, // string
        &sysname, // output
        OS_NAME_MAX, // maxlen
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    sysparams : NsOpenParameters

    status = NsCaptureOpenParameters (
        params, // userparams
        &sysparams, // sysparams
    )

    IF OsError ( status ) THEN
        GOTO Exit
    END

    status = PsCreateThread (
        &sysparams, // params
        &sysname, // name
        &PspUserThreadEntry, // startfunc
        CAST startfunc TO UWORD, // context1
        context, // context2
        processhandle, // processhandle
        flags, // flags
        OUT handle, // handle
    )

    NsFreeOpenParameters ( &sysparams )

@Exit

    MmFreeCapturedString ( &sysname )

    RETURN status
END