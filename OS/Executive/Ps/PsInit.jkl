//
// Initialization for the Process Manager for the MINTIA Executive.
//

#INCLUDE "Psp.hjk"

#INCLUDE "<ll>/System/OsObject.hjk"

PUBLIC PspProcessListLock : KeLock = KE_INITIAL_LOCK

PUBLIC PspProcessListHead : RtlListEntry

PUBLIC PsActiveProcessCount : UWORD = 0

PUBLIC PsSystemProcess : ^PsProcess

PUBLIC PsInitialThread : ^PsThread

PUBLIC PsUexecApcDispatcher : ^VOID
PUBLIC PsUexecSignalDispatcher : ^VOID

PspIdleProcessPaged : PsPagedProcess

PspIdTable : ExHandleTable

PspIdLock : KeLock = KE_INITIAL_LOCK
PUBLIC PspLookupLock : KeLock = KE_INITIAL_LOCK

#DEFINE PSP_ID_INDEX_SHIFT 5
#DEFINE PSP_ID_SEQUENCE_MASK 31

STRUCT PspIdEntry
    Object : ^VOID,
    Sequence : UWORD,
END

#MACRO PspLockIdExclusive () [
    KeAcquireLockExclusive ( &PspIdLock )
]

#MACRO PspLockIdShared () [
    KeAcquireLockShared ( &PspIdLock )
]

#MACRO PspUnlockId () [
    KeReleaseLock ( &PspIdLock )
]

#SECTION "PAGEtext"
FN PspCreateId (
    IN object : ^VOID,
    OUT id : UWORD,
) : OsStatus

    // Insert an object into the PID/TID table. Should be fully initialized in
    // all relevant ways or people will be able to get a pointer to a bad
    // object.

    entry : ^PspIdEntry

    PspLockIdExclusive ()

    status := ExCreateHandle (
        &PspIdTable, // handletable
        OUT id, // handle
        OUT entry, // entryptr
    )

    IF OsError ( status ) THEN
        GOTO Exit
    END

    // Bitwise OR the 5-bit sequence number into the ID.

    id = (id << PSP_ID_INDEX_SHIFT) | (entry^.Sequence & PSP_ID_SEQUENCE_MASK)

    // Increment the sequence number.

    entry^.Sequence += 1

    // Set the object.

    entry^.Object = object

@Exit

    PspUnlockId ()

    RETURN status
END

#SECTION "PAGEtext"
FN PspDeleteId (
    IN id : UWORD,
)

    // Delete an ID from the table.

    PspLockIdExclusive ()

    ExDeleteHandle (
        &PspIdTable, // handletable
        id >> PSP_ID_INDEX_SHIFT, // handle
        NULLPTR, // entry
    )

    PspUnlockId ()
END

#SECTION "PAGEtext"
FN PspReferenceById (
    IN pid : UWORD,
    IN type : ^ObType,
    OUT object : ^VOID,
) : OsStatus

    // Reference an object by its PID or TID.

    entry : ^PspIdEntry

    status := OS_STATUS_SUCCESS

    lookuplocked := type == &PsThreadType

    IF lookuplocked THEN
        // We lock the lookup lock exclusive because it is anticipated that
        // looking up threads by ID will be much less common than creation of
        // threads. The creation codepath locks this shared.

        PspLockLookupExclusive ()
    END

    PspLockIdShared ()

    entry = ExLookupHandle (
        &PspIdTable, // handletable
        pid >> PSP_ID_INDEX_SHIFT, // handle
    )

    IF NOT entry THEN
        // No such ID.

        status = OS_STATUS_INVALID_HANDLE

        GOTO Exit
    END

    object = entry^.Object

    IF pid & PSP_ID_SEQUENCE_MASK !=
        entry^.Sequence & PSP_ID_SEQUENCE_MASK THEN

        // Wrong sequence number.

        status = OS_STATUS_INVALID_HANDLE

        GOTO Exit
    END

    IF ObFindHeader ( object )^.Type != type THEN
        // Not the correct object type.

        status = OS_STATUS_INVALID_OBJECT_TYPE

        GOTO Exit
    END

    IF NOT ObConditionallyReferenceObject ( object ) THEN
        // Object is being deleted.

        status = OS_STATUS_INVALID_HANDLE
    END

@Exit

    PspUnlockId ()

    IF lookuplocked THEN
        PspUnlockLookup ()
    END

    RETURN status
END

#ENTERSECTION "INITtext"

FN PsInitializeIdleProcess ()

    // Initialize the idle process enough to bootstrap other stuff.

    idleproc := &KeIdleProcess

    idleproc^.Paged = &PspIdleProcessPaged

    idleproc^.Paged^.Cred.Uid = OS_SYSTEM_UID
    idleproc^.Paged^.Cred.Gid = OS_SYSTEM_GID
END

FN PsInitializeStage1 ()

    // Stage 1 initialization for Ps.

    // Initialize the turnstile zone.

    MmInitializeZone (
        &PspTurnstileZone, // zone
        SIZEOF KiTurnstile, // blocksize
    )

    // Initialize the PID/TID table.

    // Note that entrysizelog = 0 means the size of a handle table entry will be
    // two pointers, which fits our PspIdEntry structure, since the size of
    // an entry is calculated by (SIZEOF ^VOID * 2) << entrysizelog.

    ExInitializeHandleTable (
        &PspIdTable, // handletable
        0, // entrysizelog
        PsQuotaBlock ( PsCurrentProcess () ), // quotablock
    )

    // Initialize the global process list.

    RtlInitializeList ( &PspProcessListHead )

    // Create the system process.

    params : NsOpenParameters

    params.Path = NULLPTR

    params.Captured.Flags = 0
    params.Captured.ObFlags = 0
    params.Captured.Permissions = OS_ACCESS_OWNER_ALL

    status := PsCreateProcessObject (
        &params, // params
        NULLPTR, // partition
        "System", // name
        -1, // quotauid
        0, // flags
        OUT PsSystemProcess, // process
    )

    IF OsError ( status ) THEN
        KeCrash ( "PsInitializeStage1: failed to create system process (%x)\n",
            status )
    END

    // Create the reaper thread, which performs the final unreferencing of
    // terminated threads.

    dumpster : ^VOID

    status = PsCreateExecutiveThread (
        "Reaper", // name
        &PspReaperThread, // startfunc
        0, // context1
        0, // context2
        0, // flags
        OUT dumpster, // thread
    )

    IF OsError ( status ) THEN
        KeCrash ( "PsInitializeStage1: failed to create reaper (%x)\n",
            status )
    END

    // Create the balance manager thread, which will perform stage 2
    // initialization of the system.

    status = PsCreateExecutiveThread (
        "Balance Manager", // name
        &ExStartSystemProcess, // startfunc
        0, // context1
        0, // context2
        0, // flags
        OUT PsInitialThread, // thread
    )

    IF OsError ( status ) THEN
        KeCrash ( "PsInitializeStage1: failed to create bal mgr (%x)\n",
            status )
    END

    ObUnreferenceObject ( PsInitialThread )
END

FN PsInitializeStage2 ()

    // Stage 2 initialization for Ps.

    // Parse OSDLL and figure out where some symbols are.

    // ... NYI ...

    // Create the SystemInit.exe process.

    // ... NYI ...

    // Set it to the highest non-realtime priority.

    // ... NYI ...

    // Create its main thread.

    // ... NYI ...

    // Unreference the main thread.

    // ... NYI ...
END

#LEAVESECTION