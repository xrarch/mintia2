//
// Initialization for the Process Manager for the MINTIA Executive.
//

#INCLUDE "Psp.hjk"

#INCLUDE "<ll>/System/OsObject.hjk"

PUBLIC PspProcessListLock : KeLock = KE_INITIAL_LOCK

PUBLIC PspProcessListHead : RtlListEntry

PUBLIC PsActiveProcessCount : UWORD = 0

PUBLIC PsSystemProcess : ^PsProcess

PUBLIC PsInitialThread : ^PsThread

PUBLIC PspReaperWorkItem : ExWorkItem

PspIdleProcessPaged : PsPagedProcess

PspIdTable : ExHandleTable

PspIdLock : KeLock = KE_INITIAL_LOCK

#DEFINE PSP_ID_INDEX_SHIFT 10
#DEFINE PSP_ID_SEQUENCE_MASK [((1 << PSP_ID_INDEX_SHIFT) - 1)]

STRUCT PspIdEntry
    Object : ^VOID,
    Sequence : UWORD,
END

#MACRO PspLockIdExclusive () [
    KeAcquireLockExclusive ( &PspIdLock )
]

#MACRO PspLockIdShared () [
    KeAcquireLockShared ( &PspIdLock )
]

#MACRO PspUnlockId () [
    KeReleaseLock ( &PspIdLock )
]

#SECTION "PAGEtext"
FN PspCreateId (
    IN object : ^VOID,
    OUT id : UWORD,
) : OsStatus

    // Insert an object into the PID/TID table. Should be fully initialized in
    // all relevant ways or people will be able to get a pointer to a bad
    // object.

    entry : ^PspIdEntry

    PspLockIdExclusive ()

    status := ExCreateHandle (
        &PspIdTable, // handletable
        OUT id, // handle
        OUT entry, // entryptr
    )

    IF OsError ( status ) THEN
        GOTO Exit
    END

    IF id == 0 THEN
        KeAssert ( PsSystemProcess == NULLPTR )

        // Fix the sequence number to be 1 for the system process so that we
        // never hand out a PID of 0. Why? Just seems nasty to, especially
        // because we use it as the PGID for the system session later.

        entry^.Sequence = 1
    END

    // Bitwise OR the sequence number into the ID.

    id = (id << PSP_ID_INDEX_SHIFT) | (entry^.Sequence & PSP_ID_SEQUENCE_MASK)

    // Increment the sequence number.

    entry^.Sequence += 1

    // Set the object.

    entry^.Object = object

@Exit

    PspUnlockId ()

    RETURN status
END

#SECTION "PAGEtext"
FN PspDeleteId (
    IN id : UWORD,
)

    // Delete an ID from the table.

    PspLockIdExclusive ()

    ExDeleteHandle (
        &PspIdTable, // handletable
        id >> PSP_ID_INDEX_SHIFT, // handle
        NULLPTR, // entry
    )

    PspUnlockId ()
END

#SECTION "PAGEtext"
FN PspExchangeId (
    IN id : UWORD,
    IN object : ^VOID,
)

    // Exchange an ID with a new object pointer.

    PspLockIdExclusive ()

    entry := CAST ExLookupHandle (
        &PspIdTable, // handletable
        id >> PSP_ID_INDEX_SHIFT, // handle
    ) TO ^PspIdEntry

    KeAssert ( entry != NULLPTR )

    entry^.Object = object

    PspUnlockId ()
END

#SECTION "PAGEtext"
FN PspReferenceById (
    IN pid : UWORD,
    IN type : ^ObType,
    OUT object : ^VOID,
) : OsStatus

    // Reference an object by its PID or TID.

    status := OS_STATUS_SUCCESS

    PspLockIdShared ()

    entry := CAST ExLookupHandle (
        &PspIdTable, // handletable
        pid >> PSP_ID_INDEX_SHIFT, // handle
    ) TO ^PspIdEntry

    IF NOT entry THEN
        // No such ID.

        status = OS_STATUS_INVALID_HANDLE

        GOTO Exit
    END

    object = entry^.Object

    IF pid & PSP_ID_SEQUENCE_MASK !=
        entry^.Sequence & PSP_ID_SEQUENCE_MASK THEN

        // Wrong sequence number.

        status = OS_STATUS_INVALID_HANDLE

        GOTO Exit
    END

    IF ObFindHeader ( object )^.Type != type THEN
        // Not the correct object type.

        IF ObFindHeader ( object )^.Type == &PsProcessType AND
            type == &PsGroupType THEN

            // We're looking for a process group and this is a process.
            // If it's the group leader then we can find the process group
            // through it.

            paged := (CAST object TO ^PsProcess)^.Paged

            KeAcquireLockExclusive ( &paged^.GroupLock )

            IF paged^.ProcessGroup AND
                paged^.ProcessGroup^.LeaderPid == pid THEN

                // What we were *really* looking for was the process group.
                // Since we found the leader, we can return the group object.

                object = paged^.ProcessGroup

                ObReferenceObject ( object )

                KeReleaseLock ( &paged^.GroupLock )

                GOTO Exit
            END

            KeReleaseLock ( &paged^.GroupLock )
        END

        status = OS_STATUS_INVALID_OBJECT_TYPE

        GOTO Exit
    END

    IF NOT ObConditionallyReferenceObject ( object ) THEN
        // Object is being deleted.

        status = OS_STATUS_INVALID_HANDLE
    END

@Exit

    PspUnlockId ()

    RETURN status
END

#ENTERSECTION "INITtext"

FN PsInitializeIdleProcess ()

    // Initialize the idle process enough to bootstrap other stuff.

    idleproc := &KeIdleProcess

    idleproc^.Paged = &PspIdleProcessPaged

    idleproc^.Paged^.Cred.Uid = OS_SYSTEM_UID
    idleproc^.Paged^.Cred.Gid = OS_SYSTEM_GID
END

FN PsInitializeStage1 ()

    // Stage 1 initialization for Ps.

    // Initialize the turnstile zone.

    MmInitializeZone (
        &PspTurnstileZone, // zone
        SIZEOF KiTurnstile, // blocksize
    )

    // Initialize the PID/TID table.

    // Note that entrysizelog = 0 means the size of a handle table entry will be
    // two pointers, which fits our PspIdEntry structure, since the size of
    // an entry is calculated by (SIZEOF ^VOID * 2) << entrysizelog.

    ExInitializeHandleTable (
        &PspIdTable, // handletable
        0, // entrysizelog
        PsQuotaBlock ( PsCurrentProcess () ), // quotablock
    )

    // Initialize the global process list.

    RtlInitializeList ( &PspProcessListHead )

    // Create the system process.

    params : NsOpenParameters

    params.Path.Data = NULLPTR

    params.Captured.Flags = 0
    params.Captured.ObFlags = 0
    params.Captured.Permissions = OS_ACCESS_OWNER_ALL

    name : RtlString

    RtlInitializeString ( &name, "System" )

    status := PsCreateProcessObject (
        &params, // params
        NULLPTR, // partition
        &name, // name
        -1, // quotauid
        0, // flags
        OUT PsSystemProcess, // process
    )

    IF OsError ( status ) THEN
        KeCrash ( "%sfailed to create system process (%x)\n",
            "PsInitializeStage1: ", status )
    END

    // Set the system process's session.

    status = PsSetGroupProcess (
        PsSystemProcess, // process
        NULLPTR, // group
        TRUE, // newsession
    )

    IF OsError ( status ) THEN
        KeCrash ( "%sfailed to set system session (%x)\n",
            "PsInitializeStage1: ", status )
    END

    // Initialize the reaper custody list. Threads are placed on this list when
    // they terminate, to transfer custody to the reaper thread.

    KeInitializeCustodyList (
        &KeReaperCustodyList, // list
        &PspActivateReaper, // activateroutine
        0, // context
    )

    ExInitializeWorkItem (
        &PspReaperWorkItem, // item
        &PspReaperWorker, // routine
    )

    // Create the balance manager thread, which will perform stage 2
    // initialization of the system.

    RtlInitializeString ( &name, "Balance Manager" )

    status = PsCreateExecutiveThread (
        &name, // name
        &ExStartSystemProcess, // startfunc
        0, // context1
        0, // context2
        0, // flags
        OUT PsInitialThread, // thread
    )

    IF OsError ( status ) THEN
        KeCrash ( "%sfailed to create bal mgr (%x)\n", "PsInitializeStage1: ",
            status )
    END

    ObUnreferenceObject ( PsInitialThread )
END

FN PsInitializeStage2 ()

    // Stage 2 initialization for Ps.

    // Parse OSDLL and figure out where some symbols are.

    // ... NYI ...

    // Create the SystemInit.exe process.

    // ... NYI ...

    // Set it to the highest non-realtime priority.

    // ... NYI ...

    // Create its main thread.

    // ... NYI ...

    // Unreference the main thread.

    // ... NYI ...
END

#LEAVESECTION