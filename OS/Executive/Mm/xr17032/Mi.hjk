//
// Private memory management header file for the XR/17032 architecture.
//

// Describes the base address of the virtually linear page table.

#DEFINE MI_TABLE_BASE 0xB0000000

// Describes the number of levels in the page table.

#DEFINE MI_TABLE_LEVELS 2

// Describes base and bounds of the three dynamic areas.

#DEFINE MI_POOL_SPACE 0xC0000000
#DEFINE MI_POOL_SPACE_SIZE [(256 * 1024 * 1024)]
#DEFINE MI_POOL_SPACE_END 0xD0000000

#DEFINE MI_DYNAMIC_SPACE 0xD0000000
#DEFINE MI_DYNAMIC_SPACE_SIZE [(256 * 1024 * 1024)]
#DEFINE MI_DYNAMIC_SPACE_END 0xE0000000

#DEFINE MI_CACHE_SPACE 0xE0000000
#DEFINE MI_CACHE_SPACE_SIZE [(256 * 1024 * 1024)]
#DEFINE MI_CACHE_SPACE_END 0xF0000000

// Describes whether the page table gives a "complete" picture of the address
// space. This is not the case on architectures where there is an architectural
// mapping of physical memory (such as MIPS) or where the TLB can be used to
// permanently map pages that are not reflected in the page table.

#DEFINE MI_COMPLETE_TABLE 0

#DEFINE MI_PTE_V 1
#DEFINE MI_PTE_W 2
#DEFINE MI_PTE_K 4
#DEFINE MI_PTE_NC 8
#DEFINE MI_PTE_G 16

#DEFINE MI_INVALID_KERNEL_PTE MI_PTE_G

TYPE MiPte : ULONG

#MACRO MI_PTE_ADDRESS ( vaddr ) [
    (CAST (MI_TABLE_BASE + ((vaddr >> 12) << 2)) TO ^MiPte)
]

#MACRO MI_VIRTUAL_ADDRESS ( pteaddr ) [
    (CAST ((((pteaddr) - MI_TABLE_BASE) >> 2) << 12) TO ^VOID)
]

#MACRO MI_PFN_FROM_PTE ( pte ) [
    ((pte) >> 5)
]

#MACRO MI_BUILD_POOL_PTE ( pfn ) [
    (((pfn) << 5) | (MI_PTE_V | MI_PTE_W | MI_PTE_K | MI_PTE_G))
]

// We use a fixed TB entry to map the PRB at this address on all processors.

#MACRO MI_IS_ARCHITECTURALLY_VALID ( vaddr ) [
    ((vaddr) & 0xFFFFF000 == 0xFFFFF000)
]

#MACRO MI_IS_PTE_VALID ( pte ) [
    ((pte) & MI_PTE_V == 1)
]

// Assumes 32KB I+D cache.

#DEFINE MI_COLOR_COUNT 8

#MACRO MI_PFN_COLOR ( pfn ) [
    ((pfn) & 7)
]