//
// Implements kernel stack management for the memory manager.
//

#INCLUDE "Mi.hjk"

MiNextStackColor : ULONG = 0

#SECTION "PAGEtext"
FN MmCreateKernelStack (
    IN process : ^PsProcess,
    OUT kstack : ^VOID,
) : OsStatus

    // Create a kernel stack.

    partition := process^.Partition
    quotablock := PsQuotaBlock ( process )

    // Charge the process's virtual memory quota for the kernel stack.

    status := MmChargeVmQuota (
        partition, // partition
        quotablock, // quotablock
        KE_STACK_PAGES, // pages
    )

    IF OsError ( status ) THEN
        RETURN status
    END

    // Allocate the required system space.

    kstack = MiAllocateDynamicPages ( KE_STACK_PAGES )

    IF NOT kstack THEN
        // Couldn't acquire them.

        status = OS_STATUS_NO_MEMORY

        GOTO Error1
    END

    pfes : ^MiPfe[KE_STACK_PAGES]

    // TEMP: Naive implementation. Full implementation will initialize these
    //       pages as modified anonymous memory so that kernel stacks can be
    //       swapped. We don't yet know exactly what anonymous PFEs will
    //       look like at time of writing.

    i := 0

    WHILE i < KE_STACK_PAGES DO
        // Allocate a physical page.

        color := KeIncrementUlong (
            &MiNextStackColor, // ptr
            1, // inc
        )

        pfes[i] = MiAllocatePageWait (
            partition, // partition
            FALSE, // zeroed
            FALSE, // low
            color, // color
        )

        IF NOT pfes[i] THEN
            // Failed to allocate this page frame.
            // Deallocate the ones we did allocate and return the appropriate
            // status.

            WHILE i DO
                i -= 1

                MiFreePage (
                    partition, // partition
                    pfes[i], // pfe
                )
            END

            status = OS_STATUS_NO_MEMORY

            GOTO Error2
        END

        i += 1
    END

    // Acquire a pointer to the first PTE for this region.

    pte := MiPteAddress ( kstack )

    // Map the stack pages.

    i = 0

    WHILE i < KE_STACK_PAGES DO
        pte[i] = MiBuildPoolPte ( MiPfeToPfn ( pfes[i]) )

        i += 1
    END

    RETURN OS_STATUS_SUCCESS

@Error2

    MiReleaseDynamicPages (
        kstack, // ptr
        KE_STACK_PAGES, // pages
        FALSE, // flush
    )

@Error1

    MmUnchargeVmQuota (
        partition, // partition
        quotablock, // quotablock
        KE_STACK_PAGES, // pages
    )

    RETURN status
END

#SECTION "PAGEtext"
FN MmFreeKernelStack (
    IN process : ^PsProcess,
    IN kstack : ^VOID,
)

    // Free a kernel stack. It must be in an inswapped state.

    partition := process^.Partition

    // Acquire a pointer to the first PTE for this region.

    pte := MiPteAddress ( kstack )

    // Free the kernel stack pages.

    i := 0

    WHILE i < KE_STACK_PAGES DO
        // Load the PTE for this page.

        ptecontents := pte[i]

        KeAssert ( MiIsPteValid ( ptecontents ) )

        // Clear the PTE, makes it more likely we'll see it if a bad pointer
        // within this space is used later. Due to the TB it's not 100% though.

        pte[i] = MI_INVALID_KERNEL_PTE

        // Free the page frame.

        // TEMP: Does not yet handle kernel stacks being private anonymous
        //       memory.

        MiFreePage (
            partition, // partition
            MiPfnToPfe ( MiPfnFromPte ( ptecontents ) ), // pfe
        )

        i += 1
    END

    // Release the system space containing the stack.

    MiReleaseDynamicPages (
        kstack, // ptr
        KE_STACK_PAGES, // pages
        TRUE, // flush
    )

    // Uncharge the virtual memory quota consumed by the kernel stack.

    MmUnchargeVmQuota (
        partition, // partition
        PsQuotaBlock ( process ), // quotablock
        KE_STACK_PAGES, // pages
    )
END