//
// Implements the MINTIA page fault handler.
//

#INCLUDE "Mi.hjk"

FN MmPageFault (
    IN address : ^VOID,
    IN writing : UWORD,
    IN usermode : UWORD,
) : OsStatus

    // TEMP

    RtlPrint ( "fault on %x\n", address )

    IF writing THEN
        RETURN OS_STATUS_WRITE_FAULT
    ELSE
        RETURN OS_STATUS_READ_FAULT
    END
END

FN MmWriteFaultOnLockWord (
    IN lockptr : ^VOID,
)

    // Called by the turnstile package when a fault was taken on the lock word.
    // We need to fault in the containing page and make sure it's set modified.

    // Ignore the return status from MmPageFault because if it failed, we want
    // the turnstile package to find that out later and die in a "normal" way.
    // Simple dirty faults are infallible so we don't have to worry about that case.

    MmPageFault (
        lockptr, // address
        TRUE, // writing
        FALSE, // usermode
    )
END

FN MmShouldAccessCrash (
    IN abortblock : ^KeAbortBlock,
    IN badaddr : ^VOID,
    IN status : OsStatus,
) : UWORD

    // Returns TRUE if the access should crash the system, FALSE if it should
    // cause an abort. Called by architecture specific code upon various types
    // of address errors.

    // This was an address error, so check where the address was.
    // The abort block will contains flags telling us whether to catch this
    // exception or not. If we shouldn't, we'll crash. This is a basic
    // security/debugging measure and not strictly necessary for
    // functionality.

    IF badaddr >= MI_SYSTEM_SPACE THEN
        // Check if we should catch system space errors.

        IF abortblock^.Flags & KE_ABORT_CATCH_SYSTEM_SPACE == 0 THEN
            // Nope.

            RETURN TRUE
        END

    ELSEIF abortblock^.Flags & KE_ABORT_CATCH_USER_SPACE == 0 THEN
        // This was a userspace error and we aren't catching those.

        RETURN TRUE
    END

    RETURN FALSE
END