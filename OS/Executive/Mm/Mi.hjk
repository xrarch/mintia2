//
// Private header file for the Memory Management component of the MINTIA
// Executive.
//

#INCLUDE "<ll>/Rtl.hjk"
#INCLUDE "<inc>/Ke.hjk"
#INCLUDE "<inc>/Mm.hjk"
#INCLUDE "<inc>/Ob.hjk"
#INCLUDE "<inc>/Ps.hjk"

#IF ( STRCMP ARCHITECTURE "xr17032" )
    #INCLUDE "xr17032/Mi.hjk"

#ELSEIF ( STRCMP ARCHITECTURE "fox32" )
    #INCLUDE "fox32/Mi.hjk"

#ELSE
    #ERROR "Unknown architecture"
#END

#DEFINE MI_UNINITIALIZED_PFE_TYPE 0
#DEFINE MI_FREE_PFE_TYPE 1
#DEFINE MI_BACKED_PFE_TYPE 2
#DEFINE MI_ANON_PFE_TYPE 3

#DEFINE MI_MODIFIED_PFE_FLAG 1
#DEFINE MI_DELETED_PFE_FLAG 2
#DEFINE MI_PAGED_POOL_PFE_FLAG 4

STRUCT MiFreePfe
    Next : ^MiPfe,
END

STRUCT MiBackedPfe
    OffsetInObject : RtlUquad,
    Entry : RtlAvlNode,
END

STRUCT MiAnonPfe
    TrackingTableEntry : ^MiPte,
    Backing : MiPte,
END

UNION MiInUseUnion
    Backed : MiBackedPfe,
    Anon : MiAnonPfe,
END

STRUCT MiPfe
    U : MiInUseUnion,
    Object : ^MmObject,
    Entry : RtlListEntry,

    References : ULONG,
    Type : UBYTE,
    Flags : UBYTE,
END

STRUCT MiAvailablePageList
    Heads : RtlListEntry[MI_COLOR_COUNT],
    Count : UWORD,
END

STRUCT MiPartition
    FreeList : MiAvailablePageList,
    ZeroList : MiAvailablePageList,
    StandbyList : MiAvailablePageList,
    ModifiedListHead : RtlListEntry,

    AvailablePageCount : UWORD,
    FluidPageCount : UWORD,
    ModifiedPageCount : UWORD,

    CommitUsage : UWORD,
    CommitLimit : UWORD,
    TheoreticalCommitLimit : UWORD,

    TotalPages : UWORD,

    LowPageCount : UWORD,
    SufficientPageCount : UWORD,
    ModifiedPageMaximum : UWORD,
    ZeroingThreshold : UWORD,

    ListLock : KeLock,

    LowMemoryEvent : KeEvent,
    PageAvailableEvent : KeEvent,
    LowPageAvailableEvent : KeEvent,
    ModifiedPageEvent : KeEvent,
    ZeroPageEvent : KeEvent,

    CommitLock : KeLock,

    Node : ^MiNode,

    SizeLevel : UBYTE,
END

EXTERN MiSystemPartition : ^MiPartition

EXTERN MiBootNode : ^MiNode

EXTERN MiPfnDatabase : ^MiPfe

EXTERN MiSystemSize : UWORD

// Keep this synchronized with Loader.hjk

#IF ( == BLD_BITS 32 )
    #DEFINE MI_PFE_SIZE 40
#ELSE
    #DEFINE MI_PFE_SIZE 64
#END

#MACRO MiPfnToPfe ( pfn ) [
    (CAST ((pfn) * MI_PFE_SIZE) + MiPfnDatabase TO ^MiPfe)
]

#MACRO MiPfeToPfn ( pfe ) [
    (CAST (((pfe) - MiPfnDatabase) / MI_PFE_SIZE) TO UWORD)
]

EXTERN FN MiInitializePartitionStage1 (
    IN partition : ^MiPartition,
    IN node : ^MiNode,
)

EXTERN FN MiSetPartitionSize (
    IN partition : ^MiPartition,
)

EXTERN FN MiAllocateChunkSpace (
    IN chunkspace : ^MiChunkSpace,
) : ^VOID

EXTERN FN MiFreeChunkSpace (
    IN chunkspace : ^MiChunkSpace,
    IN ptr : ^VOID,
    IN flush : UWORD,
)

#DEFINE MI_MAXIMUM_CHUNKS_PENDING_FLUSH 128

STRUCT MiChunkSpace
    EntryShift : UWORD,
    EntryCount : UWORD,
    FreeListHead : ^MiChunkEntry,
    Lock : KeLock,

    PendingFlush : ^VOID[MI_MAXIMUM_CHUNKS_PENDING_FLUSH],
    PendingFlushCount : UBYTE,
END

EXTERN MiPoolSpace : MiChunkSpace
EXTERN MiCacheSpace : MiChunkSpace

EXTERN MiCacheSpaceChunkPages : UWORD

EXTERN FN MiInitializeSystemVa (
    IN node : ^MiNode,
)

EXTERN FN MiInitializeSpaceNodeAllocation (
    IN node : ^MiNode,
)

EXTERN FN MiInitializePools (
    IN node : ^MiNode,
)

#DEFINE MI_QUICK_PER_CPU 4

EXTERN FN MiInitializeQuickPages ()

EXTERN MiQuickPteBase : ^MiPte

#DEFINE MI_BLOCK_FOR_PAGES_THRESHOLD 4

STRUCT MiDynamicSpaceDemandNode
    MappedObject : ^MmObject,
    Offset : RtlUquad,
END

STRUCT MiDynamicSpacePoolNode
    Pool : ^MiPool,
    Tag : ULONG,
END

UNION MiDynamicSpaceNodeUnion
    Demand : MiDynamicSpaceDemandNode,
    Pool : MiDynamicSpacePoolNode,
END

// XXX The sanity of using a pool cache for this depends on the
//     MiDynamicSpaceNode being small enough to not trigger page-aligned
//     pool allocation when slabs are created for it.

STRUCT MiDynamicSpaceNode
    Entry : RtlAvlNode,
    
    StartVa : ^VOID,
    EndVa : ^VOID,

    U : MiDynamicSpaceNodeUnion,
END

EXTERN FN MiFindDynamicSpaceNode (
    IN ptr : ^VOID,
) : ^MiDynamicSpaceNode

EXTERN FN MiAllocateDynamicPages (
    IN node : ^MiNode,
    IN pages : UWORD,
) : ^VOID

EXTERN FN MiReleaseDynamicPages (
    IN node : ^MiNode,
    IN ptr : ^VOID,
    IN pages : UWORD,
    IN flush : UWORD,
)

EXTERN FN MiAllocateDynamicSpace (
    IN node : ^MiNode,
    IN pages : UWORD,
    IN wait : UWORD,
) : ^MiDynamicSpaceNode

EXTERN FN MiReleaseDynamicSpace (
    IN node : ^MiNode,
    IN spacenode : ^MiDynamicSpaceNode,
    IN flush : UWORD,
)

EXTERN FN MiAllocatePage (
    IN partition : ^MiPartition,
    IN zeroed : UWORD,
    IN low : UWORD,
    IN color : UWORD,
) : ^MiPfe

EXTERN FN MiFreePage (
    IN partition : ^MiPartition,
    IN pfe : ^MiPfe,
)

EXTERN FN MiWaitForPages (
    IN partition : ^MiPartition,
    IN low : UWORD,
) : UWORD

EXTERN FN MiAllocatePageWait (
    IN partition : ^MiPartition,
    IN zeroed : UWORD,
    IN low : UWORD,
    IN color : UWORD,
) : ^MiPfe

EXTERN FN MiAllocatePageFromList (
    IN list : ^MiAvailablePageList,
    IN color : UWORD,
) : ^MiPfe

EXTERN FN MiInsertPageIntoList (
    IN list : ^MiAvailablePageList,
    IN pfe : ^MiPfe,
    IN head : UWORD,
)

#MACRO MiAcquireListExclusive ( partition ) [
    KeAcquireApcLockExclusive ( &(partition)^.ListLock )
]

#MACRO MiReleaseList ( partition, ipl ) [
    KeReleaseApcLock ( &(partition)^.ListLock, ipl )
]

#MACRO MiAcquireObjectExclusive ( object ) [
    KeAcquireApcLockExclusive ( &(object)^.Pushlock )
]

#MACRO MiAcquireObjectShared ( object ) [
    KeAcquireApcLockShared ( &(object)^.Pushlock )
]

#MACRO MiReleaseObject ( object, ipl ) [
    KeReleaseApcLock ( &(object)^.Pushlock, ipl )
]

STRUCT MiQuotaLimit
    Used : UWORD,
    Limit : UWORD,
END

STRUCT MiQuotaBlock
    Entry : RtlListEntry,

    Pool : MiQuotaLimit[MM_MAXIMUM_POOL],
    VmPages : MiQuotaLimit,

    References : ULONG,
    Uid : ULONG,
END

EXTERN FN MiInitializeQuota ()

EXTERN FN MiInitializeQuotaBlock (
    IN quotablock : ^MiQuotaBlock,
    IN nplimit : UWORD,
    IN pglimit : UWORD,
    IN vmlimit : UWORD,
    IN uid : UWORD,
)

EXTERN FN MiExpandPageFiles (
    IN partition : ^MiPartition,
    IN wait : UWORD,
    IN full : UWORD,
) : OsStatus

EXTERN FN MiInitializeArchitecture ()

EXTERN FN MiInitializeMdlZones ()

#MACRO MiPfnColor ( pfn ) [
    ((pfn) & (MI_COLOR_COUNT - 1))
]

#MACRO MiVirtualAddressColor ( vaddr ) [
    ((vaddr >> RTL_PAGE_SHIFT) & (MI_COLOR_COUNT - 1))
]

EXTERN FN MiInitializePoolCache (
    IN node : ^MiNode,
)

// Internal pool constants

// This is the shift for the minimum block size (i.e. 1 << 5 = 32).

#DEFINE MI_BLOCK_SIZE_SHIFT 5
#DEFINE MI_BLOCK_MIN_SIZE [(1 << MI_BLOCK_SIZE_SHIFT)]
#DEFINE MI_BLOCK_SIZE_MASK [(MI_BLOCK_MIN_SIZE - 1)]

// We track block sizes in units of minimum block sizes. Since we store this in
// a byte, the maximum block size is the minimum block size times 256 (or,
// shifted left by 8). Actually, here we use 6 (1 << 6 = 64 units max) to keep
// the size of the pool structures, and time spent scanning list heads down.

#DEFINE MI_BLOCK_MAX_UNITS_SHIFT 6
#DEFINE MI_BLOCK_MAX_SIZE_SHIFT [(MI_BLOCK_SIZE_SHIFT + MI_BLOCK_MAX_UNITS_SHIFT)]
#DEFINE MI_BLOCK_MAX_SIZE [(1 << MI_BLOCK_MAX_SIZE_SHIFT)]
#DEFINE MI_BLOCK_MAX_SIZE_MASK [(MI_BLOCK_MAX_SIZE - 1)]

// The maximum request size is four units less than the maximum size.
// This avoids some weird edge cases. It's also more time-efficient to use the
// page-aligned allocator for larger requests.

#DEFINE MI_BLOCK_MAX_REQUEST_UNITS [((1 << MI_BLOCK_MAX_UNITS_SHIFT) - 4)]
#DEFINE MI_BLOCK_MAX_REQUEST_SIZE [(MI_BLOCK_MAX_REQUEST_UNITS << MI_BLOCK_SIZE_SHIFT)]

STRUCT MiSlabCache
    Size : UWORD,

    Lock : KeLock,

    FreeListHead : RtlListEntry,

    Node : ^MiNode,

    Tag : ULONG,
    SlabSize : ULONG,
    ActiveSlabCount : ULONG,

    BlocksPerSlab : UBYTE,
    PoolIndex : UBYTE,
END

STRUCT MiMagazineType
    PoolCache : ^MiPoolCache,
    Size : UBYTE,
END

ENUM MiMagazineTypes : UBYTE
    MI_MAGAZINE_SMALL,
    MI_MAGAZINE_LARGE,

    MI_MAGAZINE_MAX,
END

#DEFINE MI_BLOCK_LOG_BUCKETS [(MI_BLOCK_MAX_UNITS_SHIFT + 1)]
#DEFINE MI_BLOCK_SIZE_BUCKETS [(1 << MI_BLOCK_MAX_UNITS_SHIFT) + 1]

FNPTR MiPoolGetMemoryF (
    IN partition : ^MiPartition,
    IN ptr : ^VOID,
    IN pages : UWORD,
    IN low : UWORD,
    IN wait : UWORD,
) : UWORD

FNPTR MiPoolReturnMemoryF (
    IN partition : ^MiPartition,
    IN ptr : ^VOID,
    IN pages : UWORD,
)

STRUCT MiPool
    Lock : KeLock,

    Partition : ^MiPartition,
    Node : ^MiNode,

    GetMemory : MiPoolGetMemoryF,
    ReturnMemory : MiPoolReturnMemoryF,

    BytesUsedInternally : UWORD,
    BytesUsedExternally : UWORD,
    BytesUsedPeak : UWORD,

    LogListHeads : RtlListEntry[MI_BLOCK_LOG_BUCKETS],
    SizeListHeads : RtlListEntry[MI_BLOCK_SIZE_BUCKETS],

    Flags : UBYTE,
END

#DEFINE MI_DEFERRED_FLUSH_PAIRS 64

STRUCT MiDeferredFlush
    Ptr : ^VOID,
    Pages : UWORD,
END

STRUCT MiNode
    DeferredFlushTable : MiDeferredFlush[MI_DEFERRED_FLUSH_PAIRS],
    DeferredFlushIndex : UWORD,
    DeferredFlushPages : UWORD,

    DynamicSpaceRoot : RtlAvlNode,
    DynamicSpaceLock : KeLock,
    DynamicSpaceTreeLock : KeLock,
    DynamicSpaceBitmap : RtlBitmapHeader,
    DynamicSpaceHint : UWORD,
    DynamicSpaceBase : ^VOID,

    SpaceNodeCache : ^MiPoolCache,

    PoolSpace : MiChunkSpace,
    CacheSpace : MiChunkSpace,

    PoolRecords : MiPool[MM_MAXIMUM_POOL],

    PoolTable : ^MiPool[MM_MAXIMUM_POOL],

    PoolCacheSlabs : MiSlabCache,

    MagazineTypeTable : MiMagazineType[MI_MAGAZINE_MAX],

    PoolCacheList : RtlListEntry,

    PoolCacheListLock : KeLock,

    Id : UBYTE,

    Partition : MiPartition,
END