//
// Implements support for Partition objects.
//

#INCLUDE "Mi.hjk"

FN MiInitializeAvailablePageList (
    IN list : ^MiAvailablePageList,
)

    // Initialize a list of available pages.

    list^.Count = 0

    i := 0

    WHILE i < MI_COLOR_COUNT DO
        RtlInitializeList ( &list^.Heads[i] )

        i += 1
    END
END

FN MiInitializePartitionStage1 (
    IN partition : ^MiPartition,
)

    // Perform the first part of initialization for a memory partition.
    // This is split in two so that we can use it while initializing the system
    // partition.

    // Initialize the locks.

    KeInitializeLock ( &partition^.ListLock )

    KeInitializeLock ( &partition^.CommitLock )

    // Initialize the events.

    KeInitializeEvent (
        &partition^.LowMemoryEvent, // event
        "LowMemory", // name
        TRUE, // notification
        FALSE, // signalstate
    )

    KeInitializeEvent (
        &partition^.PageAvailableEvent, // event
        "PageAvailable", // name
        TRUE, // notification
        TRUE, // signalstate
    )

    KeInitializeEvent (
        &partition^.LowPageAvailableEvent, // event
        "LowPageAvailable", // name
        TRUE, // notification
        TRUE, // signalstate
    )

    KeInitializeEvent (
        &partition^.ModifiedPageEvent, // event
        "ModifiedPages", // name
        FALSE, // notification
        FALSE, // signalstate
    )

    KeInitializeEvent (
        &partition^.ZeroPageEvent, // event
        "ZeroPages", // name
        FALSE, // notification
        FALSE, // signalstate
    )

    // Initialize the list heads.

    RtlInitializeList ( &partition^.ModifiedListHead )
    partition^.ModifiedPageCount = 0

    MiInitializeAvailablePageList ( &partition^.FreeList )
    MiInitializeAvailablePageList ( &partition^.ZeroList )
    MiInitializeAvailablePageList ( &partition^.StandbyList )

    partition^.AvailablePageCount = 0
    partition^.FluidPageCount = 0

    // Initialize commit.

    partition^.CommitUsage = 0
    partition^.CommitLimit = 0
    partition^.TheoreticalCommitLimit = 0

    // Initialize thresholds.

    partition^.LowPageCount = 0
    partition^.SufficientPageCount = 0
    partition^.ModifiedPageMaximum = 0
    partition^.ZeroingThreshold = 0

    partition^.SizeLevel = MI_UNINITIALIZED_SYSTEM
END

FN MiSetPartitionSize (
    IN partition : ^MiPartition,
)

    // Calculate the partition size and various threshold values.

    membytes := partition^.TotalPages << RTL_PAGE_SHIFT
    size : UWORD

    IF membytes <= 3 * 1024 * 1024 THEN
        // Tiny, 0-3MB.

        size = MI_TINY_SYSTEM

    ELSEIF membytes <= 5 * 1024 * 1024 THEN
        // Small, 3-5MB.

        size = MI_SMALL_SYSTEM

    ELSEIF membytes <= 9 * 1024 * 1024 THEN
        // Medium, 5-9MB.

        size = MI_MEDIUM_SYSTEM

    ELSEIF membytes <= 33 * 1024 * 1024 THEN
        // Large, 9-33MB.

        size = MI_LARGE_SYSTEM

    ELSE
        // Massive, >33MB.

        size = MI_MASSIVE_SYSTEM
    END

    partition^.SizeLevel = size

    // Set the modified page maximum.

    IF size <= MI_TINY_SYSTEM THEN
        partition^.ModifiedPageMaximum = 50

    ELSEIF size <= MI_LARGE_SYSTEM THEN
        partition^.ModifiedPageMaximum = 100

    ELSE
        partition^.ModifiedPageMaximum = 300
    END

    // Set the page zeroing threshold.

    IF size <= MI_TINY_SYSTEM THEN
        partition^.ZeroingThreshold = 75

    ELSEIF size <= MI_MEDIUM_SYSTEM THEN
        partition^.ZeroingThreshold = 150

    ELSE
        partition^.ZeroingThreshold = 500
    END

    // Set the paging thresholds.

    IF size <= MI_TINY_SYSTEM THEN
        partition^.LowPageCount = MI_BLOCK_FOR_PAGES_THRESHOLD + 8
        partition^.SufficientPageCount = MI_BLOCK_FOR_PAGES_THRESHOLD + 50

    ELSEIF size <= MI_LARGE_SYSTEM THEN
        partition^.LowPageCount = MI_BLOCK_FOR_PAGES_THRESHOLD + 20
        partition^.SufficientPageCount = MI_BLOCK_FOR_PAGES_THRESHOLD + 100

    ELSE
        partition^.LowPageCount = MI_BLOCK_FOR_PAGES_THRESHOLD + 100
        partition^.SufficientPageCount = MI_BLOCK_FOR_PAGES_THRESHOLD + 500
    END
END

#MACRO MiNewAvailablePage ( partition, avail ) [
    IF (avail) > MI_BLOCK_FOR_PAGES_THRESHOLD AND
        (partition)^.PageAvailableEvent.Header.SignalCount == 0 THEN

        // Signal the available page event.

        KeSignalEvent (
            &(partition)^.PageAvailableEvent, // event
            0, // priorityboost
        )
    
    END

    IF (partition)^.LowPageAvailableEvent.Header.SignalCount == 0 THEN
        // Signal the low page available event.

        KeSignalEvent (
            &(partition)^.LowPageAvailableEvent, // event
            0, // priorityboost
        )
    END
]

FN MiInsertPageIntoList (
    IN list : ^MiAvailablePageList,
    IN pfe : ^MiPfe,
    IN head : UWORD,
)

    // Insert the page into the specified list, into the correct color bucket.

    pfn := MI_PFE_TO_PFN ( pfe )

    list^.Count += 1

    IF head THEN
        RtlInsertAtHeadList (
            &list^.Heads[MI_PFN_COLOR ( pfn )], // head
            &pfe^.Entry, // entry
        )

    ELSE
        RtlInsertAtTailList (
            &list^.Heads[MI_PFN_COLOR ( pfn )], // head
            &pfe^.Entry, // entry
        )
    END
END

FN MiAllocatePageFromList (
    IN list : ^MiAvailablePageList,
    IN color : UWORD,
) : ^MiPfe

    // Allocate a page, preferably with the given color, from the list.

    list^.Count -= 1

#IF ( == MI_COLOR_COUNT 1 )
    entry := list^.Heads[0].Next

#IF BLD_CHK
    IF entry == &list^.Heads[0] THEN
        // Shouldn't be reachable - caller saw there were items in this list.

        KeCrash ( "MiAllocatePageFromList\n" )
    END
#END

    RtlRemoveEntryList ( entry )

    RETURN CONTAINEROF entry TO MiPfe.Entry

#ELSE
    i := 0

    WHILE i < MI_COLOR_COUNT DO
        entry := list^.Heads[color].Next

        IF entry != &list^.Heads[color] THEN
            // Found one. Pop it from the tail.

            RtlRemoveEntryList ( entry )

            RETURN CONTAINEROF entry TO MiPfe.Entry
        END

        color += 1
        i += 1

        IF color == MI_COLOR_COUNT THEN
            color = 0
        END
    END

#IF BLD_CHK
    // Shouldn't be reachable - caller saw there were items in this list.

    KeCrash ( "MiAllocatePageFromList\n" )
#END

#END

END

FN MiAllocatePageFromStandbyList (
    IN partition : ^MiPartition,
    IN color : UWORD,
) : ^MiPfe

    // Allocate a page from the given standby list.

    pfe := MiAllocatePageFromList (
        &partition^.StandbyList, // list
        color, // color
    )

    // Disassociate it from its object.
    // If this is paged pool, paged executive, or a page table, this is a "dummy
    // object" used only for locking purposes.

    object := pfe^.Object

    // No need to call this as APC-safe since we're already blocking out APCs
    // by holding the list lock.

    KeAcquireLockExclusive ( &object^.StructureLock )

    // Set object pointer to NULLPTR. This is important so that it notices that
    // the owner of the page "changed" if there is a concurrent reference being
    // taken out on this page.

    pfe^.Object = NULLPTR

    IF pfe^.Type == MI_BACKED_PFE_TYPE THEN
        // Remove from AVL tree of object.

        ob := CONTAINEROF object TO MmBackedObject.Hdr

        RtlRemoveAvl (
            &ob^.PageTreeRoot, // root
            &pfe^.U.Backed.Entry, // node
        )

    ELSE

#IF BLD_CHK
        IF pfe^.Type != MI_ANON_PFE_TYPE THEN
            KeCrash ( "Not anonymous\n" )
        END
#END

        // Reset the tracking table entry for this anonymous page.

        entry := pfe^.U.Anon.TrackingTableEntry
        entry^ = pfe^.U.Anon.Backing

        // If this wasn't a page of paged pool or the paged executive, the
        // tracking table entry resides in page tracking pool, and we can
        // decrement the refcount on that page of tracking pool, which may
        // allow it to be paged out if it gets trimmed from the system working
        // set.
        //
        // Note that if it WAS paged pool or paged executive, the containing
        // page for the tracking PTE was an actual system space page table -
        // we never page those out!
        //
        // Note that *user* page tables can be reclaimed, but are *not*
        // reclaimed here. Freeing them up when the last PTE has been trimmed
        // out of a page table is the province of architecture-specific pmap
        // code.

        IF pfe^.Flags & MI_PAGED_POOL_PFE_FLAG == 0 THEN
            poolpfe := MI_PFN_TO_PFE (
                MI_PFN_FROM_PTE (
                    (MI_PTE_ADDRESS ( entry ))^
                )
            )

#IF BLD_CHK
            // Tracking pool should consist of anonymous pages.

            IF poolpfe^.Type != MI_ANON_PFE_TYPE THEN
                KeCrash ( "poolpfe not anonymous\n" )
            END

            // This page of tracking pool should have at least 2
            // references: one for being pinned (due to having this tracking
            // entry resident), and another for being in the system working
            // set.

            IF poolpfe^.References < 2 THEN
                KeCrash ( "poolpfe not referenced\n" )
            END
#END

            poolpfe^.References -= 1
        END
    END

    KeReleaseLock ( &object^.StructureLock )

    RETURN pfe
END

FN MiAllocatePage (
    IN partition : ^MiPartition,
    IN zeroed : UWORD,
    IN low : UWORD,
    IN color : UWORD,
) : ^MiPfe

    // Allocate a page from the given partition. If none available, return
    // NULLPTR.

    pfe : ^MiPfe = NULLPTR
    mustzero := FALSE
    listentry : ^RtlListEntry

    // Ensure color within range. This allows callers to use a simple counter.

    color &= MI_COLOR_COUNT - 1

    ipl := MiAcquireListExclusive ( partition )

    avail := partition^.AvailablePageCount

    IF avail == 0 THEN
        // No pages.

        GOTO Out
    END

    IF NOT low AND avail <= MI_BLOCK_FOR_PAGES_THRESHOLD THEN
        // Not enough pages.

        GOTO Out
    END

    IF zeroed THEN
        IF partition^.ZeroList.Count THEN
            pfe = MiAllocatePageFromList (
                &partition^.ZeroList, // list
                color, // color
            )

        ELSE
            // Need to grab a free or standby page. Make sure to zero out the
            // page outside the list lock.

            mustzero = TRUE

            IF partition^.FreeList.Count THEN
                pfe = MiAllocatePageFromList (
                    &partition^.FreeList, // list
                    color, // color
                )

            ELSE
                pfe = MiAllocatePageFromStandbyList (
                    partition, // partition
                    color, // color
                )
            END
        END

    ELSEIF partition^.FreeList.Count THEN
        pfe = MiAllocatePageFromList (
            &partition^.FreeList, // list
            color, // color
        )

    ELSEIF partition^.ZeroList.Count THEN
        pfe = MiAllocatePageFromList (
            &partition^.ZeroList, // list
            color, // color
        )

    ELSE
        pfe = MiAllocatePageFromStandbyList (
            partition, // partition
            color, // color
        )
    END

    avail -= 1
    partition^.AvailablePageCount = avail

    IF avail < partition^.LowPageCount THEN
        // Too few pages. Signal the low memory event.

        KeSignalEvent (
            &partition^.LowMemoryEvent, // event
            0, // priorityboost
        )
    END

@Out

    MiReleaseList ( partition, ipl )

    IF mustzero THEN
        KeZeroPage ( MI_PFE_TO_PFN ( pfe ) )
    END

    RETURN pfe
END

FN MiFreePage (
    IN partition : ^MiPartition,
    IN pfe : ^MiPfe,
)

    // Free the page to the specified partition.

    ipl := MiAcquireListExclusive ( partition )

    avail := partition^.AvailablePageCount
    avail += 1

    partition^.AvailablePageCount = avail

    // Insert at the tail so that we reuse it more quickly (hot in cache).

    MiInsertPageIntoList (
        &partition^.FreeList, // list
        pfe, // pfe
        FALSE, // head
    )

    MiReleaseList ( partition, ipl )

    IF partition^.FreeList.Count > partition^.ZeroingThreshold AND
        partition^.ZeroPageEvent.Header.SignalCount == 0 THEN

        // Wake the zero page worker.

        KeSignalEvent (
            &partition^.ZeroPageEvent, // event
            0, // priorityboost
        )
    END

    // Wake waiters for available pages.

    MiNewAvailablePage ( partition, avail )
END

FN MiWaitForPages (
    IN partition : ^MiPartition,
    IN low : UWORD,
) : UWORD

    // Wait for available pages to exist from the given partition.
    // This function provides no guarantees - caller will have to repeatedly
    // call it until MiAllocatePage yields a page.

    // Returns TRUE if a timeout occurred, FALSE otherwise.
    // If a timeout occurred, that indicates that the partition did not have
    // enough fluid pages for its workload, or is missing a pagefile, and has
    // deadlocked.

    threshold : UWORD
    event : ^KeEvent
    timeout : RtlUquad

    RtlSetUquadToUlong ( &timeout, 5000 )

    IF low THEN
        threshold = 0
        event = &partition^.LowPageAvailableEvent

    ELSE
        threshold = MI_BLOCK_FOR_PAGES_THRESHOLD
        event = &partition^.PageAvailableEvent
    END

    ipl := MiAcquireListExclusive ( partition )

    WHILE partition^.AvailablePageCount <= threshold DO
        // Wait on the event until we catch the available page count at a
        // sufficient level.

        KeResetEvent ( event )

        MiReleaseList ( partition, ipl )

        status := KeWaitForSingleObject (
            KE_KERNEL_MODE, // waitmode
            FALSE, // alertable
            &timeout, // timeout
            &event^.Header, // object
        )

        IF status == OS_STATUS_WAIT_TIMEOUT THEN
            IF partition == &MiSystemPartition THEN
                // If the system partition is deadlocked, this is a fatal
                // condition.

                KeCrash (
                    "Mm: Deadlocked. EVI=%u FRE=%u ZRO=%u MOD=%u AVL=%u\n",
                    partition^.StandbyList.Count,
                    partition^.FreeList.Count,
                    partition^.ZeroList.Count,
                    partition^.ModifiedPageCount,
                    partition^.AvailablePageCount,
                )
            END

            RETURN TRUE
        END

        ipl = MiAcquireListExclusive ( partition )
    END

    MiReleaseList ( partition, ipl )

    RETURN FALSE
END

FN MiAllocatePageWait (
    IN partition : ^MiPartition,
    IN zeroed : UWORD,
    IN low : UWORD,
    IN color : UWORD,
) : ^MiPfe

    // Allocate a page with the given parameters. Allowed to wait. Returns
    // NULLPTR on timeout (indicative of partition deadlock).

    WHILE TRUE DO
        pfe := MiAllocatePage (
            partition, // partition
            zeroed, // zeroed
            low, // low
            color, // color
        )

        IF pfe THEN
            RETURN pfe
        END

        IF MiWaitForPages (
            partition, // partition
            low, // low
        ) THEN
            RETURN NULLPTR
        END
    END
END

FN MmChargeCommit (
    IN partition : ^MiPartition,
    IN pages : UWORD,
    IN wait : UWORD,
) : OsStatus

    // Attempt to charge the specified commit to the memory partition.
    // It would be unwise to page this routine as it can be called during
    // nonpaged pool allocation.

#IF BLD_CHK
    IF partition^.CommitUsage + pages < pages THEN
        KeCrash ( "commit overflow\n" )
    END
#END

    // Acquire the commit lock to block out pagefile contraction that
    // might lower the commit limit and cause us to proceed erroneously.

    ipl := KeAcquireApcLockExclusive ( &partition^.CommitLock )

    IF partition^.CommitUsage + pages > partition^.TheoreticalCommitLimit THEN
        // Don't even bother trying, there's no way to extend the pagefiles to
        // accommodate this because the theoretical commit limit represents what
        // we could theoretically increase the commit limit to if we were to
        // extend all of the pagefiles to their maximum size.

        KeReleaseApcLock ( &partition^.CommitLock, ipl )

        RETURN OS_STATUS_COMMIT_EXCEEDED
    END

    // Increase the commit usage.
    // If it goes over the limit, us and anyone else trying to charge commit
    // will spin below until a pagefile expansion succeeds.

    KeIncrementPtr (
        &partition^.CommitUsage, // ptr
        pages, // inc
    )

    WHILE partition^.CommitUsage > partition^.CommitLimit DO
        KeReleaseApcLock ( &partition^.CommitLock, ipl )

        status := MiExpandPageFiles (
            partition, // partition
            wait, // wait
            FALSE, // full
        )

        IF NOT wait THEN
            // Proceed no matter what.

            RETURN status
        END

        ipl = KeAcquireApcLockExclusive ( &partition^.CommitLock )

        IF OsError ( status ) THEN
            // Failed to increase commit limit.
            // Remove the commit charge.

            KeIncrementPtr (
                &partition^.CommitUsage, // ptr
                -pages, // inc
            )

            KeReleaseApcLock ( &partition^.CommitLock, ipl )

            RETURN status
        END
    END

    KeReleaseApcLock ( &partition^.CommitLock, ipl )

    RETURN OS_STATUS_SUCCESS
END

FN MmUnchargeCommit (
    IN partition : ^MiPartition,
    IN pages : UWORD,
)

    // Remove the specified commit charge from the partition.
    // If pagefiles can now be contracted, that will be noticed at the next tick
    // of the responsible worker thread.

    old := KeIncrementPtr (
        &partition^.CommitUsage, // ptr
        -pages, // inc
    )

#IF BLD_CHK
    IF pages > old THEN
        KeCrash ( "commit underflow\n" )
    END
#END

END