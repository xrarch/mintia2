//
// Implements a fast allocator for fixed size memory blocks.
//

#INCLUDE "Mi.hjk"

STRUCT MiFreeZoneBlock
    Next : ^MiFreeZoneBlock,
END

EXPORT FN MmInitializeZone (
    IN zone : ^MmZoneHeader,
    IN blocksize : UWORD,
)

    // Initialize a zone header.

    KeAssert ( blocksize & (RTL_MACHINE_WORD_SIZE - 1) == 0 )
    KeAssert ( blocksize >= SIZEOF MiFreeZoneBlock )

    zone^.BlockSize = blocksize
    zone^.ChunkListHead = NULLPTR
    zone^.FreeListHead = NULLPTR
END

EXPORT FN MmExtendZone (
    IN zone : ^MmZoneHeader,
    IN hunk : ^VOID,
    IN bytes : UWORD,
)

    // Add more blocks to the zone.

    KeAssert ( bytes & (RTL_MACHINE_WORD_SIZE - 1) == 0 )
    KeAssert ( bytes >= SIZEOF MiFreeZoneBlock + MM_ZONE_OVERHEAD )

    blocksize := zone^.BlockSize

    // Add the chunk to the chunk list.

    chunk := CAST hunk TO ^MiZoneChunk

    chunk^.Next = zone^.ChunkListHead
    zone^.ChunkListHead = chunk

    // Initialize the chunk blocks.

    block := CAST hunk + SIZEOF MiZoneChunk TO ^MiFreeZoneBlock
    hunkend := hunk + bytes

    WHILE block < hunkend DO
        block^.Next = zone^.FreeListHead
        zone^.FreeListHead = block

        block += blocksize
    END
END

EXPORT FN MmEmptyZone (
    IN zone : ^MmZoneHeader,
    IN tag : UWORD,
)

    // Free all of the chunks in the zone.

    chunk := zone^.ChunkListHead

    WHILE chunk DO
        next := chunk^.Next

        MmFreePool (
            chunk, // ptr
            tag, // tag
        )

        chunk = next
    END

    zone^.ChunkListHead = NULLPTR
    zone^.FreeListHead = NULLPTR
END

EXPORT FN MmAllocateZone (
    IN zone : ^MmZoneHeader,
) : ^VOID

    // Allocate a block from the zone.

    ptr := zone^.FreeListHead

    IF ptr THEN
        zone^.FreeListHead = ptr^.Next
    END

    RETURN ptr
END

EXPORT FN MmFreeZone (
    IN zone : ^MmZoneHeader,
    IN ptr : ^VOID,
)

    // Free a block to the zone.

    block := CAST ptr TO ^MiFreeZoneBlock

    block^.Next = zone^.FreeListHead
    zone^.FreeListHead = block
END