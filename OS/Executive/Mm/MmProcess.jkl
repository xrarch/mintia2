//
// Implements process support in the Memory Manager.
//

#INCLUDE "Mi.hjk"

#SECTION "PAGEtext"
FN MmInitializeProcess (
    IN process : ^PsProcess,
    IN partition : ^MiPartition,
) : OsStatus

    // Initialize the process so it can be used by the memory manager.

    IF NOT partition THEN
        // No partition object supplied, use the system partition.

        partition = &MiSystemPartition

    ELSE
        // Custom partition object, reference it to reflect the existence of a
        // process.

        ObReferenceObject ( partition )
    END

    // Set the partition object.

    process^.Partition = partition

    IF NOT PsSystemProcess THEN
        // This is the system process, so give it the system page directory.

        process^.Pcb.PageDirectoryPfn = KeSystemPageDirectoryPfn

    ELSE
        KeCrash ( "NYI create address space\n" )
    END

    // NYI

    RETURN OS_STATUS_SUCCESS
END

#SECTION "PAGEtext"
FN MmUninitializeProcess (
    IN process : ^PsProcess,
)

    // Uninitialize a process that was previously initialized.

    // We uninitialize everything, except for the page directory. We still need
    // that because we might be in the address space of that process right now.

    // NYI
END

#SECTION "PAGEtext"
FN MmDeleteProcess (
    IN process : ^PsProcess,
)

    // Finish deleting a process.

    // First delete the page directory.

    // NYI

    IF process^.Partition != &MiSystemPartition THEN
        // Unreference the partition object.

        // Only do this after every page frame the process might possibly have
        // ever consumed (including page directory, tables, etc) has been
        // returned.

        ObUnreferenceObject ( process^.Partition )
    END
END

#SECTION "PAGEtext"
FN MmInitializeThread (
    IN process : ^PsProcess,
    IN thread : ^PsThread,
) : OsStatus

    // Initialize the thread's userspace virtual memory structures.
    // This includes the TEB and the user stack.

    // NYI

    RETURN OS_STATUS_SUCCESS
END

#SECTION "PAGEtext"
FN MmUninitializeThread (
    IN process : ^PsProcess,
    IN thread : ^PsThread,
)

    // Free the thread's TEB and user stack.

    // NYI
END