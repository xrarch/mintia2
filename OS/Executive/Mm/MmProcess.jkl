//
// Implements process support in the Memory Manager.
//

#INCLUDE "Mi.hjk"

#INCLUDE "<ll>/System/OsProcess.hjk"

#SECTION "PAGEtext"
FN MmInitializeProcess (
    IN parentprocess : ^PsProcess,
    IN process : ^PsProcess,
    IN partition : ^MiPartition,
) : OsStatus

    // Initialize the process so it can be used by the memory manager.

    IF NOT partition THEN
        // No partition object supplied, use the parent process's partition.

        partition = parentprocess^.Partition
    END

    IF partition^.Node != &partition^.Node^.Partition THEN
        // This is not a partition inherent to a NUMA node so we need to up the
        // refcount. NUMA node partitions are eternal and don't have refcounts,
        // so we can't do this in that case.

        ObReferenceObject ( partition )
    END

    process^.WorkingSetSize = 0
    process^.PageFaultCount = 0

    // Set the partition object.

    process^.Partition = partition
    process^.Node = partition^.Node

    IF NOT PsSystemProcess THEN
        // This is the system process, so give it the system page directory.

        process^.Pcb.PageDirectoryPfn = KeSystemPageDirectoryPfn

    ELSE
        KeCrash ( "NYI create address space\n" )
    END

    // NYI

    RETURN OS_STATUS_SUCCESS
END

#SECTION "PAGEtext"
FN MmUninitializeProcess (
    IN process : ^PsProcess,
)

    // Uninitialize a process that was previously initialized.

    // We uninitialize everything, except for the page directory. We still need
    // that because we might be in the address space of that process right now.

    // NYI
END

#SECTION "PAGEtext"
FN MmDeleteProcess (
    IN process : ^PsProcess,
)

    // Finish deleting a process.

    // First delete the page directory.

    // NYI

    IF process^.Partition != &MiSystemPartition THEN
        // Unreference the partition object.

        // Only do this after every page frame the process might possibly have
        // ever consumed (including page directory, tables, etc) has been
        // returned.

        ObUnreferenceObject ( process^.Partition )
    END
END

#SECTION "PAGEtext"
FN MmInitializeThread (
    IN process : ^PsProcess,
    IN thread : ^PsThread,
    IN mode : UWORD,
) : OsStatus

    // Initialize the thread's virtual memory state.
    // If it's a usermode thread, this involves creating a TEB and user stack.

    thread^.VmPrivileged = FALSE

    IF mode == KE_USER_MODE THEN
        KeCrash ( "MmInitializeThread NYI\n" )
    END

    RETURN OS_STATUS_SUCCESS
END

#SECTION "PAGEtext"
FN MmUninitializeThread (
    IN process : ^PsProcess,
    IN thread : ^PsThread,
)

    // Uninitialize the thread's virtual memory state.
    // If it's a usermode thread, free its TEB and user stack.

    // NYI
END

#SECTION "PAGEtext"
FN MmQueryProcess (
    IN process : ^PsProcess,
    IN query : ^OsProcessQuery,
)

    // Fill in the memory management specific parts of the process query.

    query^.WorkingSetSize = process^.WorkingSetSize
    query^.PageFaultCount = process^.PageFaultCount
END