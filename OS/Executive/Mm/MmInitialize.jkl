//
// Implements initialization for the Memory Manager (Mm) component of the MINTIA
// Executive.
//

#INCLUDE "Mi.hjk"
#INCLUDE "<inc>/Ps.hjk"
#INCLUDE "../../Loader/Headers/Loader.hjk"
#INCLUDE "<ll>/Xlo.hjk"

MiBootNodeStatic : MiNode

PUBLIC MiBootNode : ^MiNode

PUBLIC MiSystemPartition : ^MiPartition

PUBLIC MiPfnDatabase : ^MiPfe

PUBLIC MiTotalPages := 0

PUBLIC MiSystemSize := 0

PUBLIC MiConstantZeroPfe : ^MiPfe

MiWiredPages := 0
MiFreedPages := 0
MiPagedPages := 0
MiDebugPages := 0

MiSystemQuota : MiQuotaBlock

MiUnwireableList : RtlListEntry

ENUM MiUnwireableType : UBYTE
    MI_WIRED_REGION,

    MI_FREE_REGION,
    MI_PAGED_REGION,
    MI_DEFERRED_FREE_REGION,
END

STRUCT MiUnwireableRegion
    Entry : RtlListEntry,
    Type : UWORD,
    Pages : UWORD,
    StartVa : UWORD,
END

#ENTERSECTION "INITtext"

FN MmJettisonUnusedResources ()

    // We need to release the page frames taken up by any boot resources that
    // were not claimed during the boot process.

    listhead := &KeLoaderBlock.ResourceListHead
    listentry := listhead^.Next

    partition := MiSystemPartition

    WHILE listentry != listhead DO
        rsrc := CONTAINEROF listentry TO BlResource.Entry

        IF rsrc^.Jettison THEN
            // Acquire a pointer to the first PTE for this region.

            pte := MiPteAddress ( rsrc^.Data )

            pages := (rsrc^.Size + RTL_PAGE_OFFSET_MASK) >> RTL_PAGE_SHIFT

            i := 0

            WHILE i < pages DO
                ptecontents := pte[i]

                // Not all boot resources are page aligned (in particular, the
                // IO config files are represented as boot resources and are
                // packed together rather than page aligned). As a result, we
                // need to check if each PTE has already been invalidated and
                // don't do it a second time if so.

                KeAssert ( rsrc^.IoConfig OR MiIsPteValid ( ptecontents ) )

                IF MiIsPteValid ( ptecontents ) THEN
                    pte[i] = MI_INVALID_KERNEL_PTE

                    // Free the page frame.

                    MiFreePage (
                        partition, // partition
                        MiPfnToPfe ( MiPfnFromPte ( ptecontents ) ), // pfe
                    )
                END

                i += 1
            END
        END

        listentry = listentry^.Next
    END
END

FN MiIdentifyUnwireableSections (
    IN dll : ^BlDll,
)

    // Identify the bounds of this module's unwireable sections, and add them to
    // a list.

    sectiontable := CAST dll^.Head + dll^.Head^.SectionTableOffset
        TO ^XloSectionHeader

    strtab := CAST dll^.Head + dll^.Head^.StringTableOffset TO ^UBYTE

    i := 0
    count := dll^.Head^.SectionCount

    WHILE i < count DO
        section := &sectiontable[i]

        pages := (section^.VirtualLength + RTL_PAGE_OFFSET_MASK) >>
            RTL_PAGE_SHIFT

        name := strtab + section^.NameOffset

        type := MI_WIRED_REGION

        IF dll^.Flags & BL_DLL_DEFERRED_FREE THEN
            // For whatever reason, the module failed to load.
            // Loader left it to us to free any partial memory its sections took
            // up since it has no way to do that itself. We should also alert
            // the system operator to the driver load failure.

            // We use this special region type because we have no idea how far
            // the loader got, so we might run into invalid PTEs. That's always
            // wrong for MI_FREE_REGION but not for this type.

            // TODO alert sysop somehow

            type = MI_DEFERRED_FREE_REGION

            MiWiredPages -= pages
            MiFreedPages += pages

        ELSEIF RtlCompareStringWithMax (
            name, // str1
            "INIT", // str2
            4, // count
        ) == 0 THEN

            type = MI_FREE_REGION

            MiWiredPages -= pages
            MiFreedPages += pages

        ELSEIF RtlCompareStringWithMax (
            name, // str1
            "PAGE", // str2
            4, // count
        ) == 0 THEN
            type = MI_PAGED_REGION

            MiWiredPages -= pages
            MiPagedPages += pages
        END

        IF type != MI_WIRED_REGION THEN
            // Create an unwireable region record.

            region := CAST MmAllocatePool (
                MM_NONPAGED_POOL, // poolindex
                SIZEOF MiUnwireableRegion, // bytes
                'Unwi', // tag
                FALSE, // wait
            ) TO ^MiUnwireableRegion

            IF NOT region THEN
                KeCrash ( "%sfailed to allocate unwire\n",
                    "MiReclaimMemory: " )
            END

            region^.Type = type
            
            region^.Pages = (section^.VirtualLength + RTL_PAGE_OFFSET_MASK) >>
                RTL_PAGE_SHIFT

            region^.StartVa = section^.VirtualAddress

            RtlInsertAtTailList (
                &MiUnwireableList, // head
                &region^.Entry, // entry
            )
        END

        i += 1
    END
END

FN MiReclaimMemory ()

    // We have to lift any lists the loader gave us onto our own pool. Then we
    // free the reclaimable regions of physical memory on the descriptor list.

    RtlInitializeList ( &MiUnwireableList )

    loaderhunk := MmAllocatePool (
        MM_NONPAGED_POOL, // poolindex
        KeLoaderBlock.ResourceCount * SIZEOF BlResource +
        KeLoaderBlock.DllCount * SIZEOF BlDll, // bytes
        'Boot', // tag
        FALSE, // wait
    )

    IF NOT loaderhunk THEN
        KeCrash ( "%sfailed to allocate loader hunk\n",
            "MiReclaimMemory: " )
    END

    resource := CAST loaderhunk TO ^BlResource

    dll := CAST loaderhunk +
        KeLoaderBlock.ResourceCount * SIZEOF BlResource TO ^BlDll

    // Move the resource list.

    listhead := &KeLoaderBlock.ResourceListHead
    listentry := listhead^.Next

    tmplisthead : RtlListEntry

    RtlInitializeList ( &tmplisthead )

    WHILE listentry != listhead DO
        rsrc := CONTAINEROF listentry TO BlResource.Entry

        RtlCopyBytes (
            resource, // dest
            rsrc, // src
            SIZEOF BlResource, // size
        )

        RtlInsertAtTailList (
            &tmplisthead, // head
            &resource^.Entry, // entry
        )

        resource += SIZEOF BlResource
        listentry = listentry^.Next
    END

    listhead^.Next = tmplisthead.Next
    listhead^.Prev = tmplisthead.Prev

    tmplisthead.Next^.Prev = listhead
    tmplisthead.Prev^.Next = listhead

    // Move the module list.

    listhead = &KeLoaderBlock.DllListHead
    listentry = listhead^.Next

    RtlInitializeList ( &tmplisthead )

    WHILE listentry != listhead DO
        bldll := CONTAINEROF listentry TO BlDll.Entry

        RtlCopyBytes (
            dll, // dest
            bldll, // src
            SIZEOF BlDll, // size
        )

        RtlInsertAtTailList (
            &tmplisthead, // head
            &dll^.Entry, // entry
        )

        // Walk this module's section headers and create a list of unwireable
        // sections.

        MiIdentifyUnwireableSections ( dll )

        dll += SIZEOF BlDll
        listentry = listentry^.Next
    END

    listhead^.Next = tmplisthead.Next
    listhead^.Prev = tmplisthead.Prev

    tmplisthead.Next^.Prev = listhead
    tmplisthead.Prev^.Next = listhead

    // Reclaim physical memory regions.

    sys := MiSystemPartition

    listhead = &KeLoaderBlock.DescriptorListHead
    listentry = listhead^.Next

    WHILE listentry != listhead DO
        desc := CONTAINEROF listentry TO BlMemoryDescriptor.Entry

        // Physical memory is reclaimable if it's either explicitly
        // reclaimable, or is debug memory and no debugger is installed.

        IF desc^.Type == BL_MEMORY_RECLAIMABLE OR
            (desc^.Type == BL_MEMORY_DEBUG AND NOT KeLoaderBlock.DbgMain) THEN

            pages := desc^.PageCount

            MiWiredPages -= pages
            MiFreedPages += pages

            sys^.FreeList.Count += pages
            sys^.AvailablePageCount += pages
            sys^.FluidPageCount += pages

            pfn := desc^.StartPfn
            pfe := MiPfnToPfe ( pfn )

            WHILE pages DO
                pfe^.Type = MI_FREE_PFE_TYPE

                RtlInsertAtTailList (
                    &sys^.FreeList.Heads[MiPfnColor(pfn)], // head
                    &pfe^.Entry, // entry
                )

                pfe += MI_PFE_SIZE
                pfn += 1
                pages -= 1
            END
        END

        listentry = listentry^.Next
    END
END

FN MiInitializeZeroedPage ()

    // Allocate the constantly zeroed page frame.

    MiConstantZeroPfe = MiAllocatePage (
        MiSystemPartition, // partition
        TRUE, // zeroed
        TRUE, // low
        0, // color
    )

    IF NOT MiConstantZeroPfe THEN
        KeCrash ( "Failed to allocate zero page\n" )
    END
END

FN MmInitializeStage1 ()

    // Stage 1 initialization for Memory Management. Here we have to initialize
    // the system memory partition enough to get physical memory allocation
    // working.

    KeAssert ( SIZEOF MiPfe <= MI_PFE_SIZE )

    MiBootNode = &MiBootNodeStatic

    MiSystemPartition = &MiBootNodeStatic.Partition

    sys := MiSystemPartition

    // Copy the address of the PFN database.

    MiPfnDatabase = KeLoaderBlock.PfnDatabase

    // Initialize the integral data structures of the system partition.

    MiInitializePartitionStage1 (
        sys, // partition
        MiBootNode, // node
    )

    // Walk the memory descriptor list.

    head := &KeLoaderBlock.DescriptorListHead
    listentry := head^.Next

    WHILE listentry != head DO
        desc := CONTAINEROF listentry TO BlMemoryDescriptor.Entry

        pages := desc^.PageCount

        // Include as part of the total memory of the system.

        sys^.TotalPages += pages

        IF desc^.Type == BL_MEMORY_FREE THEN
            // Place all page frames within this descriptor's bounds on the free
            // list of the system partition.

            sys^.FluidPageCount += pages
            sys^.AvailablePageCount += pages
            sys^.FreeList.Count += pages

            pfn := desc^.StartPfn
            pfe := MiPfnToPfe ( pfn )

            WHILE pages DO
                pfe^.Type = MI_FREE_PFE_TYPE

                RtlInsertAtTailList (
                    &sys^.FreeList.Heads[MiPfnColor(pfn)], // head
                    &pfe^.Entry, // entry
                )

                pfe += MI_PFE_SIZE
                pfn += 1
                pages -= 1
            END

        ELSE
            MiWiredPages += pages
        END

        listentry = listentry^.Next
    END

    membytes := sys^.TotalPages << RTL_PAGE_SHIFT

    RtlPrint ( "MmInitialize: %u KB\n", membytes / 1024 )

    // Determine system size.

    MiSetPartitionSize ( sys )

    // Initialize the system virtual address allocator.

    MiInitializeSystemVa ()

    // Initialize the system pools.

    MiInitializePools ( MiBootNode )

    // Initialize the quick map pages.

    MiInitializeQuickPages ()

    // Initialize commit to something acceptable before creation of the
    // pagefiles.

    sys^.CommitLimit = sys^.AvailablePageCount + 300
    sys^.TheoreticalCommitLimit = sys^.CommitLimit

    // Initialize quota management.

    MiInitializeQuota ()

    MiInitializeQuotaBlock (
        &MiSystemQuota, // quotablock
        -1, // nplimit
        -1, // pglimit
        -1, // vmlimit
        0, // uid
    )

    // Give the idle process a quota block. We stash this in the handle table.
    // Idle process has no real handle table.

    KeIdleProcess.Paged^.HandleTable.QuotaBlock = &MiSystemQuota

    // Set the idle process's partition to the system partition.

    KeIdleProcess.Partition = sys
    KeIdleProcess.Node = MiBootNode

    // Reclaim boot time memory. Nothing in "loader space" is safe to access
    // after this point.

    MiReclaimMemory ()

    // Hook for the architecture code to do what it wants.

    MiInitializeArchitecture ()

    // Initialize the zones for quick MDL allocation.

    MiInitializeMdlZones ()

    // Allocate one page which just remains constantly zeroed for the lifetime
    // of the system.

    MiInitializeZeroedPage ()
END

#LEAVESECTION