//
// Implements the dispatcher-level mechanisms necessary for opportunistic kernel
// stack swapping. These routines are called by a worker thread implemented by
// higher level code.
//

#INCLUDE "Ki.hjk"

KiStackSwapListHead : ^KeThread = NULLPTR
KiProcessSwapListHead : ^KeProcess = NULLPTR
KiProcessOutSwapListHead : ^KeProcess = NULLPTR

PUBLIC KeStackSwapperEvent : KeEvent

#IF BLD_MP

#MACRO KiAcquireCandidateListElevated ( prb ) [
    KiAcquireSpinlock ( &(prb)^.StackSwapListLock )
]

#MACRO KiReleaseCandidateListElevated ( prb ) [
    KiReleaseSpinlock ( &(prb)^.StackSwapListLock )
]

#MACRO KiAcquireCandidateList ( prb ) [
    KiAcquireSpinlockRaise ( &(prb)^.StackSwapListLock )
]

#MACRO KiReleaseCandidateList ( prb, ipl ) [
    KiReleaseSpinlockLower ( &(prb)^.StackSwapListLock, ipl )
]

#ELSE

#MACRO KiAcquireCandidateListElevated ( prb ) []

#MACRO KiReleaseCandidateListElevated ( prb ) []

#MACRO KiAcquireCandidateList ( prb ) [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseCandidateList ( prb, ipl ) [
    KiLowerIpl ( ipl )
]

#END

#MACRO KiInsertInSwapList ( headptr, item, fieldname ) [
    WHILE TRUE DO
        head := (headptr)^
        NOTHING (item)^.fieldname = CAST (head) TO ^VOID

        IF KeCompareSwapPtr (
            headptr, // ptr
            item, // newvalue
            head, // expectedvalue
        ) == head THEN

            // Inserted.

            BREAK
        END
    END
]

FN KeReadyInswappedThread (
    IN thread : ^KeThread,
)

    // Called by the stack swapper thread when it has inswapped a kernel stack
    // and wants to re-ready the thread.

    KeAssert ( thread^.InSwapList != FALSE )
    KeAssert ( thread^.Process^.MemoryState == KI_PROCESS_RESIDENT )

    ipl := KiAcquireThread ( thread )

    thread^.KernelStackResident = TRUE

    KiReadyThread ( thread )

    KiReleaseThread ( thread, ipl )
END

FN KeReadyInswappedProcess (
    IN process : ^KeProcess,
)

    // Called by the stack swapper thread when it has inswapped a process and
    // wants to set it RESIDENT and ready any deferred threads.

    ipl := KiAcquireSwapState ( process )

    KeAssert ( process^.MemoryState == KI_PROCESS_TRANSITION )

    process^.MemoryState = KI_PROCESS_RESIDENT

    thread := process^.SwapListHead
    process^.SwapListHead = NULLPTR

    KiReleaseSwapState ( process, ipl )

    // Now ready all the threads. Threads whose kernel stacks were swapped out
    // will get placed back on a queue and we'll see them later.

    WHILE thread DO
        nextthread := CAST thread^.ReadyEntry.Next TO ^KeThread

        ipl = KiAcquireThread ( thread )

        KiReadyThread ( thread )

        KiReleaseThread ( thread, ipl )

        thread = nextthread
    END
END

FN KeFlushThreadInSwapQueue () : ^KeThread

    // Atomically detaches the current contents of the thread stack swap list
    // and returns the head item of a singly linked list. If it was empty,
    // NULLPTR is returned.
    // Atomically fetch-and-set the head to NULLPTR.

    RETURN CAST KeFetchAndSetPtr (
        &KiStackSwapListHead, // ptr
        NULLPTR, // newvalue
    ) TO ^KeThread
END

FN KeFlushProcessInSwapQueue () : ^KeProcess

    // Atomically detaches the current contents of the process swap list
    // and returns the head item of a singly linked list. If it was empty,
    // NULLPTR is returned.

    RETURN CAST KeFetchAndSetPtr (
        &KiProcessSwapListHead, // ptr
        NULLPTR, // newvalue
    ) TO ^KeProcess
END

FN KeSetProcessOutswapped (
    IN process : ^KeProcess,
) : UWORD

    // Try to set the given process outswapped. Returns TRUE on success, FALSE
    // otherwise. If FALSE is returned, the process should be ignored by the
    // caller. If the caller is interested in the next process in the list, it
    // should grab that pointer before calling this routine.

    ipl := KiAcquireSwapState ( process )

    hadthreads := process^.SwapListHead

    IF NOT hadthreads THEN
        process^.MemoryState = KI_PROCESS_OUTSWAPPED
    END

    KiReleaseSwapState ( process, ipl )

    IF hadthreads THEN
        // Threads were enqueued to the process while it was in TRANSITION.
        // Set it RESIDENT and ready the deferred threads.

        KeReadyInswappedProcess ( process )

        RETURN FALSE
    END

    RETURN TRUE
END

FN KeFlushProcessOutSwapQueue () : ^KeProcess

    // Atomically detaches the current contents of the process outswap list
    // and returns the head item of a singly linked list. If it was empty,
    // NULLPTR is returned.

    // These processes are in TRANSITION, so the caller should call
    // KeSetProcessOutSwapped before doing anything else with them.

    RETURN CAST KeFetchAndSetPtr (
        &KiProcessOutSwapListHead, // ptr
        NULLPTR, // newvalue
    ) TO ^KeProcess
END

FN KeHarvestSwapCandidates (
    IN procid : UWORD,
) : ^KeThread

    // Scans the kernel stack swap candidate list for the given processor, marks
    // any eligible threads outswapped, and returns the head item of a singly
    // linked list of outswapped threads to process. If none, NULLPTR is
    // returned.

    head : ^KeThread = NULLPTR

    prb := KiPrbFromNumber ( procid )

    listhead := &prb^.StackSwapCandidateListHead

    ipl := KiAcquireCandidateList ( prb )

    tick := KiLowTick ()

    listentry := listhead^.Next

    WHILE listentry != listhead DO
        thread := CONTAINEROF listentry TO KeThread.WaitEntry

        // Capture the next link now since we may be about to corrupt it.

        listentry = listentry^.Next

        // Lock the thread.

        KiAcquireThreadElevated ( thread )

        IF thread^.Status == KI_THREAD_WAITING THEN
            // The thread is WAITING which means we may be able to outswap its
            // stack.

            KeAssert ( thread^.WaitMode == KE_USER_MODE )

            IF tick - thread^.StateMs < KI_STACK_SWAP_INTERVAL_MS THEN
                // This thread has been waiting for less time than the required
                // interval. No more threads after it will be eligible either,
                // so break out of the loop.

                KiReleaseThreadElevated ( thread )

                BREAK
            END

            // Remove the thread from the candidate list.

            RtlRemoveEntryList ( &thread^.WaitEntry )

            thread^.SwapCandidatePrb = NULLPTR

            IF thread^.KernelStackSwappable THEN
                // This thread is eligible.
                // Mark the thread's kernel stack outswapped; attempts to ready
                // this thread after we unlock it will cause it to be enqueued
                // to the stack swapper thread (which should be the thread we
                // are currently executing in right now).

                thread^.KernelStackResident = FALSE

                // Add to the singly linked list, which we thread through the
                // WaitEntry. It should not be possible for the thread to be
                // re-enqueued to a candidate list while it is on this singly
                // linked list (the custody of the swapper thread). We can't
                // reuse the ready queue list link because it may come into use
                // concurrently if this thread is readied while it is being
                // outswapped.

                thread^.WaitEntry.Next = CAST head TO ^VOID
                head = thread

                // Decrement the resident stack count of the process.

                process := thread^.Process

                KiAcquireSwapStateElevated ( process )

                oldcount := process^.ResidentThreadCount

                KeAssert ( oldcount != 0)
                KeAssert ( process^.MemoryState == KI_PROCESS_RESIDENT )

                process^.ResidentThreadCount = oldcount - 1

                IF oldcount == 1 THEN
                    // This was the last resident stack in the process, so mark
                    // the process in-transition and place it on the outswap
                    // list.

                    process^.MemoryState = KI_PROCESS_TRANSITION

                    KiInsertInSwapList (
                        &KiProcessOutSwapListHead, // headptr
                        process, // item
                        SwapNext, // fieldname
                    )
                END

                KiReleaseSwapStateElevated ( process )
            END
        END

        KiReleaseThreadElevated ( thread )
    END

    KiReleaseCandidateList ( prb, ipl )

    RETURN head
END

FN KiWakeSwapper ()

    // Wake the swapper.

#IF BLD_MP
    // Request the swap thread to be awoken. We can't do it here because we're
    // underneath some spinlocks whose order we would violate, so we defer it
    // until the next time IPL drops below DPC level.

    myprb := KI_CURRENT_PRB

    myprb^.WakeStackSwapper = TRUE

    KiSoftInterruptSelf (
        myprb, // prb
        KI_IPL_DPC, // ipl
    )

#ELSE
    // Wake the swap thread.

    KeSignalEvent (
        &KeStackSwapperEvent, // event
        0, // priorityboost
    )
#END

END

FN KiReadyThreadOutswappedProcess (
    IN thread : ^KeThread,
) : UWORD

    // The thread was readied while its process was outswapped, so we have to
    // enqueue it to the process's deferred ready list. Thread lock is held.

    KeAssert ( NOT thread^.InSwapList )

    // Acquire a pointer to the thread's process.

    process := thread^.Process

    // Acquire the process's swap state spinlock.

    KiAcquireSwapStateElevated ( process )

    memorystate := process^.MemoryState

    IF memorystate == KI_PROCESS_RESIDENT THEN
        // Process was in-swapped since we last checked.
        // Tell caller to re-check.

        KiReleaseSwapStateElevated ( process )

        RETURN TRUE
    END

    // The process isn't resident, so we need to enqueue the thread in its
    // swap-in list.

    thread^.ReadyEntry.Next = CAST process^.SwapListHead TO ^VOID
    process^.SwapListHead = thread

    IF memorystate == KI_PROCESS_OUTSWAPPED THEN
        // We saw the process OUTSWAPPED, so it's now our responsibility to
        // enqueue it to the swapper thread.

        process^.MemoryState = KI_PROCESS_TRANSITION

        KiInsertInSwapList (
            &KiProcessSwapListHead, // headptr
            process, // item
            SwapNext, // fieldname
        )
    END

    KiReleaseSwapStateElevated ( process )

    // Set READY and in the swap list. This is synchronized by the thread lock,
    // which is taken by the swapper before it manipulates us.

    thread^.Status = KI_THREAD_READY
    thread^.InSwapList = TRUE

    // Wake the swapper to bring in this process's page directory.

    KiWakeSwapper ()

    // Return an indication that we successfully enqueued the thread to the
    // process's deferred ready list.

    RETURN FALSE
END

FN KiReadyOutswappedThread (
    IN thread : ^KeThread,
) : UWORD

    // The thread was readied while its kernel stack was outswapped, so we have
    // to enqueue it to the swap list and request the swap thread to wake up.
    // Thread lock is held.
    //
    // Returns TRUE if we found the process in a non-resident state while
    // attempting to increment its resident stack count.

    KeAssert ( NOT thread^.InSwapList )

    // Acquire a pointer to the thread's process.

    process := thread^.Process

    // Acquire the process's swap state spinlock.

    KiAcquireSwapStateElevated ( process )

    IF process^.MemoryState != KI_PROCESS_RESIDENT THEN
        // Not resident, have caller re-check.

        KiReleaseSwapStateElevated ( process )

        RETURN TRUE
    END

    // Increment the resident stack count of the process.

    process^.ResidentThreadCount += 1

    KiReleaseSwapStateElevated ( process )

    // Set READY and in the swap list. This is synchronized by the thread lock,
    // which is taken by the swapper before it manipulates us.

    thread^.Status = KI_THREAD_READY
    thread^.InSwapList = TRUE

    // The process was still resident, so we're going to enqueue the thread
    // in the global thread in-swap list.

    KiInsertInSwapList (
        &KiStackSwapListHead, // headptr
        thread, // item
        ReadyEntry.Next, // fieldname
    )

    // Wake the swapper to bring in this thread's stack.

    KiWakeSwapper ()

    // Return an indication that we successfully enqueued ourselves to the
    // in-swap list.

    RETURN FALSE
END

FN KiInsertSwapCandidateListFunc (
    IN thread : ^KeThread,
)

    KeAssert ( KeCurrentThread () == thread )
    KeAssert ( thread^.SwapCandidatePrb == NULLPTR )

    // Insert the thread in the swap candidate list for the current processor.

    prb := KI_CURRENT_PRB

    // Stash the Prb whose candidate list we're going into.

    thread^.SwapCandidatePrb = prb

    // Acquire the Prb's candidate list lock.

    KiAcquireCandidateListElevated ( prb )

    // Insert at the tail of the list, which keeps it sorted by earliest to
    // latest sleep time.

    RtlInsertAtTailList (
        &prb^.StackSwapCandidateListHead, // head
        &thread^.WaitEntry, // entry
    )

    // Release the candidate list lock.

    KiReleaseCandidateListElevated ( prb )
END

FN KiRemoveSwapCandidateListFunc (
    IN thread : ^KeThread,
)

    KeAssert ( KeCurrentThread () == thread )
    KeAssert ( thread^.SwapCandidatePrb != NULLPTR )

    // Remove the thread from the swap candidate list.
    // We don't have to re-check that the thread wasn't removed from the
    // candidate list, because only WAITING threads are, and we ain't
    // waiting.

    prb := thread^.SwapCandidatePrb

    KiAcquireCandidateListElevated ( prb )

    RtlRemoveEntryList ( &thread^.WaitEntry )

    KiReleaseCandidateListElevated ( prb )

    // Clear the Prb pointer to indicate no longer in a list.

    thread^.SwapCandidatePrb = NULLPTR
END

FN KeAttachProcess (
    IN process : ^KeProcess,
    IN try : UWORD,
) : UWORD

    // Switch the current thread to this process's address space. It will be
    // able to fault upon its userspace and so on. Returns TRUE upon success,
    // FALSE upon failure. Failure can only occur if try is set.

    thread := KeCurrentThread ()

    KeAssert ( thread^.Process == thread^.ActualProcess )

    IF thread^.Process == process THEN
        // Already in the correct address space.

        RETURN TRUE
    END

    // Mask KAPCs since we won't be in the right address space to receive them.

    thread^.AttachIpl = KiRaiseIpl ( KI_IPL_APC )

    // Acquire the current thread's lock.

    KiAcquireThread ( thread )

    KiAcquireSwapStateElevated ( process )

    IF try AND process^.MemoryState != KI_PROCESS_RESIDENT THEN
        // An atomic try was specified. Since it's non-resident, our attempt
        // failed.

        KiReleaseSwapStateElevated ( process )

        KiReleaseThread ( thread, thread^.AttachIpl )

        RETURN FALSE
    END

    process^.ResidentThreadCount += 1
    thread^.Process = process

    IF process^.MemoryState == KI_PROCESS_RESIDENT THEN
        // Perform an immediate switch to the new process's address space.

        KiReleaseSwapStateElevated ( process )

        KiSwitchAddressSpace ( process )

        KiReleaseThread ( thread, KI_IPL_APC )

        RETURN TRUE
    END

    // The process isn't resident, so we need to enqueue the thread in its
    // swap-in list.

    thread^.ReadyEntry.Next = CAST process^.SwapListHead TO ^VOID
    process^.SwapListHead = thread

    IF process^.MemoryState == KI_PROCESS_OUTSWAPPED THEN
        // We saw the process OUTSWAPPED, so it's now our responsibility to
        // enqueue it to the swapper thread.

        process^.MemoryState = KI_PROCESS_TRANSITION

        KiInsertInSwapList (
            &KiProcessSwapListHead, // headptr
            process, // item
            SwapNext, // fieldname
        )
    END

    KiReleaseSwapStateElevated ( process )

    // Wake the swapper to bring the process in.

    KiWakeSwapper ()

    // Yield the processor. We will get scheduled back in (in the target address
    // space) when the process has been inswapped. The thread lock is
    // automatically released.

    KiYield (
        thread, // thread
        KI_CURRENT_PRB, // prb
    )

    // Lower to APC level.

    KiLowerIpl ( KI_IPL_APC )

    RETURN TRUE
END

FN KeDetachProcess (
    IN process : ^KeProcess,
)

    // Detach from the process that was previously attached to.

    thread := KeCurrentThread ()

    KeAssert ( thread^.Process == process )

    oldprocess := thread^.Process

    IF oldprocess == thread^.ActualProcess THEN
        // We weren't attached.

        LEAVE
    END

    // Lock the thread.

    KiAcquireThread ( thread )

    // Lock the old process's swap state.

    KiAcquireSwapStateElevated ( oldprocess )

    KeAssert ( oldprocess^.MemoryState == KI_PROCESS_RESIDENT )
    KeAssert ( thread^.ActualProcess^.MemoryState == KI_PROCESS_RESIDENT )

    // Decrement the resident stack count, since we're leaving.

    oldcount := oldprocess^.ResidentThreadCount

    KeAssert ( oldcount != 0 )

    oldprocess^.ResidentThreadCount = oldcount - 1

    // Perform a memory barrier to ensure the load of ResidentThreadCount and
    // ThreadCount are not reordered with respect to one another, which could
    // lead to problems below.

    KeMemoryBarrier ()

    IF oldprocess^.ThreadCount != 0 AND
        oldcount == 1 THEN

        // This process has threads, and we just decremented its resident stack
        // count to 0. We need to enqueue it to be outswapped.

        oldprocess^.MemoryState = KI_PROCESS_TRANSITION

        KiInsertInSwapList (
            &KiProcessOutSwapListHead, // headptr
            process, // item
            SwapNext, // fieldname
        )

        // Wake the swapper to get it to deal with this outswapped process.

        KiWakeSwapper ()
    END

    // Release the swap state.

    KiReleaseSwapStateElevated ( oldprocess )

    // Switch back to our real address space.

    thread^.Process = thread^.ActualProcess

    KiSwitchAddressSpace ( thread^.ActualProcess )

    // Release thread lock, lower IPL, unmask APCs.

    KiReleaseThread ( thread, thread^.AttachIpl )
END