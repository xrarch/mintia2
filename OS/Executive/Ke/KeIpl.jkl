//
// Implements support for software Interrupt Priority Levels (IPLs).
//

#INCLUDE "Ki.hjk"

#MACRO KiAcknowledgeSoftwareInterrupt ( prb, ipl ) [
#IF BLD_CHK
    IF NOT ipl THEN
        KeCrash ( "KiASI IPL = 0\n" )
    END
#END

    // Note that we subtract 1 from the IPL shift so that we can do a right
    // shift by IPL to check for pending bits later (which is the hotter path).
    // Also this assumes interrupts disabled.

#IF BLD_MP
    KeMaskUlong (
        &prb^.PendingSoftwareInterrupts, // ptr
        ~(1 << (ipl - 1)), // mask
    )
#ELSE
    NOTHING (prb)^.PendingSoftwareInterrupts &= ~(1 << (ipl - 1))
#END
]

FNPTR KiSoftwareInterruptHandlerF (
    IN prb : ^KiPrb,
)

FN (KiSoftwareInterruptHandlerF) KiApcInterrupt (
    IN prb : ^KiPrb,
)

    // Atomically clear the pending APC interrupt.

    KiAcknowledgeSoftwareInterrupt (
        prb, // prb
        KI_IPL_APC, // ipl
    )

    current := prb^.CurrentThread

    prb^.Ipl = KI_IPL_APC

    KiEnableInterrupts ()

    KiDispatchApcQueue ( current )

    KiDisableInterrupts ()
END

FN (KiSoftwareInterruptHandlerF) KiDpcInterrupt (
    IN prb : ^KiPrb,
)

    // Atomically clear the pending DPC interrupt.

    KiAcknowledgeSoftwareInterrupt (
        prb, // prb
        KI_IPL_DPC, // ipl
    )

    prb^.Ipl = KI_IPL_DPC

    KiEnableInterrupts ()

    KI_TO_GLOBAL_PRB ( prb )

    IF NOT RtlEmptyList ( &prb^.DpcListHead ) THEN
        KiDispatchDpcQueue ( prb )
    END

    IF prb^.QuantumEnd THEN
        prb^.QuantumEnd = FALSE

        KiQuantumEnd ( prb )
    END

    IF prb^.NextThread THEN
        // A next thread was selected to preempt the current one.
        // Switch to it immediately.

        KiPreemptThread ( prb )
    END

    KiDisableInterrupts ()
END

#SECTION "text"
KiSoftwareInterruptPriorityTable : KiSoftwareInterruptHandlerF[8] = {
    [0] = NULLPTR,
    [1] = &KiApcInterrupt,
    [2] = &KiDpcInterrupt,
    [3] = &KiDpcInterrupt,
    [4] = &KiDpcInterrupt,
    [5] = &KiDpcInterrupt,
    [6] = &KiDpcInterrupt,
    [7] = &KiDpcInterrupt,
}

FN KiDispatchSoftwareInterrupts (
    IN newipl : UWORD,
)

    oldstate := KiDisableInterrupts ()

    prb := KI_CURRENT_PRB_LOCAL
    pending := prb^.PendingSoftwareInterrupts & (0xF << newipl)

    WHILE pending DO
        KiSoftwareInterruptPriorityTable[pending] (
            prb, // prb
        )

#IF KI_VOLATILE_LOCAL_PRB
        // Recapture the Prb since it might have changed due to activity of the
        // scheduler while interrupts were enabled.

        prb = KI_CURRENT_PRB_LOCAL
#END

        pending = prb^.PendingSoftwareInterrupts & (0xF << newipl)
    END

    prb^.Ipl = newipl

    KiRestoreInterrupts ( oldstate )
END