//
// Implements support for software Interrupt Priority Levels (IPLs).
//

#INCLUDE "Ki.hjk"

#MACRO KiAcknowledgeSoftwareInterrupt ( prb, ipl ) [
#IF BLD_CHK
    IF NOT ipl THEN
        KeCrash ( "KiASI IPL = 0\n" )
    END
#END

    // Note that we subtract 1 from the IPL shift so that we can do a right
    // shift by IPL to check for pending bits later (which is the hotter path).
    // Also this assumes interrupts disabled.

#IF BLD_MP
    KeMaskUlong (
        &prb^.PendingSoftwareInterrupts, // ptr
        ~(1 << (ipl - 1)), // mask
    )
#ELSE
    NOTHING (prb)^.PendingSoftwareInterrupts &= ~(1 << (ipl - 1))
#END
]

FNPTR KiSoftwareInterruptHandlerF (
    IN prb : ^KiPrb,
)

FN (KiSoftwareInterruptHandlerF) KiApcInterrupt (
    IN prb : ^KiPrb,
)

    // Atomically clear the pending APC interrupt.

    KiAcknowledgeSoftwareInterrupt (
        prb, // prb
        KI_IPL_APC, // ipl
    )

    current := prb^.CurrentThread

    prb^.Ipl = KI_IPL_APC

    KiEnableInterrupts ()

    KiDispatchApcQueue ( current )

    KiDisableInterrupts ()
END

FN (KiSoftwareInterruptHandlerF) KiDpcInterrupt (
    IN prb : ^KiPrb,
)

    // Atomically clear the pending DPC interrupt.

    KiAcknowledgeSoftwareInterrupt (
        prb, // prb
        KI_IPL_DPC, // ipl
    )

    prb^.Ipl = KI_IPL_DPC

    KiEnableInterrupts ()

    KI_TO_GLOBAL_PRB ( prb )

    IF NOT RtlEmptyList ( &prb^.DpcListHead ) THEN
        KiDispatchDpcQueue ( prb )
    END

    IF prb^.QuantumEnd THEN
        prb^.QuantumEnd = FALSE

        KiQuantumEnd ( prb )
    END

    IF prb^.NextThread THEN
        // A next thread was selected to preempt the current one.
        // Switch to it immediately.

        KiPreemptThread ( prb )
    END

    KiDisableInterrupts ()
END

#SECTION "text"
KiSoftwareInterruptPriorityTable : KiSoftwareInterruptHandlerF[8] = {
    [0] = NULLPTR,
    [1] = &KiApcInterrupt,
    [2] = &KiDpcInterrupt,
    [3] = &KiDpcInterrupt,
    [4] = &KiDpcInterrupt,
    [5] = &KiDpcInterrupt,
    [6] = &KiDpcInterrupt,
    [7] = &KiDpcInterrupt,
}

FN KiDispatchSoftwareInterrupts (
    IN newipl : UWORD,
)

    oldstate := KiDisableInterrupts ()

    prb := KI_CURRENT_PRB_LOCAL
    pending := prb^.PendingSoftwareInterrupts & (0xF << newipl)

    WHILE pending DO
        KiSoftwareInterruptPriorityTable[pending] (
            prb, // prb
        )

#IF KI_VOLATILE_LOCAL_PRB
        // Recapture the Prb since it might have changed due to activity of the
        // scheduler while interrupts were enabled.

        prb = KI_CURRENT_PRB_LOCAL
#END

        pending = prb^.PendingSoftwareInterrupts & (0xF << newipl)
    END

    prb^.Ipl = newipl

    KiRestoreInterrupts ( oldstate )
END

FN KiClockTick (
    IN intervalms : UWORD,
    IN usermode : UWORD,
    IN previpl : UWORD,
)

    // Called from interrupt context by the interval timer.
    // Responsible for noticing when the earliest timer has expired, and
    // enqueuing the expiration DPC to process them. Also triggers the
    // scheduler when the current thread's quantum expires.

    prb := KI_CURRENT_PRB

    // Increment count of clock ticks on this processor.

    RtlAddUlongToUquad ( &prb^.ClockTicks, intervalms )

    // Update time spent at previous IPL on this processor.

    RtlAddUlongToUquad ( &prb^.IplTimes[previpl], intervalms )

    // Check if the earliest timer has expired.

    IF RtlUquadGteqUquad ( &prb^.ClockTicks, &prb^.EarliestTimerMs ) THEN
        // Enqueue the timer expiration DPC.

        KeEnqueueDpc (
            &prb^.TimerExpirationDpc, // dpc
            0, // context1
            0, // context2
        )
    END

    thread := prb^.CurrentThread

    IF prb^.DpcActive THEN
        // Update time spent executing DPCs on this processor.

        RtlAddUlongToUquad ( &prb^.DpcTimeMs, intervalms )

    ELSEIF thread THEN
        IF usermode THEN
            // Update time this thread has spent in usermode.

            RtlAddUlongToUquad ( &thread^.UserTimeMs, intervalms )

        ELSEIF previpl == KI_IPL_DPC THEN
            // Update time this thread has spent at elevated IPL.

            RtlAddUlongToUquad ( &thread^.DpcTimeMs, intervalms )

        ELSE
            // Update time this thread has spent in the system.

            RtlAddUlongToUquad ( &thread^.SystemTimeMs, intervalms )
        END
    END

    // Increment the timeshared enqueue index.

    ridx := prb^.CalendarRunIndex
    idx := prb^.CalendarEnqueueIndex

    IF idx == ridx THEN
        prb^.CalendarEnqueueIndex = (idx + 1) % KI_TIMESHARED_QUEUES

        IF RtlEmptyList ( &prb^.CalendarListHeads[ridx] ) THEN
            prb^.CalendarRunIndex = prb^.CalendarEnqueueIndex
        END
    END

    IF NOT thread THEN
        // No thread yet. This can happen during early init.

        LEAVE
    END

    IF thread == &prb^.IdleThread THEN
        // If we're in the idle thread there's nothing to switch to and we'd
        // only waste CPU cycles trying, so don't quantum end.

#IF BLD_MP
        // Do tick down the counter until we try to steal work again.

        IF prb^.StealCount >= intervalms THEN
            prb^.StealCount -= intervalms

        ELSE
            prb^.StealCount = 0
        END
#END

        LEAVE
    END

    // Decrement thread quantum.

    q := thread^.RemainingQuantum

    IF NOT q THEN
        // Already decremented to zero and requested a quantum end.

        LEAVE
    END

    IF q < KI_QUANTUM_PER_TICK THEN
        q = 0

    ELSE
        q -= KI_QUANTUM_PER_TICK
    END

    thread^.RemainingQuantum = q

    // If quantum has run down, request a quantum end interrupt at IPLDPC.

    IF NOT q THEN
        prb^.QuantumEnd = TRUE

        // Have to use an atomic OR here in case an IPI comes in.

        KiSoftInterruptSelf ( prb, KI_IPL_DPC )
    END
END