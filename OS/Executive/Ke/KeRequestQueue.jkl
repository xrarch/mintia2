//
// Implements a spinlock-guarded request queue. Intended for devices.
//

#INCLUDE "Ki.hjk"

#IF BLD_MP

#MACRO KiAcquireRequestQueue ( queue ) [
    KiAcquireSpinlockRaise ( &(queue)^.Spinlock )
]

#MACRO KiReleaseRequestQueue ( queue, oldipl ) [
    KiReleaseSpinlockLower (
        &(queue)^.Spinlock, // spinlock
        oldipl, // oldipl
    )
]

#ELSE

#MACRO KiAcquireRequestQueue ( queue ) [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseRequestQueue ( queue, oldipl ) [
    KiLowerIpl ( oldipl )
]

#END

EXPORT FN KeInitializeRequestQueue (
    IN queue : ^KeRequestQueue,
    IN sortpolicy : UWORD,
    IN startfunc : KeRequestStartF,
    IN completefunc : KeRequestCompleteF,
    IN maximum : UWORD,
)

    // Initialize a request queue.

    IF sortpolicy != KE_REQUEST_QUEUE_FIFO THEN
        // Initialize the roots of the pairing heaps.

        queue^.Head.Sorted.Roots[0] = NULLPTR
        queue^.Head.Sorted.Roots[1] = NULLPTR
        queue^.CurrentQueueIndex = 0

    ELSE
        // Initialize the linked list.

        RtlInitializeList ( &queue^.Head.List )
    END

    queue^.SortPolicy = sortpolicy
    queue^.Current = 0
    queue^.Maximum = maximum
    queue^.StartFunction = startfunc
    queue^.CompleteFunction = completefunc

#IF BLD_MP
    KiInitializeSpinlock ( &queue^.Spinlock )
#END

END

FN (RtlLessThanF) KiCompareRequests (
    IN a : ^RtlHeapEntry,
    IN b : ^RtlHeapEntry,
) : UWORD

    request1 := CONTAINEROF a TO KeRequestEntry.Entry.Sorted
    request2 := CONTAINEROF b TO KeRequestEntry.Entry.Sorted

    RETURN request1^.SortKey < request2^.SortKey
END

EXPORT FN KeInsertRequestQueue (
    IN queue : ^KeRequestQueue,
    IN request : ^KeRequestEntry,
)

    // Insert a request into the queue, and start it if possible.

    ipl := KiAcquireRequestQueue ( queue )

    IF queue^.Current + request^.Cost <= queue^.Maximum THEN
        // Not busy, set it busy.

        queue^.Current += request^.Cost
        queue^.Pivot = request^.SortKey

        request^.Status = KI_REQUEST_CURRENT

        // Start the request.

        queue^.StartFunction ( request )

    ELSEIF queue^.SortPolicy THEN
        // This is a sorted request queue.

        // The queue is busy, so insert the request into the appropriate
        // priority queue.

        current := queue^.CurrentQueueIndex

        IF request^.SortKey <= queue^.Pivot THEN
            // We are currently processing entries with a key larger than the
            // current pivot. Since we're less or equal, toggle the index to
            // insert us into the "next" queue.

            current $= 1
        END

        RtlInsertIntoHeap (
            &KiCompareRequests, // comparisonfunc
            &queue^.Head.Sorted.Roots[current], // rootptr
            &request^.Entry.Sorted, // entry
        )

        // Save which heap we stored it in.

        request^.HeapIndex = current

        // Set inserted.

        request^.Status = KI_REQUEST_ENQUEUED

    ELSE
        // This is a non-sorted request queue.

        // The queue is busy, so insert the request at the tail of the list.

        RtlInsertAtTailList (
            &queue^.Head.List, // head
            &request^.Entry.List, // entry
        )

        // Set inserted.

        request^.Status = KI_REQUEST_ENQUEUED
    END

    KiReleaseRequestQueue ( queue, ipl )
END

FN KiStartRequests (
    IN queue : ^KeRequestQueue,
)

    // Start requests from the queue until the maximum cost is reached. Queue
    // lock is held.

@Again
    request : ^KeRequestEntry = NULLPTR

    IF queue^.SortPolicy == KE_REQUEST_QUEUE_FIFO AND
        NOT RtlEmptyList ( &queue^.Head.List ) THEN

        // Check the FIFO queue.

        request = CONTAINEROF queue^.Head.List.Next TO KeRequestEntry.Entry.List

    ELSE
        // Check the current queue.

        current := queue^.CurrentQueueIndex

        IF queue^.Head.Sorted.Roots[current] THEN
            request = CONTAINEROF queue^.Head.Sorted.Roots[current]
                TO KeRequestEntry.Entry.Sorted

        ELSEIF queue^.Head.Sorted.Roots[current $ 1] THEN
            request = CONTAINEROF queue^.Head.Sorted.Roots[current $ 1]
                TO KeRequestEntry.Entry.Sorted

            queue^.CurrentQueueIndex = current $ 1
        END
    END

    IF request AND queue^.Current + request^.Cost <= queue^.Maximum THEN
        IF queue^.SortPolicy == KE_REQUEST_QUEUE_FIFO THEN
            // Remove from FIFO list.

            RtlRemoveEntryList ( &request^.Entry.List )

        ELSE
            // Remove from heap.

            RtlRemoveFromHeap (
                &KiCompareRequests, // comparisonfunc
                &queue^.Head.Sorted.Roots[request^.HeapIndex], // rootptr
                &request^.Entry.Sorted, // entry
            )
        END

        // Start the next request.

        queue^.Current += request^.Cost
        queue^.Pivot = request^.SortKey

        request^.Status = KI_REQUEST_CURRENT

        // Start the request.

        queue^.StartFunction ( request )

        // Find another one.

        GOTO Again
    END
END

EXPORT FN KeCompleteRequestQueue (
    IN queue : ^KeRequestQueue,
    IN request : ^KeRequestEntry,
) : UWORD

    // Complete the given request (if it hasn't already been) and start any that
    // can now be started. Returns TRUE if completed, FALSE otherwise.

    completed := FALSE

    ipl := KiAcquireRequestQueue ( queue )

#IF BLD_CHK
    IF request^.Status != KI_REQUEST_CURRENT AND
        request^.Status != KI_REQUEST_CANCELLED THEN

        KeCrash ( "KeCompleteRequestQueue: weird status %u\n", request^.Status )
    END
#END

    IF request^.Status == KI_REQUEST_CURRENT THEN
        completed = TRUE

        // Set as completed.

        request^.Status = KI_REQUEST_COMPLETED

        // The request is still current, so decrement the current cost.

        queue^.Current -= request^.Cost

        // Invoke callback to free up any structures associated with this
        // entry's cost.

        queue^.CompleteFunction (
            request, // request
            FALSE, // cancelled
        )

        // Try to start any requests that can be started.

        KiStartRequests ( queue )
    END

    KiReleaseRequestQueue ( queue, ipl )

    RETURN completed
END

EXPORT FN KeCancelRequestQueue (
    IN queue : ^KeRequestQueue,
    IN request : ^KeRequestEntry,
) : UWORD

    // Cancel the given request. Returns TRUE if cancelled, FALSE otherwise.

    cancelled := FALSE

    ipl := KiAcquireRequestQueue ( queue )

#IF BLD_CHK
    IF request^.Status != KI_REQUEST_ENQUEUED AND
        request^.Status != KI_REQUEST_CURRENT AND
        request^.Status != KI_REQUEST_COMPLETED THEN

        KeCrash ( "KeCancelRequestQueue: weird status %u\n", request^.Status )
    END
#END

    status := request^.Status

    IF status != KI_REQUEST_COMPLETED THEN
        // Hasn't been completed yet, which means its still cancellable.

        cancelled = TRUE

        request^.Status = KI_REQUEST_CANCELLED

        IF status == KI_REQUEST_ENQUEUED THEN
            // It was enqueued, so we have to remove it from the queue
            // structure.

            IF queue^.SortPolicy == KE_REQUEST_QUEUE_FIFO THEN
                // Remove from the FIFO list.

                RtlRemoveEntryList ( &request^.Entry.List )

            ELSE
                // Remove from the appropriate min heap.

                RtlRemoveFromHeap (
                    &KiCompareRequests, // comparisonfunc
                    &queue^.Head.Sorted.Roots[request^.HeapIndex], // rootptr
                    &request^.Entry.Sorted, // entry
                )
            END

        ELSE
            // It was current, so we have to clean up the cost.

            queue^.Current -= request^.Cost

            // Invoke callback to free up any structures associated with this
            // entry's cost.

            queue^.CompleteFunction (
                request, // request
                TRUE, // cancelled
            )

            // Try to start any requests that can be started.

            KiStartRequests ( queue )
        END
    END

    KiReleaseRequestQueue ( queue, ipl )

    RETURN cancelled
END