//
// Implements support for the interrupt object.
//

#INCLUDE "Ki.hjk"

#IF BLD_MP

KiInterruptAssignmentCounter : ULONG = 0

#END

FN (KeInterruptF) KiUnexpectedInterrupt (
    IN interrupt : ^KeInterrupt,
    IN context : ^OsContext,
)

    KeCrash ( "Unexpected interrupt\n" )
END

#SECTION "text"
PUBLIC KiUnexpectedInterruptObject : KeInterrupt = {
    [Routine] = &KiUnexpectedInterrupt,
    [Ipl] = KI_IPL_HIGH,
#IF BLD_MP
    [Spinlock] = KI_INITIAL_SPINLOCK,
#END
}

EXPORT FN KeInitializeInterrupt (
    IN interrupt : ^KeInterrupt,
    IN routine : KeInterruptF,
    IN context : UWORD,
    IN vector : UWORD,
    IN ipl : UWORD,
    IN edgetriggered : UWORD,
    IN sharevector : UWORD,
    IN procid : UWORD,
)

    // Initialize an interrupt object.

#IF BLD_MP
    IF procid == KE_AUTOMATIC_INTERRUPT_PROCESSOR THEN
        // Automatically choose the processor ID that should service this
        // interrupt. Use an incrementing counter to spread the load.

        procid = KeIncrementUlong (
            &KiInterruptAssignmentCounter, // ptr
            1, // ulong
        )

        procid %= KeLoaderBlock.ProcessorCount
    END

#ELSE
    procid = 0
#END

    interrupt^.Routine = routine
    interrupt^.Context = context
    interrupt^.Vector = vector
    interrupt^.Ipl = ipl
    interrupt^.EdgeTriggered = edgetriggered
    interrupt^.ShareVector = sharevector
    interrupt^.ProcessorId = procid
    interrupt^.Connected = FALSE

#IF BLD_MP
    KiInitializeSpinlock ( &interrupt^.Spinlock )
#END

END

EXPORT FN KeSynchronizeWithInterrupt (
    IN interrupt : ^KeInterrupt,
) : UWORD

    // Synchronize with the ISR by raising IPL to match its level and
    // acquiring its spinlock.

    oldipl := HalRaiseHardwareIpl ( interrupt^.Ipl )

#IF BLD_MP
    KiAcquireSpinlock ( &interrupt^.Spinlock )
#END

    RETURN oldipl
END

EXPORT FN KeDesynchronizeFromInterrupt (
    IN interrupt : ^KeInterrupt,
    IN oldipl : UWORD,
)

    // Desynchronize from the ISR by releasing its spinlock and lowering IPL.

#IF BLD_MP
    KiReleaseSpinlock ( &interrupt^.Spinlock )
#END

    HalLowerHardwareIpl ( oldipl )
END

#IF BLD_MP

KiNextWorkBalanceMs : WORD = KI_WORK_BALANCE_INTERVAL

#END

FN KiClockTick (
    IN intervalms : UWORD,
    IN usermode : UWORD,
    IN previpl : UWORD,
)

    // Called from interrupt context by the interval timer.
    // Responsible for noticing when the earliest timer has expired, and
    // enqueuing the expiration DPC to process them. Also triggers the
    // scheduler when the current thread's quantum expires.

    prb := KI_CURRENT_PRB

    thread := prb^.CurrentThread

    IF NOT thread THEN
        // No thread yet. This can happen during early init.

        LEAVE
    END

    // Increment count of clock ticks on this processor.

    RtlAddUlongToUquad ( &prb^.ClockTicks, intervalms )

    // Update time spent at previous IPL on this processor.

    RtlAddUlongToUquad ( &prb^.IplTimes[previpl], intervalms )

    IF prb^.DpcActive THEN
        // Update time spent executing DPCs on this processor.

        RtlAddUlongToUquad ( &prb^.DpcTimeMs, intervalms )

    ELSEIF thread THEN
        IF usermode THEN
            // Update time this thread has spent in usermode.

            RtlAddUlongToUquad ( &thread^.UserTimeMs, intervalms )

        ELSEIF previpl == KI_IPL_DPC THEN
            // Update time this thread has spent at elevated IPL.

            RtlAddUlongToUquad ( &thread^.DpcTimeMs, intervalms )

        ELSE
            // Update time this thread has spent in the system.

            RtlAddUlongToUquad ( &thread^.SystemTimeMs, intervalms )
        END
    END

    // Increment the timeshared enqueue index.

    ridx := prb^.CalendarRunIndex
    idx := prb^.CalendarEnqueueIndex

    IF idx == ridx THEN
        prb^.CalendarEnqueueIndex = (idx + 1) % KI_TIMESHARED_QUEUES

        IF RtlEmptyList ( &prb^.CalendarListHeads[ridx] ) THEN
            prb^.CalendarRunIndex = prb^.CalendarEnqueueIndex
        END
    END

    currentticks : RtlUquad

#IF BLD_MP
    IF prb^.Id == 0 THEN
#END

        // If we're processor zero, then update the time.

        KiUpdateTime ( prb )

        RtlMoveUquad (
            &currentticks, // dest
            &prb^.ClockTicks, // src
        )

#IF BLD_MP
        KiNextWorkBalanceMs -= intervalms

        IF KiNextWorkBalanceMs <= 0 THEN
            // Enqueue the work balance DPC.

            KiNextWorkBalanceMs = KI_WORK_BALANCE_INTERVAL

            KeEnqueueDpc (
                &KiWorkBalanceDpc, // dpc
                0, // context1
                0, // context2
            )
        END

    ELSE
        KiCaptureCurrentTicks ( &currentticks )
    END
#END

    // Check if the earliest timer has expired.

    IF RtlUquadGteqUquad ( &currentticks, &prb^.EarliestTimerMs ) THEN
        // Enqueue the timer expiration DPC.

        KeEnqueueDpc (
            &prb^.TimerExpirationDpc, // dpc
            0, // context1
            0, // context2
        )
    END

    IF thread == &prb^.IdleThread THEN
        // If we're in the idle thread there's nothing to switch to and we'd
        // only waste CPU cycles trying, so don't quantum end.

        LEAVE
    END

    // Increment the time that the current thread ran for.

    thread^.RunMs += intervalms << KI_TICK_SHIFT

    // Update the interactivity score.
    // If an update must be made to the thread's interactivity, it is deferred
    // to a lower IPL.

    KiUpdateInteractivity (
        thread, // thread
        TRUE, // deferupdate
    )

    // Decrement thread quantum.

    q := thread^.RemainingQuantum

    IF NOT q THEN
        // Already decremented to zero and requested a quantum end.

        LEAVE
    END

    q -= intervalms

    // If quantum has run down, request a quantum end interrupt at IPLDPC.

    IF q <= 0 THEN
        prb^.QuantumEnd = TRUE

        // Have to use an atomic OR here in case an IPI comes in.

        KiSoftInterruptSelf ( prb, KI_IPL_DPC )

        q = 0
    END

    thread^.RemainingQuantum = q
END