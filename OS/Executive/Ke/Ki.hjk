//
// Private header file for the Kernel component of the MINTIA Executive.
//

#INCLUDE "<ll>/Rtl.hjk"
#INCLUDE "<ll>/System/OsProcess.hjk"

#INCLUDE "<inc>/Hal.hjk"
#INCLUDE "<inc>/Ke.hjk"
#INCLUDE "../../Loader/Headers/Loader.hjk"

#DEFINE KI_IPL_LOW 0
#DEFINE KI_IPL_APC 1
#DEFINE KI_IPL_DPC 2
#DEFINE KI_IPL_CLOCK 29
#DEFINE KI_IPL_IPI 30
#DEFINE KI_IPL_HIGH 31
#DEFINE KI_IPL_MAX 32

#IF ( STRCMP ARCHITECTURE "xr17032" )
    #INCLUDE "xr17032/Ki.hjk"

#ELSEIF ( STRCMP ARCHITECTURE "fox32" )
    #INCLUDE "fox32/Ki.hjk"

#ELSE
    #ERROR "Unknown architecture\n"
#END

#DEFINE KI_VOLATILE_LOCAL_PRB ( AND ( NOT KI_VIRTUAL_PRB ) BLD_MP )

#IF KI_VIRTUAL_PRB

#MACRO KiToGlobalPrb ( prb ) [
    NOTHING (prb) = (prb)^.RealVirtual
]

#ELSE

#MACRO KiToGlobalPrb ( prb ) []

#END

// Default quantum is 30ms.

#DEFINE KI_DEFAULT_QUANTUM 30

// Number of timeshared ready queues.

#DEFINE KI_TIMESHARED_QUEUES 32

// Distance from the enqueue pointer to place a thread at priority zero into the
// circular timeshared ready queues.

#DEFINE KI_TIMESHARED_DISTANCE [(OS_PRIORITY_HIGH_USER + 1)]

// Interval in milliseconds at which to perform global load balancing.

#DEFINE KI_WORK_BALANCE_INTERVAL 1000

// Interval in milliseconds for which a thread must be asleep before we outswap
// its stack.

#DEFINE KI_STACK_SWAP_INTERVAL_MS 10000

// Minimum load to steal threads from a processor.
// This is a count of threads on its ready queue.

#DEFINE KI_STEAL_LOAD 1

#DEFINE KI_TICK_SHIFT 10

// These are the different events that can be posted to an idle processor that
// would normally cause a source processor to spin-wait, but that wait can be
// avoided in the case the target is idle.

#DEFINE KI_DEFERRED_IDLE_TB_SHOOTDOWN 1
#DEFINE KI_DEFERRED_IDLE_ICACHE_SHOOTDOWN 2
#DEFINE KI_DEFERRED_IDLE_DCACHE_SHOOTDOWN 4

// Note that we subtract 1 from the IPL shift so that we can do a right
// shift by IPL to check for pending bits later (which is the hotter path).

#MACRO KiPendingIpl ( ipl ) [
     (1 << ((ipl) - 1))
]

// Fields within the stashed thread info.

#DEFINE KI_STASHED_PRIORITY_SHIFT 0
#DEFINE KI_STASHED_PRIORITY_MASK 0xFF

#DEFINE KI_STASHED_INTERACTIVE_SHIFT 8
#DEFINE KI_STASHED_INTERACTIVE_MASK 0xFF

#DEFINE KI_STASHED_IDLE_SHIFT 16
#DEFINE KI_STASHED_IDLE_MASK 0xFF

#MACRO KiCurrentThreadPriority ( stash ) [
    (((stash) >> KI_STASHED_PRIORITY_SHIFT) & KI_STASHED_PRIORITY_MASK)
]

#MACRO KiCurrentThreadInteractivity ( stash ) [
    (((stash) >> KI_STASHED_INTERACTIVE_SHIFT) & KI_STASHED_INTERACTIVE_MASK)
]

#MACRO KiCurrentThreadIdle ( stash ) [
    (((stash) >> KI_STASHED_IDLE_SHIFT) & KI_STASHED_IDLE_MASK)
]

#MACRO KiSetPriorityInStash ( stash, priority ) [
    (((stash) & ~KI_STASHED_PRIORITY_MASK) |
        (priority << KI_STASHED_PRIORITY_SHIFT))
]

#MACRO KiSetInteractivityInStash ( stash, interactive ) [
    (((stash) & ~KI_STASHED_INTERACTIVE_MASK) |
        (interactive << KI_STASHED_INTERACTIVE_SHIFT))
]

#MACRO KiSetIdleInStash ( stash, idle ) [
    (((stash) & ~KI_STASHED_IDLE_MASK) |
        (idle << KI_STASHED_IDLE_SHIFT))
]

#IF BLD_MP

FNPTR KiIpiF (
    IN context1 : UWORD,
    IN context2 : UWORD,
)

#END

// The per-processor block (Prb) is an architectural page size, but is at
// minimum 4KB. It contains all per-processor information.

STRUCT KiPrb

#IF BLD_MP
    // Give the spinlocks their own cache lines.

    DpcQueueLock : KiSpinlock,
    CacheAlign1 : UBYTE[KI_CACHE_ALIGN - SIZEOF KiSpinlock],

    ReadyQueueLock : KiSpinlock,
    CacheAlign2 : UBYTE[KI_CACHE_ALIGN - SIZEOF KiSpinlock],

    TimerTreeLock : KiSpinlock,
    CacheAlign3 : UBYTE[KI_CACHE_ALIGN - SIZEOF KiSpinlock],

    StackSwapListLock : KiSpinlock,
    CacheAlign4 : UBYTE[KI_CACHE_ALIGN - SIZEOF KiSpinlock],

    IpiFunction : KiIpiF,

    IdlePrbListEntry : RtlListEntry,

    IpiContext1 : UWORD,
    IpiContext2 : UWORD,

    IpiSpin : ULONG,

    IpiPendingSet : ULONG,
#END

#IF ( STRCMP PLATFORM "XRstation" )
    LsicBase : ^VOID,
#END

    TimerTreeRoot : ^RtlHeapEntry,

    IrqDispatchTable : ^^KeInterrupt,
    IdleStackBase : ^VOID,

#IF KI_VIRTUAL_PRB
    RealVirtual : ^KiPrb,
#END

    FrozenContext : ^OsContext,

    // Idle threads (priority 0) go on this list.

    IdleListHead : RtlListEntry,

    TimerInterrupt : KeInterrupt,

#IF ( STRCMP ARCHITECTURE "xr17032" )
    AsidSequenceNumber : RtlUquad,
    NextAsid : UINT,
#END

    KernelStackTop : ^VOID,
    CurrentThread : ^KeThread,
    NextThread : ^KeThread,

    QuickPte : ^VOID,

    DpcListHead : RtlListEntry,

    StackSwapCandidateListHead : RtlListEntry,

    TimerExpirationDpc : KeDpc,

    PendingSoftwareInterrupts : ULONG,

    // 32-bit mask where a set bit indicates a real time queue that has at least
    // one thread.

    RealTimeReady : ULONG,

    // 32-bit mask where a set bit indicates a timeshared queue that has at
    // least one thread.

    CalendarReady : ULONG,

#IF BLD_MP
    // 32-bit count of threads enqueued ready on this processor.

    Load : ULONG,

    IdleDeferredIpiEvents : ULONG,

    StashedCurrentThreadInfo : ULONG,
#END

    Id : UINT,

    Ipl : UBYTE, // ASM routines assume this is a byte size.
    QuantumEnd : UBYTE,
    DpcActive : UBYTE,
    CalendarRunIndex : UBYTE,
    CalendarEnqueueIndex : UBYTE,
    CheckInteractivity : UBYTE,

#IF BLD_MP
    WakeStackSwapper : UBYTE,
    StealWork : UBYTE,
    InIdleLoop : UBYTE,
#END

    // Put big stuff at the end to make sure the common fields are readily in
    // reach of immediate offset ranges on various architectures.

    IdleThread : KeThread,

#IF BLD_MP
    IpiInterrupt : KeInterrupt,
#END

    ClockTicks : RtlUquad,
    DpcTimeMs : RtlUquad,
    UserTimeMs : RtlUquad,
    SystemTimeMs : RtlUquad,
    EarliestTimerMs : RtlUquad,

    // Inspired by ULE of FreeBSD:
    //
    // The real time list heads are indexed by thread priority, with all ready
    // threads of the same priority being chained together off of that list
    // head. The scheduler will *always* select the highest priority available
    // thread from the real time ready queues if one exists.
    //
    // The threads in this queue come from those with "real time priority", and
    // also those with lower priority that have been temporarily designated as
    // as "interactive" in order to increase responsiveness.

    RealTimeListHeads : RtlListEntry[OS_PRIORITY_MAX],

    // The calendar list heads form a "clock" whose hand ticks once every 20ms,
    // or the length of the system tick, whichever is greater. When the real
    // time queues are empty, the next thread to run is taken from the queue
    // pointed to by the CalendarRunIndex. After all threads are emptied from
    // this queue (i.e. they have all gotten a chance to run), the
    // CalendarRunIndex is incremented to the next queue which contains threads,
    // in order to make sure the processor doesn't waste time idling.
    //
    // The CalendarEnqueueIndex is the ticking hand. Newly enqueued threads are
    // inserted into the queue pointed to by:
    //
    //   CalendarEnqueueIndex + KI_TIMESHARED_DISTANCE - thread^.Priority
    //
    // That is, threads are placed into a "further" queue when they have lower
    // priority. This accomplishes a relative ratio of CPU time granted to each
    // thread based on their priorities.
    //
    // If CalendarRunIndex is incremented and equals CalendarEnqueueIndex, the
    // latter is incremented in order to make sure the queue being run is
    // flushed before more stuff is put on it.
    //
    // Threads on these lists are called "timeshared threads".

    CalendarListHeads : RtlListEntry[KI_TIMESHARED_QUEUES],

    IplTimes : RtlUquad[KI_IPL_MAX],
END

EXTERN FN KiLowerIpl (
    IN newipl : UWORD,
)

EXTERN FN KiCurrentIpl () : UWORD

EXTERN FN KiDisableInterrupts () : UWORD

EXTERN FN KiRestoreInterrupts (
    IN oldstate : UWORD,
)

EXTERN FN KiEnableInterrupts ()

EXTERN FN KiWaitForInterrupt ()

EXTERN FN KiCurrentProcessor () : UWORD

EXTERN FN KiInitializeCrashing ()

EXTERN FN KiInitializeArchitecture (
    IN prb : ^KiPrb,
)

EXTERN FN KiFlushMyIcache ()

EXTERN FN KiFlushMyDcache ()

EXTERN FN KiFlushMyIcacheByPhys (
    IN pfn : UWORD,
)

EXTERN FN KiFlushMyDcacheByPhys (
    IN pfn : UWORD,
)

EXTERN FN KiDispatchSoftwareInterrupts (
    IN newipl : UWORD,
)

EXTERN FN KiInterruptUsermode (
    IN dispatchfunc : ^VOID,
    IN trapframe : ^OsContext,
    IN userfunc : UWORD,
    IN context : UWORD,
    IN thread : ^KeThread,
)

EXTERN FN KiInitializeTurnstiles ()

#DEFINE KI_LOCK_WAITERS 0x1
#DEFINE KI_LOCK_WRITE_LOCKED 0x2
#DEFINE KI_LOCK_SHARE_INC 0x4
#DEFINE KI_LOCK_SHARE_SHIFT 2
#DEFINE KI_LOCK_BITS ( - 0 KI_LOCK_SHARE_INC )
#DEFINE KI_LOCK_C_BITS ( ~ KI_LOCK_BITS )

EXTERN FN KiAcquireLockShared (
    IN lock : ^KeLock,
    IN oldipl : UWORD,
) : UWORD

EXTERN FN KiAcquireLockExclusive (
    IN lock : ^KeLock,
    IN oldipl : UWORD,
) : UWORD

EXTERN FN KiReleaseLock (
    IN lock : ^KeLock,
)

EXTERN FN KiDispatchKernelApcQueue (
    IN current : ^KeThread,
)

EXTERN FN KiDispatchLazyApcQueue (
    IN current : ^KeThread,
)

EXTERN FN KiDispatchUserApcQueue (
    IN current : ^KeThread,
)

EXTERN FN KiDispatchDpcQueue (
    IN prb : ^KiPrb,
)

EXTERN FN KiPreemptThread (
    IN prb : ^KiPrb,
)

EXTERN FN KiQuantumEnd (
    IN prb : ^KiPrb,
)

EXTERN FN KiCheckInteractivity (
    IN prb : ^KiPrb,
)

EXTERN FN KiCheckInteractivityInternal (
    IN prb : ^KiPrb,
    IN current : ^KeThread,
    IN oldinteractivity : UWORD,
    IN newinteractivity : UWORD,
)

EXTERN FN KiMoveToInteractiveQueueThread (
    IN thread : ^KeThread,
)

EXTERN FN KiSwitchAddressSpace (
    IN process : ^KeProcess,
)

EXTERN FN KiSwitchContext (
    IN newthread : ^KeThread,
    IN oldthread : ^KeThread,
)

EXTERN FN KiJumpIntoThread (
    IN thread : ^KeThread,
)

EXTERN FN KiJumpIntoIdleThread (
    IN prb : ^KiPrb,
)

EXTERN FN KiUpdateInteractivity (
    IN thread : ^KeThread,
    IN deferupdate : UWORD,
)

EXTERN FN (KeDpcF) KiTimerExpiration (
    IN dpc : ^KeDpc,
    IN context1 : UWORD,
    IN context2 : UWORD,
)

EXTERN FN KiClockTick (
    IN intervalms : UWORD,
    IN usermode : UWORD,
    IN previpl : UWORD,
)

EXTERN FN KiSatisfyObject (
    IN object : ^KiDispatchHeader,
    IN priorityboost : UWORD,
    IN all : UWORD,
    IN status : OsStatus,
) : ^KeThread

EXTERN FN KiUnwaitThread (
    IN thread : ^KeThread,
    IN status : OsStatus,
    IN priorityboost : UWORD,
)

EXTERN FN KiSetPriorityThread (
    IN thread : ^KeThread,
    IN priority : UWORD,
)

EXTERN FN KiYield (
    IN current : ^KeThread,
    IN prb : ^KiPrb,
)

EXTERN FN KiReadyThread (
    IN thread : ^KeThread,
)

EXTERN FN KiDispatchUserInterrupts ()

EXTERN FN KiWakeBalancedQueue (
    IN queue : ^KeBalancedQueue,
)

EXTERN FN KiDisassociateFromBalancedQueue (
    IN thread : ^KeThread,
)

EXTERN KiUnexpectedInterruptObject : KeInterrupt

EXTERN FN KiSoftInterruptSelfSet (
    IN prb : ^KiPrb,
    IN set : UWORD,
)

#MACRO KiSoftInterruptSelf ( prb, ipl ) [
    KeOrUlong (
        &(prb)^.PendingSoftwareInterrupts, // ptr
        KiPendingIpl ( ipl ), // ulong
    )
]

#IF BLD_MP

EXTERN FN KiPinThread (
    IN prb : ^KiPrb,
)

EXTERN FN KiUnpinThread ()

EXTERN FN (KeDpcF) KiBalanceWork (
    IN dpc : ^KeDpc,
    IN context1 : UWORD,
    IN context2 : UWORD,
)

EXTERN FN KiFreezeOtherProcessors ()

EXTERN FN KiUnfreezeOtherProcessors ()

EXTERN FN KiServiceIpi (
    IN context : ^OsContext,
)

EXTERN FN KiExecuteOnOtherProcessor (
    IN target : ^KiPrb,
    IN function : KiIpiF,
    IN context1 : UWORD,
    IN context2 : UWORD,
)

EXTERN FN KiExecuteOnEveryoneElse (
    IN function : KiIpiF,
    IN context1 : UWORD,
    IN context2 : UWORD,
    IN deferred : UWORD,
)

#MACRO KiSoftInterruptOther ( targetprb, ipl ) [
    // Cause a software interrupt on another processor.

    oldvalue := KeOrUlong (
        &(targetprb)^.PendingSoftwareInterrupts, // ptr
        KiPendingIpl ( ipl ), // bitset
    )

    IF oldvalue & KiPendingIpl ( ipl ) == 0 THEN
        // We just set it, so we should send an IPI to get him to check it.

        HalTriggerIpi ( targetprb )
    END
]

EXTERN FN KiTryAcquireSpinlock (
    IN spinlock : ^KiSpinlock,
) : UWORD

EXTERN FN KiAcquireSpinlock (
    IN spinlock : ^KiSpinlock,
)

EXTERN FN KiForceReleaseSpinlock (
    IN spinlock : ^KiSpinlock,
)

EXTERN FN KiAcquireSpinlockRaise (
    IN spinlock : ^KiSpinlock,
) : UWORD

EXTERN FN KiAcquireSpinlockInPrb (
    IN offset : UWORD,
    OUT prb : ^KiPrb,
) : UWORD

#MACRO KiAcquireObject ( object ) [
    KiAcquireSpinlockRaise ( &(object)^.Spinlock )
]

#MACRO KiReleaseObject ( object, ipl ) [
    KiReleaseSpinlockLower ( &(object)^.Spinlock, ipl )
]

#MACRO KiAcquireObjectElevated ( object ) [
    KiAcquireSpinlock ( &(object)^.Spinlock )
]

#MACRO KiReleaseObjectElevated ( object ) [
    KiReleaseSpinlock ( &(object)^.Spinlock )
]

#DEFINE KI_QUEUE_REMOVAL_LOCKS 32

#IF ( == BLD_BITS 64 )

#DEFINE KI_QUEUE_SHIFT 6

#ELSE

#DEFINE KI_QUEUE_SHIFT 5

#END

EXTERN KiQueueRemovalLocks : KiSpinlock[KI_QUEUE_REMOVAL_LOCKS]

#MACRO KiQueueLockIndex ( queue ) [
    (((queue) >> KI_QUEUE_SHIFT) & (KI_QUEUE_REMOVAL_LOCKS - 1))
]

#MACRO KiComputeQueueRemovalLockAddress ( lock, queue ) [
    lock := &KiQueueRemovalLocks[KiQueueLockIndex(queue)]
]

#MACRO KiAcquireQueueRemoval ( lock ) [
    KiAcquireSpinlockRaise ( lock )
]

#MACRO KiReleaseQueueRemoval ( lock, ipl ) [
    KiReleaseSpinlockLower ( lock, ipl )
]

#MACRO KiAcquireQueueRemovalElevated ( lock ) [
    KiAcquireSpinlock ( lock )
]

#MACRO KiReleaseQueueRemovalElevated ( lock ) [
    KiReleaseSpinlock ( lock )
]

#MACRO KiAcquireThread ( thread ) [
    KiAcquireSpinlockRaise ( &(thread)^.Spinlock )
]

#MACRO KiReleaseThread ( thread, oldipl ) [
    KiReleaseSpinlockLower (
        &(thread)^.Spinlock, // spinlock
        oldipl, // oldipl
    )
]

#MACRO KiAcquireThreadElevated ( thread ) [
    KiAcquireSpinlock ( &(thread)^.Spinlock )
]

#MACRO KiTryAcquireThreadElevated ( thread ) [
    KiTryAcquireSpinlock ( &(thread)^.Spinlock )
]

#MACRO KiReleaseThreadElevated ( thread ) [
    KiReleaseSpinlock ( &(thread)^.Spinlock )
]

#MACRO KiAcquireSwapState ( process ) [
    KiAcquireSpinlockRaise ( &(process)^.SwapStateSpinlock )
]

#MACRO KiReleaseSwapState ( process, ipl ) [
    KiReleaseSpinlockLower ( &(process)^.SwapStateSpinlock, ipl )
]

#MACRO KiAcquireSwapStateElevated ( process ) [
    KiAcquireSpinlock ( &(process)^.SwapStateSpinlock )
]

#MACRO KiReleaseSwapStateElevated ( process ) [
    KiReleaseSpinlock ( &(process)^.SwapStateSpinlock )
]

EXTERN FN KiStealWork ()

EXTERN KiWorkBalanceDpc : KeDpc

#MACRO KiPrbFromNumber ( procid ) [
    (CAST KeLoaderBlock.VirtualPrbBase + (procid) * BL_PRB_SIZE TO ^KiPrb)
]

#ELSE

#MACRO KiAcquireObject ( object ) [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseObject ( object, ipl ) [
    KiLowerIpl ( ipl )
]

#MACRO KiAcquireObjectElevated ( object ) []

#MACRO KiReleaseObjectElevated ( object ) []

#MACRO KiComputeQueueRemovalLockAddress ( lock, queue ) []

#MACRO KiAcquireQueueRemoval ( lock ) [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseQueueRemoval ( lock, ipl ) [
    KiLowerIpl ( ipl )
]

#MACRO KiAcquireQueueRemovalElevated ( lock ) []

#MACRO KiReleaseQueueRemovalElevated ( lock ) []

#MACRO KiAcquireThread ( thread ) [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseThread ( thread, oldipl ) [
    KiLowerIpl ( oldipl )
]

#MACRO KiAcquireThreadElevated ( thread ) []

#MACRO KiReleaseThreadElevated ( thread ) []

#MACRO KiAcquireSwapState ( process ) [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseSwapState ( process, ipl ) [
    KiLowerIpl ( ipl )
]

#MACRO KiAcquireSwapStateElevated ( process ) []

#MACRO KiReleaseSwapStateElevated ( process ) []

#MACRO KiPrbFromNumber ( procid ) [
    (KI_CURRENT_PRB)
]

#END

#IF ( == BLD_BITS 32 )

#MACRO KiCaptureCurrentTicks ( uquad ) [
    WHILE TRUE DO
        sup := KeSharedUserPage

        NOTHING (uquad)^.High = (sup)^.Uptime.High
        KeMemoryBarrier ()
        NOTHING (uquad)^.Low = (sup)^.Uptime.Low
        KeMemoryBarrier ()

        IF (uquad)^.High == (sup)^.UptimeCheckHigh THEN
            // Didn't change while collecting.

            BREAK
        END
    END
]

#MACRO KiLowTick () [
    (KeSharedUserPage^.Uptime.Low)
]

#MACRO KiUpdateTime ( prb ) [
    sup := KeSharedUserPage

    realtime : RtlUquad

    HalQueryTime ( &realtime )

#IF HAL_RTC_IS_LOCAL
    // Convert to real time by subtracting the time zone offset.

    offset := KeSharedUserPage^.TimeZoneOffset

    RtlSubUlongFromUquad (
        &realtime, // destquad
        offset, // ulong
    )
#END

    sup^.RealTimeCheckHigh = realtime.High
    KeWriteMemoryBarrier ()
    sup^.RealTime.Low = realtime.Low
    KeWriteMemoryBarrier ()
    sup^.RealTime.High = realtime.High

    sup^.UptimeCheckHigh = (prb)^.ClockTicks.High
    KeWriteMemoryBarrier ()
    sup^.Uptime.Low = (prb)^.ClockTicks.Low
    KeWriteMemoryBarrier ()
    sup^.Uptime.High = (prb)^.ClockTicks.High
]

#ELSE

#MACRO KiCaptureCurrentTicks ( uquad ) [
    NOTHING (uquad)^.Quad = KeSharedUserPage^.Uptime.Quad
]

#MACRO KiLowTick ( prb ) [
    (KeSharedUserPage^.Uptime.Quad)
]

#MACRO KiUpdateTime ( prb ) [
    sup := KeSharedUserPage

    realtime : RtlUquad

    HalQueryTime ( &realtime )

#IF HAL_RTC_IS_LOCAL
    // Convert to real time by subtracting the time zone offset.

    realtime.Quad -= KeSharedUserPage^.TimeZoneOffset
#END

    sup^.RealTime.Quad = realtime.Quad

    sup^.Uptime.Quad = (prb)^.ClockTicks.Quad
]

#END

#MACRO KiInitializeDispatchObject ( hdr, name, type ) [
    RtlInitializeList ( &(hdr)^.WaitListHead )
    NOTHING (hdr)^.Name = (name)
    NOTHING (hdr)^.WaiterCount = 0
#IF BLD_MP
    KiInitializeSpinlock ( &(hdr)^.Spinlock )
#END
    NOTHING (hdr)^.Type = (type)
]

EXTERN FN KiInitializeContext (
    IN thread : ^KeThread,
    IN kstack : ^VOID,
    IN startfunc : KeStartThreadF,
    IN context1 : UWORD,
    IN context2 : UWORD,
) : ^OsContext

EXTERN KiIndexFirstBitClear : UBYTE[256]

EXTERN FN KiInsertSwapCandidateListFunc (
    IN thread : ^KeThread,
)

EXTERN FN KiRemoveSwapCandidateListFunc (
    IN thread : ^KeThread,
)

#MACRO KiInsertSwapCandidateList ( thread, waitmode ) [
    IF (waitmode) == KE_USER_MODE AND
        (thread)^.KernelStackSwappable THEN

        KiInsertSwapCandidateListFunc ( thread )
    END
]

#MACRO KiRemoveSwapCandidateList ( thread ) [
    IF (thread)^.SwapCandidatePrb THEN
        KiRemoveSwapCandidateListFunc ( thread )
    END
]

EXTERN FN KiReadyOutswappedThread (
    IN thread : ^KeThread,
) : UWORD

EXTERN FN KiReadyThreadOutswappedProcess (
    IN thread : ^KeThread,
) : UWORD

#DEFINE KI_THREAD_PENDING_KAPC 1
#DEFINE KI_THREAD_PENDING_UAPC 2
#DEFINE KI_THREAD_PENDING_LAPC 4
#DEFINE KI_THREAD_PENDING_SIGNAL 8