//
// Private header file for the Kernel component of the MINTIA Executive.
//

#INCLUDE "<ll>/Rtl.hjk"
#INCLUDE "<inc>/Hal.hjk"
#INCLUDE "<inc>/Ke.hjk"
#INCLUDE "../../Loader/Headers/Loader.hjk"
#INCLUDE "<ll>/System/OsProcess.hjk"

#DEFINE KI_IPL_LOW 0
#DEFINE KI_IPL_APC 1
#DEFINE KI_IPL_DPC 2
#DEFINE KI_IPL_CLOCK 29
#DEFINE KI_IPL_IPI 30
#DEFINE KI_IPL_HIGH 31
#DEFINE KI_IPL_MAX 32

#IF ( STRCMP ARCHITECTURE "xr17032" )
    // The Prb is mapped in the same location on all processors on XR/17032 via
    // a wired entry in each DTB. This location is -4096 in order to allow the
    // address to be loaded with a single SUBI instruction.

    #DEFINE KI_CURRENT_PRB [(CAST 0xFFFFF000 TO ^KiPrb)]
    #DEFINE KI_DIRECT_PRB 1

    #DEFINE KI_CACHE_ALIGN 16

    #DEFINE KI_INITIAL_SPINLOCK 0

    #MACRO KiInitializeSpinlock ( spinlock ) [
        NOTHING (spinlock)^ = 0
    ]

#ELSEIF ( STRCMP ARCHITECTURE "fox32" )
    // Fox32 is always uniprocessor.

    #DEFINE KI_CURRENT_PRB [(CAST 0xFFFFF000 TO ^KiPrb)]
    #DEFINE KI_DIRECT_PRB 1

#ELSE
    #ERROR ( STRCAT "Unknown architecture " ARCHITECTURE )
#END

// Try to make ticks represent 5ms intervals.

#DEFINE KI_QUANTUM_PER_TICK ( / HAL_TIMER_INTERVAL 5 )

// The per-processor block (Prb) is an architectural page size, but is at
// minimum 4KB. It contains all per-processor information.

STRUCT KiPrb
    IdleStack : UBYTE[2048],

#IF BLD_MP
    // Give the spinlocks their own cache lines.

    DpcQueueLock : KiSpinlock,
    CacheAlign1 : UBYTE[KI_CACHE_ALIGN - SIZEOF KiSpinlock],

    ReadyQueueLock : KiSpinlock,
    CacheAlign2 : UBYTE[KI_CACHE_ALIGN - SIZEOF KiSpinlock],

    TimerTreeLock : KiSpinlock,
    CacheAlign3 : UBYTE[KI_CACHE_ALIGN - SIZEOF KiSpinlock],

    IpiInterrupt : KeInterrupt,
#END

#IF ( STRCMP PLATFORM "XRstation" )
    LsicBase : ^VOID,
#END

    TimerTreeRoot : ^RtlHeapEntry,

    IrqDispatchTable : ^KeInterrupt[HAL_VECTOR_MAX],

    // Inspired by ULE of FreeBSD:
    //
    // The real time list heads are indexed by thread priority, with all ready
    // threads of the same priority being chained together off of that list
    // head. The scheduler will *always* select the highest priority available
    // thread from the real time ready queues if one exists.
    //
    // The threads in this queue come from those with "real time priority", and
    // also those with lower priority that have been temporarily designated as
    // as "interactive" in order to increase responsiveness.

    RealTimeListHeads : RtlListEntry[OS_PRIORITY_MAX],

    // The calendar list heads form a "clock" whose hand ticks once every 20ms,
    // or the length of the system tick, whichever is greater. When the real
    // time queues are empty, the next thread to run is taken from the queue
    // pointed to by the CalendarRunIndex. After all threads are emptied from
    // this queue (i.e. they have all gotten a chance to run), the
    // CalendarRunIndex is incremented to the next queue which contains threads,
    // in order to make sure the processor doesn't waste time idling.
    //
    // The CalendarEnqueueIndex is the ticking hand. Newly enqueued threads are
    // inserted into the queue pointed to by:
    //
    //   CalendarEnqueueIndex + OS_PRIORITY_LOW_REALTIME - thread^.Priority
    //
    // That is, threads are placed into a "further" queue when they have lower
    // priority. This accomplishes a relative ratio of CPU time granted to each
    // thread based on their priorities.
    //
    // If CalendarRunIndex is incremented and equals CalendarEnqueueIndex, the
    // latter is incremented in order to make sure the queue being run is
    // flushed before more stuff is put on it.
    //
    // Threads on these lists are called "timeshared threads".

    CalendarListHeads : RtlListEntry[OS_PRIORITY_LOW_REALTIME],

    // Idle threads (priority 0) go on this list.

    IdleListHead : RtlListEntry,

    TimerInterrupt : KeInterrupt,

    ClockTicks : RtlUquad,
    DpcTimeMs : RtlUquad,
    UserTimeMs : RtlUquad,
    SystemTimeMs : RtlUquad,
    EarliestTimerMs : RtlUquad,

    IplTimes : RtlUquad[KI_IPL_MAX],

    KernelStackTop : ^VOID,
    CurrentThread : ^KeThread,
    NextThread : ^KeThread,

    DpcListHead : RtlListEntry,

    TimerExpirationDpc : KeDpc,

    PendingSoftwareInterrupts : ULONG,

    // 32-bit mask of which real time queues have at least one thread.

    RealTimeReady : ULONG,

    // 32-bit mask of which timeshared queues have at least one thread.

    CalendarReady : ULONG,

    Id : UINT,

    Ipl : UBYTE, // ASM routines assume this is a byte size.
    QuantumEnd : UBYTE,
    DpcActive : UBYTE,
    CalendarRunIndex : UBYTE,
    CalendarEnqueueIndex : UBYTE,
END

// KiRaiseIpl and KiLowerIpl may only be used to move between the software IPLs:
//
//  o  KI_IPL_DPC
//  o  KI_IPL_APC
//  o  KI_IPL_LOW
//
// With this in mind, they can be implemented quite efficiently as macros,
// provided direct access to the Prb is sane across thread migration on this
// architecture.
//
// If it is not, these routines are written as short assembly routines elsewhere
// so that they can disable interrupts briefly while holding a pointer to the
// current Prb.
//
// Direct access to the Prb is always sane if this is a uniprocessor build.
// Otherwise, it's sane if the architecture provides a way to wire the Prb into
// the same address across all cores. If neither of the above hold, it's insane!

EXTERN FN KiRaiseIpl (
    IN newipl : UWORD,
) : UWORD

EXTERN FN KiLowerIpl (
    IN newipl : UWORD,
)

EXTERN FN KiCurrentIpl () : UWORD

EXTERN FN KiDisableInterrupts () : UWORD

EXTERN FN KiRestoreInterrupts (
    IN oldstate : UWORD,
)

EXTERN FN KiEnableInterrupts ()

EXTERN FN KiWaitForInterrupt ()

EXTERN FN KiCurrentProcessor () : UWORD

EXTERN FN KiInitializeCrashing ()

EXTERN FN KiInitializeArchitecture (
    IN prb : ^KiPrb,
)

EXTERN FN KiFlushMyIcache ()

EXTERN FN KiDispatchSoftwareInterrupts (
    IN newipl : UWORD,
)

EXTERN FN KiDispatchApcQueue (
    IN current : ^KeThread,
)

EXTERN FN KiDispatchDpcQueue (
    IN prb : ^KiPrb,
)

EXTERN FN KiPreemptThread (
    IN prb : ^KiPrb,
)

EXTERN FN KiQuantumEnd (
    IN prb : ^KiPrb,
)

EXTERN FN (KeDpcF) KiTimerExpiration (
    IN dpc : ^KeDpc,
    IN context1 : UWORD,
    IN context2 : UWORD,
)

EXTERN FN KiClockTick (
    IN intervalms : UWORD,
    IN usermode : UWORD,
    IN previpl : UWORD,
)

EXTERN KiUnexpectedInterruptObject : KeInterrupt

#IF BLD_MP

EXTERN FN KiFreezeOtherProcessors ()

EXTERN FN KiUnfreezeOtherProcessors ()

EXTERN FN KiAcquireSpinlock (
    IN spinlock : ^KiSpinlock,
)

EXTERN FN KiReleaseSpinlock (
    IN spinlock : ^KiSpinlock,
)

EXTERN FN KiAcquireSpinlockRaise (
    IN spinlock : ^KiSpinlock,
) : UWORD

EXTERN FN KiAcquireSpinlockInPrb (
    IN offset : UWORD,
    OUT prb : ^KiPrb,
) : UWORD

EXTERN FN KiReleaseSpinlockLower (
    IN spinlock : ^KiSpinlock,
    IN oldipl : UWORD,
)

#MACRO KiAcquireObject ( object ) [
    KiAcquireSpinlockRaise ( &(object)^.Spinlock )
]

#MACRO KiReleaseObject ( object, ipl ) [
    KiReleaseSpinlockLower ( &(object)^.Spinlock, ipl )
]

#MACRO KiAcquireObjectElevated ( object ) [
    KiAcquireSpinlock ( &(object)^.Spinlock )
]

#MACRO KiReleaseObjectElevated ( object ) [
    KiReleaseSpinlock ( &(object)^.Spinlock )
]

#ELSE

#MACRO KiAcquireObject ( object ) [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseObject ( object, ipl ) [
    KiLowerIpl ( ipl )
]

#MACRO KiAcquireObjectElevated ( object ) []

#MACRO KiReleaseObjectElevated ( object ) []

#END

#MACRO KiInitializeDispatchObject ( hdr, name, type ) [
    RtlInitializeList ( &(hdr)^.WaitListHead )
    NOTHING (hdr)^.Name = (name)
    NOTHING (hdr)^.SignalCount = 0
#IF BLD_MP
    KiInitializeSpinlock ( &(hdr)^.Spinlock )
#END
    NOTHING (hdr)^.Type = (type)
]