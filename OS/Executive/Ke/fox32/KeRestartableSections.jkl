//
// Contains all of the "restartable sections" for atomics on fox32.
// If an exception occurs during one of these sections, the program counter is
// reset to the beginning. We group them together so that we don't have to check
// for PC being inbetween each of them on every exception, only when we found it
// between KiRestartableSections and KiRestartableSectionsEnd.
//

#INCLUDE "../Ki.hjk"

#ASM [

KiRestartableSections:
.global KiRestartableSections


// a0 - ptr
// a1 - inc
// outputs:
// a3 - old value
KeIncrementUlong:
.export KeIncrementUlong

    mov  a3, [a0]
    add  [a0], a1

KiIncrementUlongEnd:
.global KiIncrementUlongEnd

    ret

// a0 - ptr
// a1 - bitset
// outputs:
// a3 - origvalue
KeOrUlong:
.export KeOrUlong

    mov  a3, [a0]
    or   [a0], a1

KiOrUlongEnd:
.global KiOrUlongEnd

    ret

// a0 - ptr
// a1 - bitmask
// outputs:
// a3 - origvalue
KeMaskUlong:
.export KeMaskUlong

    mov  a3, [a0]
    and  [a0], a1

KiMaskUlongEnd:
.global KiMaskUlongEnd

    ret

// a0 - ptr
// a1 - newvalue
// outputs:
// a3 - origvalue
KeFetchAndSetUlong:
.export KeFetchAndSetUlong

    mov  a3, [a0]
    mov  [a0], a1

KiFetchAndSetUlongEnd:
.global KiFetchAndSetUlongEnd

    ret

// a0 - ptr
// a1 - newvalue
// a2 - expectedvalue
// outputs:
// a3 - origvalue
KeCompareSwapUlong:
.export KeCompareSwapUlong
    
    mov  a3, [a0]
    cmp  a3, a2
    ifnz rjmp KiCompareSwapUlongEnd
    mov  [a0], a1

KiCompareSwapUlongEnd:
.global KiCompareSwapUlongEnd

    ret

// a0 - ptr
// a1 - newvalue
// a2 - expectedvalue
// outputs:
// a3 - origvalue
// a2 - aborted
KeCompareSwapUlongAbortOnFault:
.export KeCompareSwapUlongAbortOnFault
    
    mov  a3, [a0]
    cmp  a3, a2
    ifnz rjmp KiCompareSwapUlongAbortEnd
    mov  [a0], a1

KiCompareSwapUlongAbortEnd:
.global KiCompareSwapUlongAbortEnd

    mov  a2, 0

    ret

KiCompareSwapUlongAbort:
.global KiCompareSwapUlongAbort

    // We took a page fault while attempting the CAS. Return something that
    // is guaranteed not to be equal to the expectedvalue, thereby making the
    // CAS look like a failure.

    mov  a3, a2
    add  a3, 1

    mov  a2, 1

    ret

#MACRO KiAcquireLockSharedLoop ( slow ) [
    mov  t0, [a0]
    and  t0, KI_LOCK_C_BITS
    ifnz rjmp slow
    add  [a0], KI_LOCK_SHARE_INC
]

// a0 - lock
// outputs:
// a3 - oldipl
KeAcquireApcLockShared:
.export KeAcquireApcLockShared

    movz.8 a3, [(0xFFFFF000 + KiPrb_Ipl)]
    mov.8 [(0xFFFFF000 + KiPrb_Ipl)], KI_IPL_APC

KiAcquireApcLockSharedStart:
.global KiAcquireApcLockSharedStart

    KiAcquireLockSharedLoop ( KiAcquireApcLockSharedSlow )

KiAcquireApcLockSharedEnd:
.global KiAcquireApcLockSharedEnd

    ret

KiAcquireApcLockSharedSlow:
    mov  a1, a3
    jmp  KiAcquireLockShared

// a0 - lock
KeAcquireLockShared:
.export KeAcquireLockShared

    KiAcquireLockSharedLoop ( KiAcquireLockSharedSlow )

KiAcquireLockSharedEnd:
.global KiAcquireLockSharedEnd

    ret

KiAcquireLockSharedSlow:
    movz.8 a1, [(0xFFFFF000 + KiPrb_Ipl)]
    jmp  KiAcquireLockShared

#MACRO KiAcquireLockExclusiveLoop ( slow ) [
    cmp  [a0], 0
    ifnz rjmp slow
    mov  [a0], t1
]

// a0 - lock
// outputs:
// a3 - oldipl
KeAcquireApcLockExclusive:
.export KeAcquireApcLockExclusive

    movz.8 a3, [(0xFFFFF000 + KiPrb_Ipl)]
    mov.8 [(0xFFFFF000 + KiPrb_Ipl)], KI_IPL_APC

    mov  t1, [(0xFFFFF000 + KiPrb_CurrentThread)]
    or   t1, KI_LOCK_WRITE_LOCKED

KiAcquireApcLockExclusiveStart:
.global KiAcquireApcLockExclusiveStart

    KiAcquireLockExclusiveLoop ( KiAcquireApcLockExclusiveSlow )

KiAcquireApcLockExclusiveEnd:
.global KiAcquireApcLockExclusiveEnd

    ret

KiAcquireApcLockExclusiveSlow:
    mov  a1, a3
    jmp  KiAcquireLockExclusive

// a0 - lock
KeAcquireLockExclusive:
.export KeAcquireLockExclusive

    mov  t1, [(0xFFFFF000 + KiPrb_CurrentThread)]
    or   t1, KI_LOCK_WRITE_LOCKED

KiAcquireLockExclusiveStart:
.global KiAcquireLockExclusiveStart

    KiAcquireLockExclusiveLoop ( KiAcquireLockExclusiveSlow )

KiAcquireLockExclusiveEnd:
.global KiAcquireLockExclusiveEnd

    ret

KiAcquireLockExclusiveSlow:
    movz.8 a1, [(0xFFFFF000 + KiPrb_Ipl)]
    jmp  KiAcquireLockExclusive

// Release

#MACRO ReleaseLock ( startlabel, endlabel, slow ) [

#IF BLD_CHK
    cmp  [a0], 0
    ifz  rjmp KiNotLocked
#END

startlabel:
.global startlabel

    // Load the lock word.

    mov  t0, [a0]

    // Isolate the waiters bit.

    mov  t1, t0
    and  t1, KI_LOCK_WAITERS
    ifnz jmp slow

    movz.8 t2, 0

    mov  t1, t0
    and  t1, KI_LOCK_WRITE_LOCKED
    ifnz rjmp .notshared

    // We're a shared holder, so decrement the share count.

    mov  t2, t0
    sub  t2, KI_LOCK_SHARE_INC

.notshared:

    // Store the new lock word.

    mov  [a0], t2

endlabel:
.global endlabel

]

// a0 - lock
KeReleaseLock:
.export KeReleaseLock

    ReleaseLock ( KiReleaseLockStart, KiReleaseLockEnd, KiReleaseLock )

    ret

// a0 - lock
// a1 - oldipl
KeReleaseApcLock:
.export KeReleaseApcLock

    ReleaseLock ( KiReleaseApcLockStart, KiReleaseApcLockEnd, KiReleaseSlow )

    rjmp KiReleaseApcSafe

KiReleaseSlow:

    push fp
    mov  fp, sp
    push a1
    
    call KiReleaseLock

    pop  a1
    pop  fp

    // Fall through.

KiReleaseApcSafe:

    // The lock is APC-safe, so lower IPL.

    mov.8 [(0xFFFFF000 + KiPrb_Ipl)], a1

    mov  t0, [(0xFFFFF000 + KiPrb_PendingSoftwareInterrupts)]
    srl  t0, a1
    ifnz rjmp .dispatch

    ret

.dispatch:
    mov  a0, a1
    jmp  KiDispatchSoftwareInterrupts

#IF BLD_CHK

KiNotLocked:

    push fp
    mov  fp, sp

    mov  a0, KiNotLockedMessage
    mov  a1, 0
    mov  a2, 0
    call KeCrash

KiNotLockedMessage:
    .ds "KeReleasePushlock: pushlock not locked\n"
    .db 0

.align 4

#END


KiRestartableSectionsEnd:
.global KiRestartableSectionsEnd

]