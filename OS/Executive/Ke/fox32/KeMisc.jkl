//
// Various architecture-specific functions.
//

#INCLUDE "../Ki.hjk"
#INCLUDE "../../Mm/fox32/Mi.hjk"

PUBLIC KiInterruptsDisabled := TRUE

#ASM [

// outputs:
// a3 - old interrupt state
KiDisableInterrupts:
.global KiDisableInterrupts

    icl

    mov  a3, [KiInterruptsDisabled]
    mov  [KiInterruptsDisabled], 1

    ret

// a0 - old interrupt state
KiRestoreInterrupts:
.global KiRestoreInterrupts

    icl

    mov  [KiInterruptsDisabled], a0

    cmp  a0, 1
    ifz  jmp .dontenable

    cmp.8 [(0xFFFFF000 + KiPrb_Ipl)], KI_IPL_DPC
    ifgt jmp .dontenable

    ise

.dontenable:
    
    ret

KiEnableInterrupts:
.global KiEnableInterrupts

    icl

    mov  [KiInterruptsDisabled], 0

    cmp.8 [(0xFFFFF000 + KiPrb_Ipl)], KI_IPL_DPC
    ifgt jmp .dontenable

    ise

.dontenable:

    ret

// outputs:
// a3 - thread
KeCurrentThread:
.export KeCurrentThread

    mov  a3, [(0xFFFFF000 + KiPrb_CurrentThread)]

    ret

// outputs:
// a3 - process
KeCurrentProcess:
.export KeCurrentProcess

    mov  t0, [(0xFFFFF000 + KiPrb_CurrentThread)]
    mov  a3, [t0 + KeThread_Process]

    ret

// outputs:
// a3 - current processor ID
KiCurrentProcessor:
.global KiCurrentProcessor

    mov  a3, 0

    ret

KiWaitForInterrupt:
.global KiWaitForInterrupt

    halt

    ret

// outputs:
// a3 - current IPL
KiCurrentIpl:
.global KiCurrentIpl

    movz.8 a3, [(0xFFFFF000 + KiPrb_Ipl)]

    ret

KeBreakpoint:
.export KeBreakpoint

    push fp
    mov  fp, sp

    brk

    pop fp

    ret

// a0 - keepglobal
KeSweepMyTb:
.global KeSweepMyTb

    // Set the page directory back to that of the current process.
    // This will not switch address spaces but it does cause a TB flush on
    // fox32.

    mov  t0, [(0xFFFFF000 + KiPrb_CurrentThread)]
    mov  t0, [t0 + KeThread_Process]
    mov  t0, [t0 + KeProcess_PageDirectoryPfn]
    sla  t0, 12
    tlb  t0

    ret

// a0 - virtual address
KeFlushMyTbAddress:
.global KeFlushMyTbAddress

    flp  a0

    ret

]

FN KeSweepTb (
    IN keepglobal : UWORD,
)

    // Flush the entire TB on all processors.

    KeSweepMyTb ( keepglobal )
END

FN KeFlushSingleTb (
    IN vaddr : ^VOID,
)

    // Flush a single TB entry on all processors.

    KeFlushMyTbAddress ( vaddr )
END

FN KeFlushMultipleTb (
    IN vaddrtable : ^^VOID,
    IN pagecount : UWORD,
)

    // Flush multiple TB entries on all processors.

    WHILE pagecount DO
        KeFlushMyTbAddress ( vaddrtable^ )

        vaddrtable += SIZEOF ^VOID
        pagecount -= 1
    END
END

FN KeZeroPage (
    IN pfn : UWORD,
)

    // Zero out the page with the given PFN.

    ipl := KiRaiseIpl ( KI_IPL_DPC )

    pteaddr := CAST KI_CURRENT_PRB^.QuickPte TO ^ULONG
    vaddr := MiVirtualAddress ( pteaddr )

    // Map it with the quick page.

    pte := (pfn << 12) | MI_PTE_V | MI_PTE_W

    pteaddr[0] = pte

    // Flush TB.

    KeFlushMyTbAddress ( vaddr )

    // Zero out the page.

    RtlFillMemoryWithUlong (
        vaddr, // ptr
        RTL_PAGE_SIZE, // sz
        0, // ulong
    )

    KiLowerIpl ( ipl )
END