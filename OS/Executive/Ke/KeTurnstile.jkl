//
// Implementation of "turnstiles" (invented by Solaris) for the MINTIA Kernel.
//
// Turnstiles are a locking mechanism whereby a single pointer-sized datum can
// be used as a mutex or rwlock, by storing a block in a hash table keyed by
// the address of the lock upon contention.
//
// NT "pushlocks" accomplish similar goals but have a thread-local block stored
// on the stack of each contending thread. This decentralization makes it easier
// on cache (each thread can do adaptive spinning in its own stack), but makes
// it harder to accomplish priority inheritance. Since priority inheritance has
// been deemed of utmost importance to the robustness of the MINTIA Executive
// (which is almost completely preemptible aside from the scheduler), the
// original usage of pushlocks in MINTIA was quickly replaced with turnstiles.
//

#INCLUDE "Ki.hjk"

KiTurnstileListHead : ^KiTurnstile = NULLPTR

#IF BLD_MP

#MACRO KiAcquireChain ( chain ) [
    KiAcquireSpinlockRaise ( &(chain)^.Spinlock )
]

#MACRO KiReleaseChain ( chain, ipl ) [
    KiReleaseSpinlockLower ( &(chain)^.Spinlock, ipl )
]

#MACRO KiAcquireChainElevated ( chain ) [
    KiAcquireSpinlock ( &(chain)^.Spinlock )
]

#MACRO KiReleaseChainElevated ( chain ) [
    KiReleaseSpinlock ( &(chain)^.Spinlock )
]

#MACRO KiAcquireTurnstileElevated ( turnstile ) [
    KiAcquireSpinlock ( &(turnstile)^.Spinlock )
]

#MACRO KiReleaseTurnstileElevated ( turnstile ) [
    KiReleaseSpinlock ( &(turnstile)^.Spinlock )
]

KiTurnstileListLock : KiSpinlock = KI_INITIAL_SPINLOCK

#MACRO KiAcquireTurnstileList () [
    KiAcquireSpinlockRaise ( &KiTurnstileListLock )
]

#MACRO KiReleaseTurnstileList ( ipl ) [
    KiReleaseSpinlockLower ( &KiTurnstileListLock, ipl )
]

#ELSE

#MACRO KiAcquireChain ( chain ) [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseChain ( chain, ipl ) [
    KiLowerIpl ( ipl )
]

#MACRO KiAcquireChainElevated ( chain ) []

#MACRO KiReleaseChainElevated ( chain ) []

#MACRO KiAcquireTurnstileElevated ( turnstile ) []

#MACRO KiReleaseTurnstileElevated ( turnstile ) []

#MACRO KiAcquireTurnstileList () [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseTurnstileList ( ipl ) [
    KiLowerIpl ( ipl )
]

#END

#DEFINE KI_TURNSTILE_CHAINS 128

#IF ( == BLD_BITS 32 )

#DEFINE KI_TURNSTILE_HASH_SHIFT 2

#ELSE

#DEFINE KI_TURNSTILE_HASH_SHIFT 3

#END

#MACRO KiTurnstileHash ( address ) [
    ((address >> KI_TURNSTILE_HASH_SHIFT) & (KI_TURNSTILE_CHAINS - 1))
]

STRUCT KiTurnstileChain
    Head : RtlListEntry,
#IF BLD_MP
    Spinlock : KiSpinlock,
#END
END

KiTurnstileChains : KiTurnstileChain[KI_TURNSTILE_CHAINS]

#DEFINE KI_INITIAL_TURNSTILES 64

#DEFINE KI_SPIN_CYCLES 400

KiInitialTurnstiles : KiTurnstile[KI_INITIAL_TURNSTILES]

FN KeAllocateTurnstile () : ^KiTurnstile

    // Allocate a turnstile from the lookaside list.
    // We never fail this because Ps has magically ensured that there are enough
    // turnstiles for us to allocate some; there have to always be the same as
    // the number of threads in the system and Ps has expanded the list to
    // maintain that invariant.

    ipl := KiAcquireTurnstileList ()

    turnstile := KiTurnstileListHead

#IF BLD_CHK
    IF NOT turnstile THEN
        KeCrash ( "KeAllocateTurnstile: no more turnstiles\n" )
    END
#END
    
    KiTurnstileListHead = turnstile^.Free

    KiReleaseTurnstileList ( ipl )

    RETURN turnstile
END

FN KeFreeTurnstile (
    IN turnstile : ^KiTurnstile,
)

    // Release a turnstile to the lookaside list.

    ipl := KiAcquireTurnstileList ()

    turnstile^.Free = KiTurnstileListHead
    KiTurnstileListHead = turnstile

    KiReleaseTurnstileList ( ipl )
END

FN KiInitializeTurnstiles ()

    // Initialize the turnstile package.

    // Initialize the chains.

    i := 0

    WHILE i < KI_TURNSTILE_CHAINS DO
        RtlInitializeList ( &KiTurnstileChains[i].Head )

        i += 1
    END

    // Initialize the initial turnstiles.

    i = 0

    WHILE i < KI_INITIAL_TURNSTILES DO
        KeFreeTurnstile ( &KiInitialTurnstiles[i] )

        i += 1
    END
END

FN (RtlLessThanF) KiCompareThreads (
    IN a : ^RtlHeapEntry,
    IN b : ^RtlHeapEntry,
) : UWORD

    // Compare the bestowed priority of two threads for insertion into the
    // turnstile's maxheap. Since it's a maxheap, we will return whether a>b so
    // that higher priority threads end up at the root.

    // Interactive threads are always greater than noninteractive threads.
    // If interactivity is the same, it's determined by the priority.

    thread1 := CONTAINEROF a TO KeThread.TurnstileEntry
    thread2 := CONTAINEROF b TO KeThread.TurnstileEntry

    IF thread1^.BestowedInteractivity OR
        thread1^.BestowedPriority >= OS_PRIORITY_LOW_REALTIME THEN

        IF thread2^.BestowedInteractivity OR
            thread2^.BestowedPriority >= OS_PRIORITY_LOW_REALTIME THEN

            RETURN thread1^.BestowedPriority > thread2^.BestowedPriority

        ELSE
            RETURN TRUE
        END

    ELSEIF thread2^.BestowedInteractivity OR
        thread2^.BestowedPriority >= OS_PRIORITY_LOW_REALTIME THEN

        RETURN FALSE

    ELSE
        RETURN thread1^.BestowedPriority > thread2^.BestowedPriority
    END
END

FN KiBoostPriority (
    IN owner : ^KeThread,
    IN thread : ^KeThread,
    IN chain : ^KiTurnstileChain,
)

    // As required, boost the priority of the thread and all of the threads upon
    // which it depends to make progress. Return TRUE if a retry is needed.

    original := owner

    WHILE TRUE DO
        // Boost the owner. His lock is held on entry, released on exit.

        boosted := FALSE

        IF thread^.BestowedInteractivity AND NOT owner^.InteractivityFloor THEN
            // Raise the interactivity floor.

            owner^.InteractivityFloor = TRUE

            IF NOT owner^.Interactive THEN
                // It wasn't interactive and we just raised the floor, so it's
                // probably in the wrong queue now.

                KiMoveToInteractiveQueueThread ( owner )
            END

            boosted = TRUE
        END

        IF owner^.PriorityFloor < thread^.BestowedPriority THEN
            // Raise the priority floor.

            owner^.PriorityFloor = thread^.BestowedPriority

            IF owner^.Priority < owner^.PriorityFloor THEN
                // Raise the priority.

                KiSetPriorityThread (
                    owner, // thread
                    owner^.PriorityFloor, // priority
                )
            END

            boosted = TRUE
        END

        IF NOT boosted THEN
            // Didn't boost, we're done.

            BREAK
        END

        // We have to follow the chain of lock owners and boost them all.
        // Each blocked thread is linked to its turnstile by BlockedOnTurnstile
        // which is guarded with its thread lock. Each turnstile is linked to
        // its current owner by the Owner field. Therefore we can find all
        // threads that are indirectly depended upon by this thread to make
        // progress; all owners of locks being waited for, by owners of locks
        // being waited for, by owners of locks being waited for, etc, by this
        // thread.
        //
        // Because the lock ordering issues here are crazy, the way we do this
        // is a little dance where we drop locks and re-check the turnstile.
        // This can miss boosting people sometimes but that's fine. Why? Well,
        // the owner of this lock has clearly woken up if the turnstile vanished
        // after we released its lock, since turnstile lifetimes only end from
        // the context of a thread that was blocked on the turnstile. But, we
        // already boosted it, and it will pass on that boost to any other lock
        // it blocks on until it releases the lock that we want. So, if the
        // turnstile vanished, we know our job is done and its safe to just
        // carry on.

        turnstile := owner^.BlockedOnTurnstile

        IF NOT turnstile THEN
            // Not blocked on a turnstile, return.

            BREAK
        END

        // Move the waiter in the turnstile's maxheap to reflect a new
        // bestowed priority.

        KiAcquireTurnstileElevated ( turnstile )

        RtlRemoveFromHeap (
            &KiCompareThreads, // comparisonfunc
            &turnstile^.WaiterHeapRoot, // rootptr
            &owner^.TurnstileEntry, // entry
        )

        // Set new bestowed.

        owner^.BestowedPriority = owner^.Priority
        owner^.BestowedInteractivity = owner^.Interactive

        // Re-insert.

        RtlInsertIntoHeap (
            &KiCompareThreads, // comparisonfunc
            &turnstile^.WaiterHeapRoot, // rootptr
            &owner^.TurnstileEntry, // entry
        )

        KiReleaseTurnstileElevated ( turnstile )

        IF NOT turnstile^.Committed THEN
            // Not yet committed, return.

            BREAK
        END

        // Capture the owner of the turnstile.

        nextowner := turnstile^.Owner

        // Capture the turnstile key for comparison.

        key := turnstile^.Key

        KiReleaseThreadElevated ( owner )

        // All locks are dropped. We're going to reacquire them and then make
        // sure this is the same turnstile with the same owner. This only works
        // because turnstiles are "type stable memory"; once a piece of memory
        // has been initialized as a turnstile, it will be a turnstile forever.

        chain = &KiTurnstileChains[KiTurnstileHash(key)]

        KiAcquireChainElevated ( chain )

        // If these things changed while the locks were dropped, we've lost
        // any sense of sanity and need to leave now. The 'nextowner' thread
        // may no longer even exist at all.
        //
        // Note also, if the keys don't match, this is a lockless access
        // since the chain lock held is for the incorrect hash chain.

        IF turnstile^.Key != key OR
            turnstile^.Owner != nextowner OR
            turnstile^.Awoken THEN

            KiReleaseChain ( chain, KI_IPL_APC )

            LEAVE
        END

        // Note that it's possible (although extremely unlikely) that the AB
        // problem has occurred and theres a completely different instance
        // of the turnstile being used with an owner with the same address,
        // for a lock with the same address. In this case we will go off
        // boosting some other dependency chain but this is actually
        // harmless, since the erroneous boost will be removed next time the
        // thread releases the lock. It's just kinda weird. A sequence
        // number could make it even unlikelier but here we choose to save
        // some space in the turnstile block.
        //
        // The important thing is that this turnstile is a valid, in-use
        // turnstile with an owner, which is why we clear the key when we
        // wake a turnstile, to ensure it won't match the above conditional if
        // there's no valid owner thread.

        KiAcquireThreadElevated ( nextowner )

        KiReleaseChainElevated ( chain )

        owner = nextowner

        IF owner == original THEN
            // A cycle in the lock dependency chain could indicate deadlock, but
            // it could also mean that while the locks were dropped at some
            // point in this process, the AB problem case occurred and we
            // examined a thread that was (innocently) upstream of our original
            // thread in a dependency chain. We optimistically assume the latter
            // and break out here.

            BREAK
        END
    END

    KiReleaseThread ( owner, KI_IPL_APC )
END

FN KiBlockOnLock (
    IN lock : ^KeLock,
    IN current : UWORD,
    IN oldipl : UWORD,
)

    // Block on the lock. First acquire a pointer to the current thread.

    thread := KeCurrentThread ()

    // Lock the turnstile chain.

    chain := &KiTurnstileChains[KiTurnstileHash(lock)]

    turnstile : ^KiTurnstile
    otherturnstile : ^KiTurnstile

    head := &chain^.Head

    owner : ^KeThread = NULLPTR

    IF current & KI_LOCK_WRITE_LOCKED THEN
        owner = CAST current & KI_LOCK_BITS TO ^KeThread
    END

    ipl := KiAcquireChain ( chain )

    // Scan the chain for the relevant turnstile.

    listentry := head^.Next

    WHILE TRUE DO
        IF listentry == head THEN
            // Reached the end of the chain and didn't find the right turnstile.
            // We'll use our thread's turnstile for the IPL at which the lock
            // acquisition has been attempted.

            turnstile = thread^.Turnstile

#IF BLD_CHK
            IF NOT turnstile THEN
                KeCrash ( "KiBlockOnLock: no turnstile\n" )
            END

            thread^.Turnstile = NULLPTR
#END

            // Initialize it.

            turnstile^.Key = lock
            turnstile^.Free = NULLPTR
            turnstile^.Owner = owner
            turnstile^.Awoken = FALSE
            turnstile^.Committed = FALSE

#IF BLD_MP
            KiInitializeSpinlock ( &turnstile^.Spinlock )
#END

            RtlInsertAtHeadList (
                head, // head
                &turnstile^.ChainEntry, // entry
            )

            turnstile^.WaiterHeapRoot = NULLPTR

            KeInitializeEvent (
                &turnstile^.Event, // event
                "Turnstile", // name
                TRUE, // notification
                FALSE, // signalstate
            )

            BREAK
        END

        turnstile = CONTAINEROF listentry TO KiTurnstile.ChainEntry

        IF turnstile^.Key == lock AND
            turnstile^.Owner == owner THEN

            // Found a turnstile. Stash ours on the free list for this
            // turnstile. We "donate" it like this so that anybody who wakes
            // up can quickly grab one to replace theirs.

            otherturnstile = thread^.Turnstile

            otherturnstile^.Free = turnstile^.Free
            turnstile^.Free = otherturnstile

#IF BLD_CHK
            thread^.Turnstile = NULLPTR
#END

            BREAK
        END

        listentry = listentry^.Next
    END

    KiAcquireThreadElevated ( thread )

    // Capture current priority as the BestowedPriority.

    thread^.BestowedPriority = thread^.Priority
    thread^.BestowedInteractivity = (thread^.Interactive |
        thread^.InteractivityFloor)

    thread^.BlockedOnTurnstile = turnstile

    // Insert the thread into the turnstile's max heap.

    KiAcquireTurnstileElevated ( turnstile )

    RtlInsertIntoHeap (
        &KiCompareThreads, // comparisonfunc
        &turnstile^.WaiterHeapRoot, // rootptr
        &thread^.TurnstileEntry, // entry
    )

    KiReleaseTurnstileElevated ( turnstile )

    KiReleaseThreadElevated ( thread )

    KiReleaseChain ( chain, KI_IPL_APC )

    // Set that there are waiters now. This will cause releasing threads to
    // signal the turnstile event.

    // We do this CAS unconditionally because we want to also make sure that, in
    // the event it is held exclusively, the owner did not change before we were
    // able to set the WAITERS bit. This is because we need to be absolutely
    // sure that whatever owner we see in our "current" variable (which captures
    // the lock word during a certain timeframe) will be the exact thread to
    // awaken this turnstile at some point *after* this CAS is performed.

    IF KeCompareSwapPtr (
        &lock^.Ptr, // ptr
        current | KI_LOCK_WAITERS, // newvalue
        current, // expectedvalue
    ) != current THEN

        // Something changed.

        GOTO UnreferenceAndLeave
    END

    IF current & KI_LOCK_WRITE_LOCKED THEN
        KiAcquireChain ( chain )

        IF turnstile^.Awoken THEN
            // Owner no longer valid.

            GOTO UnreferenceAndLeaveChainHeld
        END

        // At this point we know exactly who owns this lock and we know they
        // haven't fully left the lock yet, which means its safe to apply
        // priority inheritance to them.

        IF NOT turnstile^.Committed THEN
            KiAcquireThreadElevated ( owner )

            turnstile^.Committed = TRUE

            RtlInsertAtHeadList (
                &owner^.PiTurnstileListHead, // head
                &turnstile^.PiEntry, // entry
            )

            KiReleaseThreadElevated ( owner )
        END

#IF BLD_MP
        IF owner^.Status == KI_THREAD_RUNNING THEN
            // The owner exists and is currently running on another processor.
            // Spin for a while to see if we can get the lock without blocking.

            KiReleaseChain ( chain, KI_IPL_APC )

            i := KI_SPIN_CYCLES

            WHILE i DO
                IF turnstile^.Awoken THEN
                    // It was freed!

                    GOTO UnreferenceAndLeave
                END

                // Stop the compiler from optimizing this loop out.

                BARRIER

                i -= 1
            END

            KiAcquireChain ( chain )

            IF turnstile^.Awoken THEN
                // Owner no longer valid.

                GOTO UnreferenceAndLeaveChainHeld
            END
        END
#END

        // We're really going to wait, so do priority boosting.

        KiAcquireThreadElevated ( owner )

        KiReleaseChainElevated ( chain )

        IF owner^.PriorityFloor < thread^.BestowedPriority OR
            (thread^.BestowedInteractivity AND
            NOT owner^.InteractivityFloor) THEN

            // Raise the priority floor. Returns with the thread lock released.

            KiBoostPriority (
                owner, // owner
                thread, // thread
                chain, // chain
            )

        ELSE
            KiReleaseThread ( owner, KI_IPL_APC )
        END
    END

    // Wait on the turnstile event.
    // This wait can be cancelled if a kernel APC arrives, but the kernel APC
    // will not be delivered since we're at KI_IPL_APC. This allows us to
    // clean up our usage of our turnstile, which lets the APC grab turnstile-
    // -backed locks once it is actually delivered when we lower IPL.

    alertable := KE_CANCEL_ON_KAPC

    IF ipl == KI_IPL_APC THEN
        // The lock is APC-safe so we shouldn't cancel upon receiving a KAPC.

        alertable = KE_UNALERTABLE
    END

    KeWaitForSingleObject (
        KE_KERNEL_MODE, // waitmode
        alertable, // alertable
        NULLPTR, // timeout
        &turnstile^.Event.Header, // object
    )

@UnreferenceAndLeave

    KiAcquireChain ( chain )

@UnreferenceAndLeaveChainHeld

    KiAcquireThreadElevated ( thread )

    // Remove the thread from the turnstile's maxheap.

    thread^.BlockedOnTurnstile = NULLPTR

    KiAcquireTurnstileElevated ( turnstile )

    RtlRemoveFromHeap (
        &KiCompareThreads, // comparisonfunc
        &turnstile^.WaiterHeapRoot, // rootptr
        &thread^.TurnstileEntry, // entry
    )

    KiReleaseTurnstileElevated ( turnstile )

    KiReleaseThreadElevated ( thread )

#IF BLD_CHK
    IF thread^.Turnstile != NULLPTR THEN
        KeCrash ( "KiBlockOnLock: magically got a turnstile back\n" )
    END
#END

    IF turnstile^.Free THEN
        // Take a turnstile from the free list.

        otherturnstile = turnstile^.Free
        turnstile^.Free = otherturnstile^.Free

        thread^.Turnstile = otherturnstile

    ELSE
        // Steal the turnstile itself.

        thread^.Turnstile = turnstile

        IF NOT turnstile^.Awoken THEN
            // It wasn't signaled, which means its still on the chain.
            // This happens in the case where we set up a turnstile, but then
            // decided to back out. Since the free list is empty, we're the only
            // thread with a pointer to this turnstile; nobody can be waiting
            // and no priority inheritance has been applied. Therefore we can
            // just remove the turnstile from the chain here.

            RtlRemoveEntryList ( &turnstile^.ChainEntry )

            IF turnstile^.Committed THEN
                KiAcquireThreadElevated ( owner )

                RtlRemoveEntryList ( &turnstile^.PiEntry )

                KiReleaseThreadElevated ( owner )
            END
        END
    END

    KiReleaseChain ( chain, ipl )

    // Return to retry the lock.
END

FN KiComputeFloor (
    IN thread : ^KeThread,
)

    // Compute a new priority floor for the thread.

    head := &thread^.PiTurnstileListHead

    ipl := KiAcquireThread ( thread )

    // Scan the turnstile list to find the highest priority.

    listentry := head^.Next
    floor := 0
    interactivityfloor := FALSE

    WHILE listentry != head DO
        turnstile := CONTAINEROF listentry TO KiTurnstile.PiEntry

        KiAcquireTurnstileElevated ( turnstile )

        IF turnstile^.WaiterHeapRoot THEN
            booster :=
                CONTAINEROF turnstile^.WaiterHeapRoot TO KeThread.TurnstileEntry

            IF booster^.BestowedPriority > floor THEN
                floor = booster^.BestowedPriority
            END

            interactivityfloor |= booster^.BestowedInteractivity
        END

        KiReleaseTurnstileElevated ( turnstile )

        listentry = listentry^.Next
    END

    // Apply the new priority floor.

    thread^.PriorityFloor = floor

    IF floor < thread^.BasePriority THEN
        floor = thread^.BasePriority
    END

    IF floor < thread^.Priority THEN
        // Set new priority.

        KiSetPriorityThread (
            thread, // thread
            floor, // priority
        )
    END

    // Apply the new interactivity floor.

    IF thread^.InteractivityFloor AND NOT interactivityfloor THEN
        // No longer interactive.

        thread^.InteractivityFloor = FALSE

        IF NOT thread^.Interactive THEN
            // We weren't interactive in our own right either, which means we
            // may need to be preempted by someone who is.

            // Remember "thread" is the current thread, on this processor.

            KiCheckInteractivity ( KI_CURRENT_PRB )
        END
    END

    KiReleaseThread ( thread, ipl )
END

FN KiWakeLock (
    IN lock : ^KeLock,
    IN owner : ^KeThread,
)

    // Wake all waiters on the lock.

    // Lock the turnstile chain.

    chain := &KiTurnstileChains[KiTurnstileHash(lock)]

    turnstile : ^KiTurnstile
    otherturnstile : ^KiTurnstile

    head := &chain^.Head

    ipl := KiAcquireChain ( chain )

    listentry := head^.Next

    WHILE listentry != head DO
        turnstile = CONTAINEROF listentry TO KiTurnstile.ChainEntry

        IF turnstile^.Key == lock AND
            turnstile^.Owner == owner THEN

            // Found the turnstile.

            // Invalidate the key.

            turnstile^.Key = NULLPTR

            // Mark awoken so that threads with a pointer to the turnstile know
            // we (the owner) are no longer safe to access.

            turnstile^.Awoken = TRUE

            // Remove it from the chain.

            RtlRemoveEntryList ( &turnstile^.ChainEntry )

            // Signal the event.

            KeSignalEvent (
                &turnstile^.Event, // event
                0, // priorityboost
            )

            IF turnstile^.Committed THEN
                // Some threads were able to determine we owned the lock and may
                // have applied a boost to us, so remove it from our PI list.

                KiAcquireThreadElevated ( owner )

                RtlRemoveEntryList ( &turnstile^.PiEntry )

                KiReleaseThreadElevated ( owner )
            END

            BREAK
        END

        listentry = listentry^.Next
    END

    KiReleaseChain ( chain, ipl )

    IF owner THEN
        // Compute the new priority inheritance floor.
        // We do this unconditionally even if we didn't find a turnstile, or the
        // turnstile didn't specify an owner, because there are cases where we
        // still may have received a priority boost from it.

        KiComputeFloor ( owner )
    END
END

// The following routines deal with the slow path of KeLocks, if the fast path
// routines (which are prefixed with Ke- and are written in assembly) failed.

FN KiAcquireLockShared (
    IN lock : ^KeLock,
    IN oldipl : UWORD,
) : UWORD

    // Acquire a lock shared.
    // This is structured as a CAS loop.

    current := lock^.Ptr
    new : UWORD

    WHILE TRUE DO
        IF current & KI_LOCK_C_BITS == 0 THEN
            // The lock is free and has no exclusive waiters.
            // Try incrementing the share count.

            new = KeCompareSwapPtr (
                &lock^.Ptr, // ptr
                current + KI_LOCK_SHARE_INC, // newvalue
                current, // expectedvalue
            )

            IF new == current THEN
                RETURN oldipl
            END

            // Failed to CAS.

            current = new

            CONTINUE
        END

#IF BLD_CHK
        IF current & KI_LOCK_WRITE_LOCKED AND
            current & KI_LOCK_BITS == KeCurrentThread () THEN

            KeCrash ( "KiAcquireLockShared: recursive lock\n" )
        END
#END

        // If any of the control bits are set, one of the following is true:
        //
        // - The lock is held exclusively.
        // - There are exclusive waiters.
        //
        // In either case we need to sleep on the turnstile and then retry.

        KiBlockOnLock (
            lock, // lock
            current, // current
            oldipl, // oldipl
        )

        current = lock^.Ptr
    END
END

FN KiAcquireLockExclusive (
    IN lock : ^KeLock,
    IN oldipl : UWORD,
) : UWORD

    // Acquire a lock exclusively.
    // This is structured as a CAS loop.

    current := lock^.Ptr
    new : UWORD

    thread := KeCurrentThread ()

    WHILE TRUE DO
        IF current == 0 THEN
            // The lock is free. Try setting it owned with our thread pointer.

            new = KeCompareSwapPtr (
                &lock^.Ptr, // ptr
                thread | KI_LOCK_WRITE_LOCKED, // newvalue
                current, // expectedvalue
            )

            IF new == current THEN
                RETURN oldipl
            END

            // Failed to CAS.

            current = new

            CONTINUE
        END

#IF BLD_CHK
        IF current & KI_LOCK_WRITE_LOCKED AND
            current & KI_LOCK_BITS == thread THEN

            KeCrash ( "KiAcquireLockExclusive: recursive lock\n" )
        END
#END

        // If the lock is nonzero, one of the following is true:
        //
        // - The lock is held exclusively.
        // - The lock is held shared.
        //
        // In either case we need to sleep on the turnstile and then retry.

        KiBlockOnLock (
            lock, // lock
            current, // current
            oldipl, // oldipl
        )

        current = lock^.Ptr
    END
END

FN KiReleaseLock (
    IN lock : ^KeLock,
)

    // Release a lock.
    // This is structured as a CAS loop.

    current := lock^.Ptr
    new : UWORD

    WHILE TRUE DO
        IF current & KI_LOCK_WRITE_LOCKED THEN
            // Locked exclusively.

#IF BLD_CHK
            IF current & KI_LOCK_BITS != KeCurrentThread () THEN
                KeCrash ( "KiReleaseLock: not held by me\n" )
            END
#END
            
            // Try to zero out the lock.

            new = KeCompareSwapPtr (
                &lock^.Ptr, // ptr
                0, // newvalue
                current, // expectedvalue
            )

            IF new != current THEN
                // Failed to CAS.

                current = new

                CONTINUE
            END

            IF current & KI_LOCK_WAITERS THEN
                // Wake the waiters.

                KiWakeLock (
                    lock, // lock
                    KeCurrentThread (), // owner
                )
            END

            LEAVE
        END

        // Locked shared.

#IF BLD_CHK
        IF current & KI_LOCK_BITS == 0 THEN
            KeCrash ( "KiReleaseLock: not held\n" )
        END
#END

        IF current & KI_LOCK_BITS == KI_LOCK_SHARE_INC THEN
            // Only I have it locked shared. Try to zero out the lock.

            new = KeCompareSwapPtr (
                &lock^.Ptr, // ptr
                0, // newvalue
                current, // expectedvalue
            )

            IF new != current THEN
                // Failed to CAS.

                current = new

                CONTINUE
            END

            IF current & KI_LOCK_WAITERS THEN
                // Wake the waiters.

                KiWakeLock (
                    lock, // lock
                    NULLPTR, // owner
                )
            END

            LEAVE
        END

        // Try to decrement the shared count.

        new = KeCompareSwapPtr (
            &lock^.Ptr, // ptr
            current - KI_LOCK_SHARE_INC, // newvalue
            current, // expectedvalue
        )

        IF new == current THEN
            // Got it.

            LEAVE
        END

        current = new
    END
END

EXPORT FN KeConvertLockToShared (
    IN lock : ^KeLock,
)

    // Convert a lock from exclusive to shared.

    current := lock^.Ptr
    new : UWORD

    WHILE TRUE DO
#IF BLD_CHK
        IF current & KI_LOCK_WRITE_LOCKED == 0 THEN
            KeCrash ( "KeConvertLockToShared: not held\n" )
        END

        IF current & KI_LOCK_BITS != KeCurrentThread () THEN
            KeCrash ( "KeConvertLockToShared: not held by me\n" )
        END
#END

        IF current & KI_LOCK_WAITERS THEN
            // If there are waiters, don't bother, too hard to deal with this
            // case.

            LEAVE
        END

        // Try to set held shared with a single owner.

        new = KeCompareSwapPtr (
            &lock^.Ptr, // ptr
            KI_LOCK_SHARE_INC, // newvalue
            current, // expectedvalue
        )

        IF new == current THEN
            // Got it.

            LEAVE
        END

        current = new
    END
END

EXPORT FN KeTryConvertLockToExclusive (
    IN lock : ^KeLock,
) : UWORD

    // Try to convert a lock from shared to exclusive. Return TRUE if upgraded,
    // FALSE if still shared.

    current := lock^.Ptr
    new : UWORD

    thread := KeCurrentThread ()

    WHILE TRUE DO
        IF current & KI_LOCK_WRITE_LOCKED THEN
            // Already exclusive.

#IF BLD_CHK
            IF current & KI_LOCK_BITS != thread THEN
                KeCrash ( "KeTryConvertLockToExclusive: not held by me\n" )
            END
#END

            RETURN TRUE
        END

        IF current & KI_LOCK_WAITERS THEN
            // If there are waiters, don't bother, we will deadlock.

            RETURN FALSE
        END

        IF current & KI_LOCK_BITS != KI_LOCK_SHARE_INC THEN
            // If there are other shared holders, we can't kick them out of the
            // lock, so return failure.

            RETURN FALSE
        END

        // Try to set exclusive, owned by me.

        new = KeCompareSwapPtr (
            &lock^.Ptr, // ptr
            KI_LOCK_WRITE_LOCKED | thread, // newvalue
            current, // expectedvalue
        )

        IF new == current THEN
            // Got it.

            RETURN TRUE
        END

        current = new
    END
END