//
// Implementation of "turnstiles" (invented by Solaris) for the MINTIA Kernel.
//
// Turnstiles are a locking mechanism whereby a single pointer-sized datum can
// be used as a mutex or rwlock, by storing a block in a hash table keyed by
// the address of the lock upon contention.
//
// NT "pushlocks" accomplish similar goals but have a thread-local block stored
// on the stack of each contending thread. This decentralization makes it easier
// on cache (each thread can do adaptive spinning in its own stack), but makes
// it a little harder to accomplish priority inheritance. Since priority
// inheritance is of great importance to the robustness of the MINTIA Executive
// (which is almost completely preemptible aside from the scheduler), the
// original usage of pushlocks in MINTIA was quickly replaced with turnstiles.
// An "autoboost"-like mechanism could have been implemented for pushlocks but
// this would have taken more time than I was willing to spend.
//

#INCLUDE "Ki.hjk"

KiTurnstileListHead : ^KiTurnstile = NULLPTR

#IF BLD_MP

#MACRO KiAcquireChain ( chain ) [
    KiAcquireSpinlockRaise ( &(chain)^.Spinlock )
]

#MACRO KiReleaseChain ( chain, ipl ) [
    KiReleaseSpinlockLower ( &(chain)^.Spinlock, ipl )
]

#MACRO KiAcquireChainElevated ( chain ) [
    KiAcquireSpinlock ( &(chain)^.Spinlock )
]

#MACRO KiReleaseChainElevated ( chain ) [
    KiReleaseSpinlock ( &(chain)^.Spinlock )
]

#MACRO KiAcquireTurnstileElevated ( turnstile ) [
    KiAcquireSpinlock ( &(turnstile)^.Spinlock )
]

#MACRO KiReleaseTurnstileElevated ( turnstile ) [
    KiReleaseSpinlock ( &(turnstile)^.Spinlock )
]

KiTurnstileListLock : KiSpinlock = KI_INITIAL_SPINLOCK

#MACRO KiAcquireTurnstileList () [
    KiAcquireSpinlockRaise ( &KiTurnstileListLock )
]

#MACRO KiReleaseTurnstileList ( ipl ) [
    KiReleaseSpinlockLower ( &KiTurnstileListLock, ipl )
]

#ELSE

#MACRO KiAcquireChain ( chain ) [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseChain ( chain, ipl ) [
    KiLowerIpl ( ipl )
]

#MACRO KiAcquireChainElevated ( chain ) []

#MACRO KiReleaseChainElevated ( chain ) []

#MACRO KiAcquireTurnstileElevated ( turnstile ) []

#MACRO KiReleaseTurnstileElevated ( turnstile ) []

#MACRO KiAcquireTurnstileList () [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseTurnstileList ( ipl ) [
    KiLowerIpl ( ipl )
]

#END

#DEFINE KI_TURNSTILE_CHAINS 128

#IF ( == BLD_BITS 32 )

#DEFINE KI_TURNSTILE_HASH_SHIFT 2

#ELSE

#DEFINE KI_TURNSTILE_HASH_SHIFT 3

#END

#MACRO KiTurnstileHash ( address ) [
    ((address >> KI_TURNSTILE_HASH_SHIFT) & (KI_TURNSTILE_CHAINS - 1))
]

STRUCT KiTurnstileChain
    Head : RtlListEntry,
#IF BLD_MP
    Spinlock : KiSpinlock,
#END
END

KiTurnstileChains : KiTurnstileChain[KI_TURNSTILE_CHAINS]

#DEFINE KI_INITIAL_TURNSTILES [(KI_MAXIMUM_PROCESSORS + 1)]

#DEFINE KI_SPIN_CYCLES 400

KiInitialTurnstiles : KiTurnstile[KI_INITIAL_TURNSTILES]

KiTurnstileIndex : ULONG = 0

#SECTION "INITtext"
FN KeAllocateInitialTurnstile () : ^KiTurnstile

    // Allocate an initial turnstile.

    index := KeIncrementUlong (
        &KiTurnstileIndex, // ptr
        1, // inc
    )

#IF BLD_CHK
    IF index >= KI_INITIAL_TURNSTILES THEN
        KeCrash ( "KeAllocateInitialTurnstile: no more turnstiles\n" )
    END
#END

    RETURN &KiInitialTurnstiles[index]
END

#SECTION "INITtext"
FN KiInitializeTurnstiles ()

    // Initialize the turnstile package.

    // Initialize the chains.

    i := 0

    WHILE i < KI_TURNSTILE_CHAINS DO
        RtlInitializeList ( &KiTurnstileChains[i].Head )

        i += 1
    END
END

FN (RtlLessThanF) KiCompareThreads (
    IN a : ^RtlHeapEntry,
    IN b : ^RtlHeapEntry,
) : UWORD

    // Compare the bestowed priority of two threads for insertion into the
    // turnstile's maxheap. Since it's a maxheap, we will return whether a>b so
    // that higher priority threads end up at the root.

    // Interactive threads are always greater than noninteractive threads.
    // If interactivity is the same, it's determined by the priority.

    thread1 := CONTAINEROF a TO KeThread.TurnstileEntry
    thread2 := CONTAINEROF b TO KeThread.TurnstileEntry

    IF thread1^.BestowedInteractivity OR
        thread1^.BestowedPriority >= OS_PRIORITY_LOW_REALTIME THEN

        IF thread2^.BestowedInteractivity OR
            thread2^.BestowedPriority >= OS_PRIORITY_LOW_REALTIME THEN

            RETURN thread1^.BestowedPriority > thread2^.BestowedPriority

        ELSE
            RETURN TRUE
        END

    ELSEIF thread2^.BestowedInteractivity OR
        thread2^.BestowedPriority >= OS_PRIORITY_LOW_REALTIME THEN

        RETURN FALSE

    ELSE
        RETURN thread1^.BestowedPriority > thread2^.BestowedPriority
    END
END

FN KiBoostPriority (
    IN owner : ^KeThread,
    IN thread : ^KeThread,
    IN interactive : UWORD,
    IN priority : UWORD,
) : UWORD

    // As required, boost the priority of the thread and all of the threads upon
    // which it depends to make progress.

    original := owner

    WHILE TRUE DO
        // Boost the owner. His lock is held on entry, released on exit.

        boost := FALSE

        IF owner^.InteractivityFloor OR
            owner^.PriorityFloor >= OS_PRIORITY_LOW_REALTIME THEN

            // This owner goes on the real time queues.
            // I should only boost him if I do too.

            IF interactive OR priority >= OS_PRIORITY_LOW_REALTIME THEN
                boost = TRUE
            END

        ELSE
            // This owner goes on the timeshared queues.

            boost = TRUE
        END

        IF boost THEN
            boost = FALSE

            IF interactive AND NOT owner^.InteractivityFloor THEN
                // Raise the interactivity floor.

                owner^.InteractivityFloor = TRUE

                IF NOT owner^.Interactive THEN
                    // It wasn't interactive and we just raised the floor, so
                    // it's probably in the wrong queue now.

                    KiMoveToInteractiveQueueThread ( owner )
                END

                boost = TRUE
            END

            IF owner^.PriorityFloor < priority THEN
                // Raise the priority floor.

                owner^.PriorityFloor = priority

                IF owner^.Priority < owner^.PriorityFloor THEN
                    // Raise the priority.

                    KiSetPriorityThread (
                        owner, // thread
                        owner^.PriorityFloor, // priority
                    )
                END

                boost = TRUE
            END
        END

        IF NOT boost THEN
            // Didn't boost, we're done.

            BREAK
        END

        // We have to follow the chain of lock owners and boost them all.
        // Each blocked thread is linked to its turnstile by BlockedOnTurnstile
        // which is guarded with its thread lock. Each turnstile is linked to
        // its current owner by the Owner field. Therefore we can find all
        // threads that are indirectly depended upon by this thread to make
        // progress; all owners of locks being waited for, by owners of locks
        // being waited for, by owners of locks being waited for, etc, by this
        // thread.

        turnstile := owner^.BlockedOnTurnstile

        IF NOT turnstile THEN
            // Not blocked on a turnstile, return.

            BREAK
        END

        // Move the waiter in the turnstile's maxheap to reflect a new
        // bestowed priority.

        KiAcquireTurnstileElevated ( turnstile )

        RtlRemoveFromHeap (
            &KiCompareThreads, // comparisonfunc
            &turnstile^.WaiterHeapRoot, // rootptr
            &owner^.TurnstileEntry, // entry
        )

        // Set new bestowed.

        owner^.BestowedPriority = owner^.Priority
        owner^.BestowedInteractivity = (owner^.Interactive |
            owner^.InteractivityFloor)

        // Re-insert.

        RtlInsertIntoHeap (
            &KiCompareThreads, // comparisonfunc
            &turnstile^.WaiterHeapRoot, // rootptr
            &owner^.TurnstileEntry, // entry
        )

        KiReleaseTurnstileElevated ( turnstile )

#IF BLD_MP
        // Set Boosted flag so that if he's in the middle of boosting stuff
        // himself, he knows to retry since his bestowed priority just changed.

        owner^.Boosted = TRUE
#END

        IF turnstile^.Event.Header.SignalCount THEN
            // The turnstile was already awoken and this thread just hasn't made
            // its way out of KiBlockOnLock yet. Note that we aren't holding any
            // lock that guards this field so this is just a hint; it
            // could change from FALSE to TRUE at any moment after this (the
            // reverse, however, could not happen).

            BREAK
        END

#IF BLD_MP
        chain := &KiTurnstileChains[KiTurnstileHash(turnstile^.Key)]

        // Try to acquire the chain spinlock. Note that this is out of order
        // with respect to the thread lock, so we only try-acquire it and retry
        // the entire lock operation if we fail.

        IF NOT KiTryAcquireSpinlock ( &chain^.Spinlock ) THEN
            // Failed to acquire it.

            KiReleaseThread ( owner, KI_IPL_APC )

            // Indicate to caller that a retry is needed.

            RETURN TRUE
        END

        IF turnstile^.Event.Header.SignalCount THEN
            // The turnstile was awoken before we could acquire the chain
            // spinlock.

            KiReleaseChainElevated ( chain )

            BREAK
        END
#END

        KiReleaseThreadElevated ( owner )

        // Acquire the spinlock of the current owning thread of this next
        // turnstile.

        owner = turnstile^.Owner

        IF NOT owner THEN
            // There is no owner of the turnstile; the lock is held shared.

            KiReleaseChain ( chain, KI_IPL_APC )

            // Indicate to caller that no retry is necessary.

            RETURN FALSE
        END

        IF owner == original THEN
            // A cycle in the lock dependency chain indicates deadlock.
            // Crash here or else we'll spin forever.

            KeCrash ( "Turnstile waiter cycle (deadlock!)\n" )
        END

        KiAcquireThreadElevated ( owner )

        KiReleaseChainElevated ( chain )
    END

    KiReleaseThread ( owner, KI_IPL_APC )

    // Indicate to caller that no retry is necessary.

    RETURN FALSE
END

FN KiBlockOnLock (
    IN lock : ^KeLock,
    IN current : UWORD,
    IN oldipl : UWORD,
)

    // Block on the lock. First acquire a pointer to the current thread.

    thread := KeCurrentThread ()

    // Lock the turnstile chain.

    chain := &KiTurnstileChains[KiTurnstileHash(lock)]

    turnstile : ^KiTurnstile
    otherturnstile : ^KiTurnstile

    owner : ^KeThread = NULLPTR

    IF current & KI_LOCK_WRITE_LOCKED THEN
        owner = CAST current & KI_LOCK_BITS TO ^KeThread
    END

    ipl := KiAcquireChain ( chain )

    // Set that there are waiters now. This will cause releasing threads to
    // signal the turnstile event.

    // We do this CAS even if the waiters bit is already set because we want to
    // also make sure that the owner (or the state of not having one; i.e.
    // being held shared) did not change before we were able to set the WAITERS
    // bit. This is because we need to be absolutely sure that whatever owner we
    // see in our "current" variable (which captures the lock word during a
    // certain timeframe) will be the exact thread to awaken this turnstile at
    // some point *after* this CAS is performed.

    IF KeCompareSwapPtrAbortOnFault (
        &lock^.Ptr, // ptr
        current | KI_LOCK_WAITERS, // newvalue
        current, // expectedvalue
    ) != current THEN

        // Something changed.

        // We also may have taken a page fault on the lock word. We cannot
        // handle this at this moment because our turnstile is tied up and the
        // page fault handler has to take turnstile-backed locks. The page
        // fault will be serviced when the caller tries again to claim the lock.
        // Also we're at an elevated IPL holding a spinlock so that's another
        // reason.

        KiReleaseChain ( chain, ipl )

        LEAVE
    END

    // Scan the chain for the relevant turnstile.

    listentry := chain^.Head.Next

    WHILE TRUE DO
        IF listentry == &chain^.Head THEN
            // Reached the end of the chain and didn't find the right turnstile.
            // We'll use our thread's turnstile.

            turnstile = thread^.Turnstile

#IF BLD_CHK
            IF NOT turnstile THEN
                KeCrash ( "KiBlockOnLock: no turnstile\n" )
            END

            thread^.Turnstile = NULLPTR
#END

            // Initialize it.

            turnstile^.Key = lock
            turnstile^.Free = NULLPTR
            turnstile^.Owner = owner

#IF BLD_MP
            KiInitializeSpinlock ( &turnstile^.Spinlock )
#END

            RtlInsertAtHeadList (
                &chain^.Head, // head
                &turnstile^.ChainEntry, // entry
            )

            turnstile^.WaiterHeapRoot = NULLPTR

            KeInitializeEvent (
                &turnstile^.Event, // event
                "Turnstile", // name
                TRUE, // notification
                FALSE, // signalstate
            )

            IF owner THEN
                KiAcquireThreadElevated ( owner )

                RtlInsertAtHeadList (
                    &owner^.PiTurnstileListHead, // head
                    &turnstile^.PiEntry, // entry
                )

                KiReleaseThreadElevated ( owner )
            END

            BREAK
        END

        turnstile = CONTAINEROF listentry TO KiTurnstile.ChainEntry

        IF turnstile^.Key == lock AND
            turnstile^.Owner == owner THEN

            // Found a turnstile. Stash ours on the free list for this
            // turnstile. We "donate" it like this so that anybody who wakes
            // up can quickly grab one to replace theirs.

            otherturnstile = thread^.Turnstile

            otherturnstile^.Free = turnstile^.Free
            turnstile^.Free = otherturnstile

#IF BLD_CHK
            thread^.Turnstile = NULLPTR
#END

            BREAK
        END

        listentry = listentry^.Next
    END

    KiAcquireThreadElevated ( thread )

    // Capture current priority as the BestowedPriority.

    priority := thread^.Priority
    thread^.BestowedPriority = priority

    interactive := (thread^.Interactive | thread^.InteractivityFloor)
    thread^.BestowedInteractivity = interactive

#IF BLD_MP
    thread^.Boosted = FALSE
#END

    thread^.BlockedOnTurnstile = turnstile

    // Insert the thread into the turnstile's max heap.

    KiAcquireTurnstileElevated ( turnstile )

    RtlInsertIntoHeap (
        &KiCompareThreads, // comparisonfunc
        &turnstile^.WaiterHeapRoot, // rootptr
        &thread^.TurnstileEntry, // entry
    )

    KiReleaseTurnstileElevated ( turnstile )

    KiReleaseThreadElevated ( thread )

    IF owner THEN
        // At this point we know exactly who owns this lock and we know they
        // haven't fully left the lock yet, which means its safe to apply
        // priority inheritance to them since they definitely exist and will
        // continue to do so until we release the chain lock and their thread
        // lock.

#IF BLD_MP
        IF owner^.Status == KI_THREAD_RUNNING THEN
            // The owner exists and is currently running on another processor.
            // Spin for a while to see if we can get the lock without blocking.

            KiReleaseChain ( chain, KI_IPL_APC )

            i := KI_SPIN_CYCLES

            WHILE i DO
                IF turnstile^.Event.Header.SignalCount THEN
                    // It was freed!

                    GOTO UnreferenceAndLeave
                END

                // Stop the compiler from optimizing this loop out.

                BARRIER

                KeSpinPause ()

                i -= 1
            END

            KiAcquireChain ( chain )

            IF turnstile^.Event.Header.SignalCount THEN
                // Owner no longer valid.

                GOTO UnreferenceAndLeaveChainHeld
            END
        END
#END

        // We're really going to wait, so do priority boosting.

        KiAcquireThreadElevated ( owner )

        KiReleaseChainElevated ( chain )

        IF owner^.PriorityFloor < priority OR
            (interactive AND NOT owner^.InteractivityFloor) THEN

            // Raise the priority floor. Returns with the thread lock released.

#IF BLD_MP
            IF KiBoostPriority (
                owner, // owner
                thread, // thread
                interactive, // interactive
                priority, // priority
            ) OR thread^.Boosted THEN

                // Failed to try-acquire a spinlock, or I was boosted while
                // boosting. In either case, retry everything.

                GOTO UnreferenceAndLeave
            END
#ELSE
            KiBoostPriority (
                owner, // owner
                thread, // thread
                interactive, // interactive
                priority, // priority
            )
#END

        ELSE
            KiReleaseThread ( owner, KI_IPL_APC )
        END
    
    ELSE
        KiReleaseChain ( chain, KI_IPL_APC )
    END

    // Wait on the turnstile event.
    // This wait can be cancelled if a kernel APC arrives, but the kernel APC
    // will not be delivered since we're at KI_IPL_APC. This allows us to
    // clean up our usage of our turnstile, which lets the APC grab turnstile-
    // -backed locks once it is actually delivered when we lower IPL.

    alertable := KE_UNALERTABLE

    IF ipl == KI_IPL_LOW THEN
        // The lock was acquired at LOW IPL, so we should cancel the wait and
        // clean up if KAPCs arrive.

        alertable = KE_CANCEL_ON_KAPC
    END

    KeWaitForSingleObject (
        KE_KERNEL_MODE, // waitmode
        alertable, // alertable
        NULLPTR, // timeout
        &turnstile^.Event.Header, // object
    )

@UnreferenceAndLeave

    KiAcquireChain ( chain )

@UnreferenceAndLeaveChainHeld

    KiAcquireThreadElevated ( thread )

    // Remove the thread from the turnstile's maxheap.

    thread^.BlockedOnTurnstile = NULLPTR

    KiAcquireTurnstileElevated ( turnstile )

    RtlRemoveFromHeap (
        &KiCompareThreads, // comparisonfunc
        &turnstile^.WaiterHeapRoot, // rootptr
        &thread^.TurnstileEntry, // entry
    )

    KiReleaseTurnstileElevated ( turnstile )

    KiReleaseThreadElevated ( thread )

#IF BLD_CHK
    IF thread^.Turnstile != NULLPTR THEN
        KeCrash ( "KiBlockOnLock: magically got a turnstile back\n" )
    END
#END

    IF turnstile^.Free THEN
        // Take a turnstile from the free list anchored in the lock turnstile.

        otherturnstile = turnstile^.Free
        turnstile^.Free = otherturnstile^.Free

        thread^.Turnstile = otherturnstile

    ELSE
        // Steal the lock turnstile itself.

        thread^.Turnstile = turnstile

        IF turnstile^.Event.Header.SignalCount == 0 THEN
            // It wasn't signaled, which means its still on the chain.
            // This happens in the case where we set up a turnstile, but then
            // decided to back out. Since the free list is empty, we're the only
            // thread with a pointer to this turnstile; nobody can be waiting
            // and no priority inheritance has been applied. Therefore we can
            // just remove the turnstile from the chain here.

            RtlRemoveEntryList ( &turnstile^.ChainEntry )

            IF owner THEN
                KiAcquireThreadElevated ( owner )

                RtlRemoveEntryList ( &turnstile^.PiEntry )

                KiReleaseThreadElevated ( owner )
            END
        END
    END

    KiReleaseChain ( chain, ipl )

    // Return to retry the lock.
END

FN KiComputeFloor (
    IN thread : ^KeThread,
)

    // Compute a new priority floor for the thread.

    head := &thread^.PiTurnstileListHead

    ipl := KiAcquireThread ( thread )

    // Scan the turnstile list to find the highest priority.

    listentry := head^.Next
    floor := 0
    interactivityfloor := FALSE

    WHILE listentry != head DO
        turnstile := CONTAINEROF listentry TO KiTurnstile.PiEntry

        KiAcquireTurnstileElevated ( turnstile )

        IF turnstile^.WaiterHeapRoot THEN
            booster :=
                CONTAINEROF turnstile^.WaiterHeapRoot TO KeThread.TurnstileEntry

            IF booster^.BestowedPriority > floor THEN
                floor = booster^.BestowedPriority
            END

            interactivityfloor |= booster^.BestowedInteractivity
        END

        KiReleaseTurnstileElevated ( turnstile )

        listentry = listentry^.Next
    END

    // Apply the new priority floor.

    thread^.PriorityFloor = floor

    IF floor < thread^.BasePriority THEN
        floor = thread^.BasePriority
    END

    IF floor < thread^.Priority THEN
        // Set new priority.

        KiSetPriorityThread (
            thread, // thread
            floor, // priority
        )
    END

    // Apply the new interactivity floor.

    IF thread^.InteractivityFloor AND NOT interactivityfloor THEN
        // No longer interactive.

        thread^.InteractivityFloor = FALSE

        IF NOT thread^.Interactive THEN
            // We weren't interactive in our own right either, which means we
            // may need to be preempted by someone who is.

            // Remember "thread" is the current thread, on this processor.

            KiCheckInteractivity ( KI_CURRENT_PRB )
        END
    END

    KiReleaseThread ( thread, ipl )
END

FN KiWakeLock (
    IN lock : ^KeLock,
    IN owner : ^KeThread,
)

    // Wake all waiters on the lock.

    // Lock the turnstile chain.

    chain := &KiTurnstileChains[KiTurnstileHash(lock)]

    turnstile : ^KiTurnstile
    otherturnstile : ^KiTurnstile

    head := &chain^.Head

    ipl := KiAcquireChain ( chain )

    listentry := head^.Next

    WHILE listentry != head DO
        turnstile = CONTAINEROF listentry TO KiTurnstile.ChainEntry

        IF turnstile^.Key == lock AND
            turnstile^.Owner == owner THEN

            // Found the turnstile.

            // Remove it from the chain.

            RtlRemoveEntryList ( &turnstile^.ChainEntry )

            // Signal the event.

            KeSignalEvent (
                &turnstile^.Event, // event
                0, // priorityboost
            )

            IF owner THEN
                // Remove from our list of turnstiles that gave us a priority
                // boost.

                KiAcquireThreadElevated ( owner )

                RtlRemoveEntryList ( &turnstile^.PiEntry )

                KiReleaseThreadElevated ( owner )
            END

            BREAK
        END

        listentry = listentry^.Next
    END

    KiReleaseChain ( chain, ipl )

    IF owner THEN
        // Compute the new priority inheritance floor.
        // We do this unconditionally even if we didn't find a turnstile, or the
        // turnstile didn't specify an owner, because there are cases where we
        // still may have received a priority boost from it.

        KiComputeFloor ( owner )
    END
END

// The following routines deal with the slow path of KeLocks, if the fast path
// routines (which are prefixed with Ke- and are written in assembly) failed.

FN KiAcquireLockShared (
    IN lock : ^KeLock,
    IN oldipl : UWORD,
) : UWORD

    // Acquire a lock shared.
    // This is structured as a CAS loop.

    current := lock^.Ptr
    new : UWORD

    WHILE TRUE DO
        IF current & KI_LOCK_C_BITS == 0 THEN
            // The lock is free and has no exclusive waiters.
            // Try incrementing the share count.

            new = KeCompareSwapPtr (
                &lock^.Ptr, // ptr
                current + KI_LOCK_SHARE_INC, // newvalue
                current, // expectedvalue
            )

            IF new == current THEN
                RETURN oldipl
            END

            // Failed to CAS.

            current = new

            CONTINUE
        END

#IF BLD_CHK
        IF current & KI_LOCK_WRITE_LOCKED AND
            current & KI_LOCK_BITS == KeCurrentThread () THEN

            KeCrash ( "KiAcquireLockShared: recursive lock\n" )
        END
#END

        // If any of the control bits are set, one of the following is true:
        //
        // - The lock is held exclusively.
        // - There are exclusive waiters.
        //
        // In either case we need to sleep on the turnstile and then retry.

        KiBlockOnLock (
            lock, // lock
            current, // current
            oldipl, // oldipl
        )

        current = lock^.Ptr
    END
END

FN KiAcquireLockExclusive (
    IN lock : ^KeLock,
    IN oldipl : UWORD,
) : UWORD

    // Acquire a lock exclusively.
    // This is structured as a CAS loop.

    current := lock^.Ptr
    new : UWORD

    thread := KeCurrentThread ()

    WHILE TRUE DO
        IF current == 0 THEN
            // The lock is free. Try setting it owned with our thread pointer.

            new = KeCompareSwapPtr (
                &lock^.Ptr, // ptr
                thread | KI_LOCK_WRITE_LOCKED, // newvalue
                current, // expectedvalue
            )

            IF new == current THEN
                RETURN oldipl
            END

            // Failed to CAS.

            current = new

            CONTINUE
        END

#IF BLD_CHK
        IF current & KI_LOCK_WRITE_LOCKED AND
            current & KI_LOCK_BITS == thread THEN

            KeCrash ( "KiAcquireLockExclusive: recursive lock\n" )
        END
#END

        // If the lock is nonzero, one of the following is true:
        //
        // - The lock is held exclusively.
        // - The lock is held shared.
        //
        // In either case we need to sleep on the turnstile and then retry.

        KiBlockOnLock (
            lock, // lock
            current, // current
            oldipl, // oldipl
        )

        current = lock^.Ptr
    END
END

FN KiReleaseLock (
    IN lock : ^KeLock,
)

    // Release a lock.
    // This is structured as a CAS loop.

    current := lock^.Ptr
    new : UWORD

    WHILE TRUE DO
        IF current & KI_LOCK_WRITE_LOCKED THEN
            // Locked exclusively.

#IF BLD_CHK
            IF current & KI_LOCK_BITS != KeCurrentThread () THEN
                KeCrash ( "KiReleaseLock: not held by me\n" )
            END
#END
            
            // Try to zero out the lock.

            new = KeCompareSwapPtr (
                &lock^.Ptr, // ptr
                0, // newvalue
                current, // expectedvalue
            )

            IF new != current THEN
                // Failed to CAS.

                current = new

                CONTINUE
            END

            IF current & KI_LOCK_WAITERS THEN
                // Wake the waiters.

                KiWakeLock (
                    lock, // lock
                    CAST current & KI_LOCK_BITS TO ^KeThread, // owner
                )
            END

            LEAVE
        END

        // Locked shared.

#IF BLD_CHK
        IF current & KI_LOCK_BITS == 0 THEN
            KeCrash ( "KiReleaseLock: not held\n" )
        END
#END

        IF current & KI_LOCK_BITS == KI_LOCK_SHARE_INC THEN
            // Only I have it locked shared. Try to zero out the lock.

            new = KeCompareSwapPtr (
                &lock^.Ptr, // ptr
                0, // newvalue
                current, // expectedvalue
            )

            IF new != current THEN
                // Failed to CAS.

                current = new

                CONTINUE
            END

            IF current & KI_LOCK_WAITERS THEN
                // Wake the waiters.

                KiWakeLock (
                    lock, // lock
                    NULLPTR, // owner
                )
            END

            LEAVE
        END

        // Try to decrement the shared count.

        new = KeCompareSwapPtr (
            &lock^.Ptr, // ptr
            current - KI_LOCK_SHARE_INC, // newvalue
            current, // expectedvalue
        )

        IF new == current THEN
            // Got it.

            LEAVE
        END

        current = new
    END
END

EXPORT FN KeConvertLockToShared (
    IN lock : ^KeLock,
)

    // Convert a lock from exclusive to shared.

    current := lock^.Ptr
    new : UWORD

    WHILE TRUE DO
#IF BLD_CHK
        IF current & KI_LOCK_WRITE_LOCKED == 0 THEN
            KeCrash ( "KeConvertLockToShared: not held\n" )
        END

        IF current & KI_LOCK_BITS != KeCurrentThread () THEN
            KeCrash ( "KeConvertLockToShared: not held by me\n" )
        END
#END

        // Try to set held shared with a single owner.

        new = KeCompareSwapPtr (
            &lock^.Ptr, // ptr
            KI_LOCK_SHARE_INC, // newvalue
            current, // expectedvalue
        )

        IF new == current THEN
            // Got it.

            IF current & KI_LOCK_WAITERS THEN
                // Wake the waiters.

                KiWakeLock (
                    lock, // lock
                    CAST current & KI_LOCK_BITS TO ^KeThread, // owner
                )
            END

            LEAVE
        END

        current = new
    END
END

EXPORT FN KeTryConvertLockToExclusive (
    IN lock : ^KeLock,
) : UWORD

    // Try to convert a lock from shared to exclusive. Return TRUE if upgraded,
    // FALSE if still shared.

    current := lock^.Ptr
    new : UWORD

    thread := KeCurrentThread ()

    WHILE TRUE DO
        IF current & KI_LOCK_WRITE_LOCKED THEN
            // Already exclusive.

#IF BLD_CHK
            IF current & KI_LOCK_BITS != thread THEN
                KeCrash ( "KeTryConvertLockToExclusive: not held by me\n" )
            END
#END

            RETURN TRUE
        END

        IF current & KI_LOCK_BITS != KI_LOCK_SHARE_INC THEN
            // If there are other shared holders, we can't kick them out of the
            // lock, so return failure.

            RETURN FALSE
        END

        // Try to set exclusive, owned by me.

        new = KeCompareSwapPtr (
            &lock^.Ptr, // ptr
            KI_LOCK_WRITE_LOCKED | thread, // newvalue
            current, // expectedvalue
        )

        IF new == current THEN
            // Got it.

            IF current & KI_LOCK_WAITERS THEN
                // Wake the waiters, since they're now operating under the
                // incorrect assumption that the lock is held shared.

                KiWakeLock (
                    lock, // lock
                    NULLPTR, // owner
                )
            END

            RETURN TRUE
        END

        current = new
    END
END