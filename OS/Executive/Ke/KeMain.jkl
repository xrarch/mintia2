//
// Initialization of the Kernel (Ke) subcomponent of the MINTIA Executive.
//

#INCLUDE "Ki.hjk"
#INCLUDE "<inc>/Ps.hjk"

PUBLIC KeIdleProcess : PsProcess

EXPORT KeLoaderBlock : BlInfoRecord

PUBLIC KeSystemPageDirectoryPfn : UWORD

FNPTR DbgMainF ()

PUBLIC KeSharedUserPage : ^OsSharedUserPage

#IF BLD_CHK

PUBLIC KiAssertionMessage : UBYTE[40]

#END

#IF BLD_MP

KiInitializeCount : ULONG

KiAnnounceSpinlock : KiSpinlock = KI_INITIAL_SPINLOCK

PUBLIC KiWorkBalanceDpc : KeDpc

PUBLIC KiMaximumBalanceIterations : ULONG

#MACRO KiAcquireAnnounce () [
    KiAcquireSpinlockRaise ( &KiAnnounceSpinlock )
]

#MACRO KiReleaseAnnounce ( oldipl ) [
    KiReleaseSpinlockLower ( &KiAnnounceSpinlock, oldipl )
]

#ELSE

#MACRO KiAcquireAnnounce () [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseAnnounce ( oldipl ) [
    KiLowerIpl ( oldipl )
]

#END

// FORWARD
EXTERN FN (KeStartThreadF) KiThreadedMain (
    IN context1 : UWORD,
    IN context2 : UWORD,
)

FN (KeStartThreadF) KiIdleLoop (
    IN context1 : UWORD,
    IN context2 : UWORD,
)


    ipl := KiAcquireAnnounce ()

    RtlPrint ( "KiIdleLoop: Processor %u idling\n", KiCurrentProcessor () )

    KiReleaseAnnounce ( ipl )

#IF BLD_MP
    prb := KI_CURRENT_PRB_LOCAL

    // Atomically decrement the initialization count to indicate to the boot
    // processor that we made it into our idle thread.

    KeIncrementUlong (
        &KiInitializeCount, // ptr
        0xFFFFFFFF, // ulong
    )
#END

    WHILE TRUE DO
        KiWaitForInterrupt ()

#IF BLD_MP
        IF prb^.StealWork THEN
            // Time to try stealing work.

            prb^.StealWork = FALSE

            KiStealWork ()
        END
#END
    END
END

#SECTION "INITtext"
FN KiInitializePrb (
    IN prb : ^KiPrb,
    IN bootprocessor : UWORD,
)

    // Initialize this Prb.

    // Loader stashed words in the Prb at the following indices:
    // 0 - Processor ID
    // 1 - Software IDT pointer
    // 2 - Idle stack pointer

    idword := CAST prb TO ^UWORD

    id := idword[0]
    irqdt := idword[1]
    stackbase := idword[2]

    // Clear the Prb.

    RtlFillMemoryWithUlong (
        prb, // ptr
        BL_PRB_SIZE, // sz
        0, // ulong
    )

    // Place the stashed words at their proper place.

    prb^.Id = id
    prb^.IrqDispatchTable = CAST irqdt TO ^VOID
    prb^.IdleStackBase = CAST stackbase TO ^VOID

    // On some architectures, the thing we get from KI_CURRENT_PRB_LOCAL is not
    // a globally visible address for this Prb.

#IF KI_VIRTUAL_PRB
    prb^.RealVirtual = prb
#END

    RtlInitializeList ( &prb^.DpcListHead )

    RtlInitializeList ( &prb^.StackSwapCandidateListHead )

#IF BLD_MP
    KiInitializeSpinlock ( &prb^.DpcQueueLock )
    KiInitializeSpinlock ( &prb^.ReadyQueueLock )
    KiInitializeSpinlock ( &prb^.TimerTreeLock )
    KiInitializeSpinlock ( &prb^.StackSwapListLock )

    prb^.StashedCurrentThreadInfo = KiSetIdleInStash ( 0, TRUE )
    prb^.IdleDeferredIpiEvents = 0
    prb^.InIdleLoop = TRUE
#END

    KeInitializeDpc (
        &prb^.TimerExpirationDpc, // dpc
        &KiTimerExpiration, // function
    )

#IF ( == BLD_BITS 64 )
    prb^.EarliestTimerMs.Quad = 0xFFFFFFFFFFFFFFFF

#ELSE
    prb^.EarliestTimerMs.Low = 0xFFFFFFFF
    prb^.EarliestTimerMs.High = 0xFFFFFFFF
#END

    prb^.Ipl = KI_IPL_LOW

    // Initialize the IRQ dispatch table.

    i := 0

    WHILE i < HAL_VECTOR_MAX DO
        prb^.IrqDispatchTable[i] = &KiUnexpectedInterruptObject

        i += 1
    END

    // Initialize the real time scheduler queues.

    i = 0

    WHILE i < OS_PRIORITY_MAX DO
        RtlInitializeList ( &prb^.RealTimeListHeads[i] )

        i += 1
    END

    // Initialize the timeshared scheduler queues.

    i = 0

    WHILE i < KI_TIMESHARED_QUEUES DO
        RtlInitializeList ( &prb^.CalendarListHeads[i] )

        i += 1
    END

    // Initialize the idle scheduler queue.

    RtlInitializeList ( &prb^.IdleListHead )

    // Initialize the idle thread.

    startfunc : KeStartThreadF

    IF bootprocessor THEN
        startfunc = &KiThreadedMain

    ELSE
        startfunc = &KiIdleLoop
    END

    KeInitializeThread (
        &KeIdleProcess.Pcb, // process
        &prb^.IdleThread, // thread
        "IdleThread", // name
        prb^.IdleStackBase, // kstack
        BL_IDLE_STACK_SIZE, // kstacksize
        KeAllocateInitialTurnstile (), // turnstile
        startfunc, // startfunc
        0, // context1
        0, // context2
    )

    prb^.IdleThread.Priority = OS_PRIORITY_IDLE
    prb^.IdleThread.BasePriority = OS_PRIORITY_IDLE

#IF BLD_MP
    prb^.IdleThread.CurrentPrb = prb
#END

    // Initialize frozen context to zero so that the debugger doesn't try to
    // read it if we failed to freeze.

    prb^.FrozenContext = NULLPTR

    // Stash the Prb ID.

    KiStashPrbId ( prb, id )
END

#IF BLD_MP

#SECTION "INITtext"
FN (HalStartProcessorF) KiStartOtherProcessor ()

    // This is the first code that runs in the context of a non-boot processor.
    // We assume any context required to access the Prb has been set up by the
    // Loader. We have to initialize ourselves and then jump into our idle
    // thread to wait for work.

    prb := KI_CURRENT_PRB

    // Initialize architectural support.

    KiInitializeArchitecture ( prb )

    // Initialize HAL.

    HalProcessorInitialize ( prb )

    // Become a subject of the dispatcher.

    KiJumpIntoIdleThread ( prb )
END

#END

EXTERN FN ExStartExecutive ()

#SECTION "INITtext"
FN (KeStartThreadF) KiThreadedMain (
    IN context1 : UWORD,
    IN context2 : UWORD,
)

    // This is the first code that runs in thread context during the lifetime of
    // the system. We need to perform phase 0 initialization of the Executive.

    ExStartExecutive ()

    // Go into the idle loop.

    KiIdleLoop (
        context1, // context1
        context2, // context2
    )
END

#SECTION "INITtext"
FN KiFixupLoaderBlockLists ()

    // Fix up the circular lists in the loader block so that they still point to
    // the newly relocated list heads.

    listhead := &KeLoaderBlock.ResourceListHead

    listhead^.Next^.Prev = listhead
    listhead^.Prev^.Next = listhead

    listhead = &KeLoaderBlock.DllListHead

    listhead^.Next^.Prev = listhead
    listhead^.Prev^.Next = listhead

    listhead = &KeLoaderBlock.DescriptorListHead

    listhead^.Next^.Prev = listhead
    listhead^.Prev^.Next = listhead
END

#SECTION "INITtext"
EXPORT FN KeMain (
    IN loaderblock : ^BlInfoRecord,
)

    // At this point:
    //
    // o  We have been transferred to from the Loader.
    // o  We are on a page-sized initial stack.
    // o  We have no thread context - we need to hand-craft one.
    // o  Interrupts are disabled. Paging is enabled.
    // o  The PFN database has been constructed by the Loader for us. Not much
    //    else has been.
    // o  The firmware - no matter what system we are on - is inaccessible, as a
    //    rule, even if we could theoretically use it on some platform. Only
    //    exception are firmware services that *must* be called at certain
    //    points in HAL initialization, and only then.
    //
    // Any pointers from the Loader may or may not be in a spot where they are
    // permanently accessible, since this may or may not be a platform where the
    // Loader is entered with paging enabled. If it wasn't, the Loader ran out
    // of an identity mapping in what is going to become userspace. Therefore
    // anything from loader-space that we need to access during runtime must be
    // be transferred into the Executive between now and the execution of the
    // first usermode process in order to guarantee its safe to touch. Plus, we
    // are going to reclaim all of the Loader's physical memory during Mm init.

#IF BLD_CHK
    // Set this up so that we don't waste space on repeated strings.

    RtlCopyString (
        &KiAssertionMessage[0], // dest
        "ASSERTION FAILED IN %s() AT %s:%d\n%s\n", // src
        40, // bufsize
    )
#END

    // Initialize the KeCrash module.

    KiInitializeCrashing ()

    // Start by copying the loader block into the Executive.

    RtlCopyBytes (
        &KeLoaderBlock, // dest
        loaderblock, // src
        SIZEOF BlInfoRecord, // sz
    )

    // Fix up loader block lists.

    KiFixupLoaderBlockLists ()

    // Initialize the idle process.

    KeInitializeProcess (
        &KeIdleProcess.Pcb, // process
        "Idle", // name
    )

    KeIdleProcess.Pcb.PageDirectoryPfn = KeLoaderBlock.SystemPageDirectoryPfn

    // Initialize turnstiles.

    KiInitializeTurnstiles ()

    // Initialize the Prbs.

    prb := KiPrbFromNumber ( 0 )

    initprb := prb
    i := 0

    WHILE i < KeLoaderBlock.ProcessorCount DO
        KiInitializePrb (
            initprb, // prb
            i == 0, // bootprocessor
        )

        i += 1
        initprb += BL_PRB_SIZE
    END

    // Initialize architectural support.

    KiInitializeArchitecture ( prb )

    // Perform early initialization of the HAL. This will perform baseline
    // initialization of integral platform components such as the interval
    // timer. Also, we get a boot console which is guaranteed to stay sane
    // throughout the lifetime of the system and at any IPL.

    HalEarlyInitialize ()

    // Now that we have a console, announce ourselves.

    HalCenterPrint ( "MINTIA INITIAL CONSOLE\n" )

    // Perform platform-specific initialization for the boot processor.

    KeAssert ( SIZEOF KiPrb <= BL_PRB_SIZE )

    HalProcessorInitialize ( prb )

    // Initialize the shared user page.

    KeSharedUserPage = KeLoaderBlock.VirtualSharedUserPage

    KiUpdateTime ( prb )

    // Export the page directory PFN.

    KeSystemPageDirectoryPfn = KeLoaderBlock.SystemPageDirectoryPfn

    // Perform early initialization of the debugger.

    IF KeLoaderBlock.DbgMain THEN
        dbgmain := CAST KeLoaderBlock.DbgMain TO DbgMainF

        dbgmain ()
    END

    // Initialize the stack swapper event. This is waited upon by a component
    // of Mm which outswaps kernel stacks and processes.

    KeInitializeEvent (
        &KeStackSwapperEvent, // event
        "StackSwap", // name
        FALSE, // notification
        FALSE, // signalstate
    )

#IF BLD_MP
    // Initialize the work balancing DPC.

    KeInitializeDpc (
        &KiWorkBalanceDpc, // dpc
        &KiBalanceWork, // func
    )

    // Compute the maximum number of balance iterations as the number of
    // possible pairs between processors plus one. This is the same as the
    // number of possible imbalances plus one for good measure.
    //
    // This is calculated as n choose 2 which simplifies to n(n-1)/2 + 1.

    KiMaximumBalanceIterations = (KeLoaderBlock.ProcessorCount *
        (KeLoaderBlock.ProcessorCount - 1)) / 2 + 1

    IF KiMaximumBalanceIterations > 64 THEN
        KiMaximumBalanceIterations = 64
    END

    // We're ready to pull the other processors into the system.

    KiInitializeCount = KeLoaderBlock.ProcessorCount - 1

    // Bring em in.

    HalStartProcessors ( &KiStartOtherProcessor )

    // Wait for them to signal that they've been initialized.

    WHILE KiInitializeCount DO
        // Language BARRIER to stop this loop from being optimized out.

        BARRIER
    END
#END

    // Become a subject of the dispatcher.

    KiJumpIntoIdleThread ( prb )

    KeCrash ( "KiJumpIntoThread returned\n" )
END