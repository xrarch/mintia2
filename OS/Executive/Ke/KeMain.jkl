//
// Initialization of the Kernel (Ke) subcomponent of the MINTIA Executive.
//

#INCLUDE "Ki.hjk"

PUBLIC KiIdleProcess : KeProcess

EXPORT ExLoaderBlock : BlInfoRecord

#SECTION "INIT$text"
FN (KeStartThreadF) KiThreadedMain ()

    // This is the first code that runs in the context of a thread during the
    // lifetime of the system.

    RtlPrint ( "Hi from a thread\n" )

    WHILE TRUE DO
        KiWaitForInterrupt ()
    END
END

#SECTION "INIT$text"
FN KiFixupLoaderBlockLists ()

    // Fix up the circular lists in the loader block so that they still point to
    // the newly relocated list heads.

    listhead := &ExLoaderBlock.ResourceListHead

    listhead^.Next^.Prev = listhead
    listhead^.Prev^.Next = listhead

    listhead = &ExLoaderBlock.DllListHead

    listhead^.Next^.Prev = listhead
    listhead^.Prev^.Next = listhead

    listhead = &ExLoaderBlock.DescriptorListHead

    listhead^.Next^.Prev = listhead
    listhead^.Prev^.Next = listhead
END

#SECTION "INIT$text"
FN KiInitializePrb (
    IN prb : ^KiPrb,
)

    // Initialize this PRB. It has already been filled with zeroes by the Loader
    // so avoid doing that again for those fields where zeroes (and NULLPTR) are
    // the initial state.

    RtlInitializeList ( &prb^.DpcListHead )

#IF BLD_MP
    KiInitializeSpinlock ( &prb^.DpcQueueLock )
    KiInitializeSpinlock ( &prb^.ReadyQueueLock )
    KiInitializeSpinlock ( &prb^.TimerTreeLock )
#END

    KeInitializeDpc (
        &prb^.TimerExpirationDpc, // dpc
        &KiTimerExpiration, // function
    )

#IF ( == BLD_BITS 64 )
    prb^.EarliestTimerMs.Quad = 0xFFFFFFFFFFFFFFFF

#ELSE
    prb^.EarliestTimerMs.Low = 0xFFFFFFFF
    prb^.EarliestTimerMs.High = 0xFFFFFFFF
#END

    prb^.Ipl = KI_IPL_LOW

    // Initialize the IRQ dispatch table.

    i := 0

    WHILE i < HAL_VECTOR_MAX DO
        prb^.IrqDispatchTable[i] = &KiUnexpectedInterruptObject

        i += 1
    END

    // Initialize the real time scheduler queues.

    i = 0

    WHILE i < OS_PRIORITY_MAX DO
        RtlInitializeList ( &prb^.RealTimeListHeads[i] )

        i += 1
    END

    // Initialize the timeshared scheduler queues.

    i = 0

    WHILE i < OS_PRIORITY_LOW_REALTIME DO
        RtlInitializeList ( &prb^.CalendarListHeads[i] )

        i += 1
    END

    // Initialize the idle scheduler queue.

    RtlInitializeList ( &prb^.IdleListHead )

    // Initialize the idle thread.

    KeInitializeThread (
        &KiIdleProcess, // process
        &prb^.IdleThread, // thread
        "IdleThread", // name
        &prb^.IdleStack[0], // kstack
        KI_IDLE_STACK_SIZE, // kstacksize
        &KiThreadedMain, // startfunc
        0, // context1
        0, // context2
    )

    prb^.IdleThread.Priority = OS_PRIORITY_IDLE
    prb^.IdleThread.BasePriority = OS_PRIORITY_IDLE
END

FNPTR DbgMainF ()

#SECTION "INIT$text"
EXPORT FN KeMain (
    IN loaderblock : ^BlInfoRecord,
)

    // At this point:
    //
    // o  We have been transferred to from the Loader.
    // o  We are on a page-sized initial stack.
    // o  We have no thread context - we need to hand-craft one.
    // o  Interrupts are disabled. Paging is enabled.
    // o  The PFN database has been constructed by the Loader for us. Not much
    //    else has been.
    // o  The firmware - no matter what system we are on - is inaccessible, as a
    //    rule, even if we could theoretically use it on some platform. Only
    //    exception are firmware services that *must* be called at certain
    //    points in HAL initialization, and only then.
    //
    // Any pointers from the Loader may or may not be in a spot where they are
    // permanently accessible, since this may or may not be a platform where the
    // Loader is entered with paging enabled. If it wasn't, the Loader ran out
    // of an identity mapping in what is going to become userspace. Therefore
    // anything from loader-space that we need to access during runtime must be
    // be transferred into the Executive between now and the execution of the
    // first usermode process in order to guarantee its safe to touch. Plus, we
    // are going to reclaim all of the Loader's physical memory during Mm init.

    // Initialize the KeCrash module.

    KiInitializeCrashing ()

    // Start by copying the loader block into the Executive.

    RtlCopyBytes (
        &ExLoaderBlock, // dest
        loaderblock, // src
        SIZEOF BlInfoRecord, // sz
    )

    // Fix up loader block lists.

    KiFixupLoaderBlockLists ()

    // Initialize the idle process.

    KeInitializeProcess (
        &KiIdleProcess, // process
        "Idle", // name
    )

    // Initialize the boot processor's PRB.

    prb := KI_CURRENT_PRB

    KiInitializePrb ( prb )

    // Initialize architectural support.

    KiInitializeArchitecture ( prb )

    // Perform early initialization of the HAL. This will perform baseline
    // initialization of integral platform components such as the interval
    // timer. Also, we get a boot console which is guaranteed to stay sane
    // throughout the lifetime of the system and at any IPL.

    HalEarlyInitialize ()

    // Perform early initialization of the debugger.

    IF ExLoaderBlock.DbgMain THEN
        dbgmain := CAST ExLoaderBlock.DbgMain TO DbgMainF

        dbgmain ()
    END

    // Announce ourselves.

    RtlPrint ( "KeMain(): MINTIA is awake!\n" )

    // Switch into our idle thread.

    KiJumpIntoThread ( &prb^.IdleThread )

    KeCrash ( "KiJumpIntoThread returned\n" )
END