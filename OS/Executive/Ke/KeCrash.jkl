//
// Implementation of lithobraking for the MINTIA Executive.
//

#INCLUDE "Ki.hjk"

#IF BLD_MP

KiLinePrintSpinlock : KiSpinlock = KI_INITIAL_SPINLOCK

#END

EXPORT KeDebuggerEntry : KeDebuggerEntryF

KiCrashVerticalListHead : RtlListEntry
KiCrashHorizListHead : RtlListEntry
KiCrashCallbackListHead : RtlListEntry

KiCrashModuleListCallback : KeCrashCallback

KiCrashGate : ULONG = 0

KiRemainingRows : UINT = 0
KiRemainingColumns : UINT = 0
KiColumns : UINT = 0
KiResetX : UINT = 0
KiNextRow : UINT = 0
KiCrashVerticalCount : UINT = 0
KiCrashHorizCount : UINT = 0
KiCrashPrints : UBYTE = FALSE

#DEFINE PLATFORM_FULL_NAME_STR ( STRCAT ( STRCAT "\"" PLATFORM_FULL_NAME ) "\"" )

FN KiCrashPutCharacter (
    IN byte : UBYTE,
)

    IF NOT KiRemainingRows THEN
        LEAVE
    END

    HalPutCharacter ( byte )

    next := FALSE

    IF byte == '\n' THEN
        next = TRUE
    ELSE
        KiRemainingColumns -= 1

        IF KiRemainingColumns == 0 THEN
            next = TRUE
        END
    END

    IF next THEN
        KiRemainingRows -= 1
        KiRemainingColumns = KiColumns
        KiNextRow += 1

        HalSetConsolePosition ( KiResetX, KiNextRow )
    END
END

FN (RtlPrintCallbackF) RtljPrintCallback (
    IN byte : UBYTE,
    IN context : ^VOID,
)

    IF KiCrashPrints THEN
        KiCrashPutCharacter ( byte )
    ELSE
        HalPutCharacter ( byte )
    END
END

FN RtljLockStream (
    IN handle : ^VOID,
) : UWORD

    // Called by RTL before it prints a line.

    lockcontext := KiDisableInterrupts ()

#IF BLD_MP
    // Only try 50000 times to acquire the spinlock in case it's jammed shut.
    // Note that KiTryAcquireSpinlock is already written to spin for a while
    // before giving up, so this is really 50000 * 128 attempts or however many.

@Retry

    i := 50000

    WHILE i DO
        IF KiTryAcquireSpinlock ( &KiLinePrintSpinlock ) THEN
            BREAK
        END

        i -= 1
    END

    IF NOT i THEN
        // Force it open.
        //
        // The HAL console should have its own, smaller locks that guard the
        // mechanisms of its console implementation. This spinlock is just to
        // guarantee atomicity of line printing. So this (by itself) should be
        // harmless.

        KiForceReleaseSpinlock ( &KiLinePrintSpinlock )

        // Retry.

        GOTO Retry
    END
#END

    RETURN lockcontext
END

FN RtljUnlockStream (
    IN handle : ^VOID,
    IN lockcontext : UWORD,
)

    // Called by RTL after it prints a line.

#IF BLD_MP
    KiReleaseSpinlock ( &KiLinePrintSpinlock )
#END

    KiRestoreInterrupts ( lockcontext )
END

FN (KeCrashCallbackF) KiCrashModuleListFunc (
    IN columns : UWORD,
)

#IF ( == BLD_BITS 64 )
    infocols := columns / 48
#ELSE
    infocols := columns / 40
#END

    i := infocols

    WHILE i DO
#IF ( == BLD_BITS 64 )
        RtlPrint ( "DLL Base         TimeStmp Name                 " )
#ELSE
        RtlPrint ( "DLL Base TimeStmp Name                 " )
#END

        i -= 1
    END

    RtlPrint ( "\n" )

    listhead := &KeLoaderBlock.DllListHead
    listentry := listhead^.Next
    i = 0

    WHILE listentry != listhead DO
        dll := CONTAINEROF listentry TO BlDll.Entry

        IF i >= infocols THEN
            RtlPrint ( "\n" )
            i = 0
        END

        RtlPrint (
            "%p %08x %-20s ", // fmt
            dll^.Base,
            dll^.Timestamp,
            RtlGetFileName ( &dll^.Name[0] ),
        )

        i += 1

        listentry = listentry^.Next
    END

    RtlPrint ( "\n" )
END

#SECTION "INITtext"
FN KiInitializeCrashing ()

    // Initialize the list heads.

    RtlInitializeList ( &KiCrashVerticalListHead )
    RtlInitializeList ( &KiCrashHorizListHead )
    RtlInitializeList ( &KiCrashCallbackListHead )

    // Now initialize the standard callbacks.

    KeRegisterCrashCallback (
        &KiCrashModuleListCallback, // callback
        &KiCrashModuleListFunc, // function
        TRUE, // doesprint
        TRUE, // horizontal
    )
END

FN KiDoCrashPrints (
    IN width : UWORD,
    IN height : UWORD,
    IN fmt : ^UBYTE,
    IN argv : ^^VOID,
    IN argc : UWORD,
)

    RtlPrint ( "\n" )

    HalSetConsolePosition ( 0, 0 )

    procname := "?"
    thrdname := "?"
    attprocname := "?"

    prb := KI_CURRENT_PRB

    IF prb^.CurrentThread THEN
        thrdname = &prb^.CurrentThread^.Name[0]
        procname = &prb^.CurrentThread^.ActualProcess^.Name[0]

        IF prb^.CurrentThread^.ActualProcess != prb^.CurrentThread^.Process THEN
            attprocname = &prb^.CurrentThread^.Process^.Name[0]
        ELSE
            attprocname = "N/A"
        END
    END

    RtlPrint (
        "%s BL=%u IPL=%u CPU=%u [%s, %s, %s]\n",
        PLATFORM_FULL_NAME_STR,
        BLD_BASE_LEVEL,
        prb^.Ipl,
        prb^.Id,
        procname,
        thrdname,
        attprocname,
    )

    RtlPrint ( "*** STOP: " )

    RtlPrintByVarTable (
        NULLPTR, // handle
        fmt, // fmt
        argv, // argv
        argc, // argc
    )

    x : UWORD
    y : UWORD

    HalQueryConsolePosition (
        OUT x, // x
        OUT y, // y
    )

    // Call all of the horizontally printing callbacks.
    // These each get a horizontal section of the console that they can greedily
    // consume.

    KiCrashPrints = TRUE

    KiColumns = width
    KiRemainingColumns = KiColumns
    KiResetX = 0
    KiRemainingRows = height - y - 4

    callback : ^KeCrashCallback

    listhead := &KiCrashHorizListHead
    listentry := listhead^.Next

    WHILE listentry != listhead DO
        callback = CONTAINEROF listentry TO KeCrashCallback.Entry

        HalQueryConsolePosition (
            OUT x, // x
            OUT y, // y
        )

        KiRemainingColumns = KiColumns
        KiRemainingRows = height - y - 4
        KiNextRow = y + 1

        HalSetConsolePosition (
            0, // x
            KiNextRow, // y
        )

        callback^.Function ( KiColumns )

        IF NOT KiRemainingRows THEN
            BREAK
        END

        listentry = listentry^.Next
    END

    IF KiRemainingRows AND KiCrashVerticalCount THEN
        // Call each callback. They each get a column of the console.

        HalQueryConsolePosition (
            OUT x, // x
            OUT y, // y
        )

        resetrows := height - y - 4

        colwidth := width / KiCrashVerticalCount

        IF KiCrashVerticalCount != 1 THEN
            colwidth -= 1
        END

        KiColumns = colwidth

        listhead = &KiCrashVerticalListHead
        listentry = listhead^.Next

        WHILE listentry != listhead DO
            callback = CONTAINEROF listentry TO KeCrashCallback.Entry

            KiRemainingRows = resetrows
            KiRemainingColumns = colwidth
            KiNextRow = y + 1

            HalSetConsolePosition (
                KiResetX, // x
                KiNextRow, // y
            )

            callback^.Function ( colwidth )

            KiResetX += colwidth + 1

            listentry = listentry^.Next
        END
    END

    KiCrashPrints = FALSE

    HalSetConsolePosition ( 0, height - 2 )

    HalCenterPrint ( "An error occurred! Please take a screenshot and report the issue.\n" )
    HalCenterPrint ( "The repository can be found at http://www.github.com/xrarch/mintia2." )

    HalSetConsolePosition ( 0, 0 )
END

EXPORT FN KeCrash (
    IN fmt : ^UBYTE,
    ... argv argc
)

    // Disable interrupts ASAP.

    KiDisableInterrupts ()

    // Only one processor should get through the crash gate.
    // Implement this with an atomic increment.
    // This is compiled in on UP builds too since it also catches nested entries
    // into KeCrash.

    oldvalue := KeIncrementUlong ( &KiCrashGate, 1 )

    IF oldvalue THEN
        // We weren't the first. Complain and hang forever.

        RtlPrint (
            "KeCrash: Nested on %u: \n", // fmt
            KiCurrentProcessor (),
        )

        RtlPrintByVarTable (
            NULLPTR, // handle
            fmt, // fmt
            argv, // argv
            argc, // argc
        )

        WHILE TRUE DO
            KiWaitForInterrupt ()
        END
    END

    // We are now the official "crash processor". We are responsible for dumping
    // info to the screen.

#IF BLD_MP
    // Bring other processors to a halt. This may time out, such as if another
    // processor crashed simultaneously and didn't make it through the gate.
    // In any case, we just proceed.

    KiFreezeOtherProcessors ()
#END

    // Call all the non-printing callbacks.

    listhead := &KiCrashCallbackListHead
    listentry := listhead^.Next

    WHILE listentry != listhead DO
        callback := CONTAINEROF listentry TO KeCrashCallback.Entry

        callback^.Function ( 0 )

        listentry = listentry^.Next
    END

    // Call the HAL to do stuff with the console to make the crash visible to
    // the user.

    HalCrashConsole ()

    width : UWORD
    height : UWORD

    HalQueryConsoleSize (
        OUT width, // width
        OUT height, // height
    )

    IF width >= 80 AND height >= 24 THEN
        KiDoCrashPrints (
            width, // width
            height, // height
            fmt, // fmt
            argv, // argv
            argc, // argc
        )
    END

    // If there's a debugger, call it. Otherwise, do nothing forever.

    IF KeDebuggerEntry THEN
        KeBreakpoint ()
    END

    WHILE TRUE DO
        KiWaitForInterrupt ()
    END
END

#SECTION "INITtext"
EXPORT FN KeRegisterCrashCallback (
    IN callback : ^KeCrashCallback,
    IN callbackfunc : KeCrashCallbackF,
    IN doesprint : UWORD,
    IN horizontal : UWORD,
)

    // Assumes being called from single-threaded context at boot time. Uses no
    // synchronization.

    callback^.Function = callbackfunc

    IF doesprint THEN
        IF horizontal THEN
            RtlInsertAtTailList (
                &KiCrashHorizListHead, // head
                &callback^.Entry, // entry
            )

            KiCrashHorizCount += 1

        ELSE
            RtlInsertAtTailList (
                &KiCrashVerticalListHead, // head
                &callback^.Entry, // entry
            )

            KiCrashVerticalCount += 1
        END

    ELSE
        RtlInsertAtTailList (
            &KiCrashCallbackListHead, // head
            &callback^.Entry, // entry
        )
    END
END