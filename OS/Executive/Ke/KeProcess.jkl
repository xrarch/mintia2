//
// Implements support for kernel Process objects.
//

#INCLUDE "Ki.hjk"
#INCLUDE "<ll>/System/OsStatus.hjk"
#INCLUDE "<ll>/System/OsSignal.hjk"

#SECTION "PAGEtext"
FN KeInitializeProcess (
    IN process : ^KeProcess,
    IN name : ^UBYTE,
)

    // Initialize a KeProcess object.

    RtlCopyString (
        &process^.Name[0], // dest
        name, // src
        KE_DEBUG_NAME_LENGTH, // bufsize
    )

    RtlInitializeList ( &process^.ThreadListHead )

    process^.ThreadCount = 0
    process^.SignalThread = NULLPTR
    process^.Terminated = FALSE
    process^.PageDirectoryPfn = 0
    process^.MemoryState = KI_PROCESS_RESIDENT
    process^.ResidentThreadCount = 0
    process^.SwapListHead = NULLPTR
    process^.BasePriority = OS_PRIORITY_DEFAULT

    KeInitializeLock ( &process^.Lock )

#IF BLD_MP
    KiInitializeSpinlock ( &process^.SwapStateSpinlock )
#END

#IF ( STRCMP ARCHITECTURE "xr17032" )
    // We assume the AsidTable pointer was already set by the caller.
    // If it's NULLPTR this must be a process that lives in the system address
    // space such as the idle process or system process.

    asidtable := process^.AsidTable

    IF asidtable THEN
        i := 0
        max := KeLoaderBlock.ProcessorCount

        WHILE i < max DO
            // Cause the process to get assigned a new ASID when its first
            // thread is scheduled in on this processor by giving it a
            // sequence number of 2^64 - 1. This could cause a problem if the
            // system lifetime exceeds geological timescales.

            asidtable[i].Asid = 0
            asidtable[i].AsidSequenceNumber.High = 0xFFFFFFFF
            asidtable[i].AsidSequenceNumber.Low = 0xFFFFFFFF

            i += 1
        END
    END
#END

END

#SECTION "PAGEtext"
FN KeSignalProcess (
    IN process : ^KeProcess,
    IN signal : UWORD,
)

    // Signal the given process. If the signal is OS_SIGNAL_KILL, we broadcast
    // it to all of the threads of the process. Otherwise, we send it to the
    // signal thread of the process.

    KeAssert ( signal != 0 )
    KeAssert ( signal < OS_SIGNAL_COUNT )

    KeAcquireLockExclusive ( &process^.Lock )

    IF NOT process^.SignalThread THEN
        // This process has no threads.

        KeReleaseLock ( &process^.Lock )

        LEAVE
    END

    IF signal == OS_SIGNAL_KILL THEN
        // Mark the process terminated so that no more threads can be added to
        // it.

        process^.Terminated = TRUE

        // Iterate each thread and send the kill signal.

        head := &process^.ThreadListHead
        listentry := head^.Next

        WHILE listentry != head DO
            thread := CONTAINEROF listentry TO KeThread.ProcessListEntry

            KeSignalThread (
                thread, // thread
                signal, // signal
            )

            listentry = listentry^.Next
        END

    ELSE
        KeSignalThread (
            process^.SignalThread, // thread
            signal, // signal
        )
    END

    KeReleaseLock ( &process^.Lock )
END

#SECTION "PAGEtext"
FN KeSetBasePriorityProcess (
    IN process : ^KeProcess,
    IN priority : UWORD,
)

    // Set the base priority of the process.
    // Raise the priority of any thread whose base priority is lower than the
    // new base priority.

    KeAssert ( priority < OS_PRIORITY_MAX )

    KeAcquireLockExclusive ( &process^.Lock )

    process^.BasePriority = priority

    // Iterate each thread and raise base priority if necessary.

    head := &process^.ThreadListHead
    listentry := head^.Next

    WHILE listentry != head DO
        thread := CONTAINEROF listentry TO KeThread.ProcessListEntry

        IF priority > thread^.BasePriority THEN
            KeSetBasePriorityThread (
                thread, // thread
                priority, // priority
                FALSE, // setcurrentpriority
            )
        END

        listentry = listentry^.Next
    END

    KeReleaseLock ( &process^.Lock )
END