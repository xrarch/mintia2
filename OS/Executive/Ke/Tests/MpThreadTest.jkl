#DEFINE KI_TEST_THREADS 24
#DEFINE KI_TEST_EVENTS 8

KiTestThreads : KeThread[KI_TEST_THREADS]
KiTestThreadsStacks : ULONG[512 * KI_TEST_THREADS]
KiTestEvents : KeEvent[KI_TEST_EVENTS]
KiTestSemaphore : KeSemaphore
KiTestQueue : KeBalancedQueue

PUBLIC KiTestPushlock : KePushlock

TestListHead : RtlListEntry
TestListItem1 : RtlListEntry
TestListItem2 : RtlListEntry
Item1Inserted : UBYTE
Item2Inserted : UBYTE

PUBLIC Counter := 0

FN (KeStartThreadF) KiTestThread (
    IN context1 : UWORD,
    IN context2 : UWORD,
)

    objecttable : ^KiDispatchHeader[2]

    timeout : RtlUquad

    timeout.High = 0
    timeout.Low = 50 + context1 * 50

    i := context1 % KI_TEST_EVENTS
    j := i + 1
    n := 0
    gork := 0

    item : ^RtlListEntry = NULLPTR

    WHILE TRUE DO
        IF j == KI_TEST_EVENTS THEN
            n += 1
            j = 0
        END

        IF i >= KI_TEST_EVENTS THEN
            i %= KI_TEST_EVENTS
        END

        objecttable[0] = &KiTestEvents[i].Header
        objecttable[1] = &KiTestEvents[j].Header

        status : OsStatus

        IF n == 100 THEN
            spin := 0

            ipl := KiAcquireAnnounce ()

            KiReleaseAnnounce ( ipl )

            WHILE spin < 5000000 DO
                spin += 1
            END

            RtlPrint ( "D" )


#IF 0
            status = KeWaitForSingleObject (
                KE_KERNEL_MODE, // waitmode
                FALSE, // alertable
                NULLPTR, // timeout
                &KiTestSemaphore.Header, // object
            )
#END

            n = 0
        END

        IF j & 1 THEN
            status = KeWaitForObjects (
                KE_USER_MODE, // waitmode
                FALSE, // alertable
                &timeout, // timeout
                2, // objectcount
                &objecttable[0], // objecttable
                NULLPTR, // waitblocktable
            )

        ELSE
            status = KeWaitForSingleObject (
                KE_USER_MODE, // waitmode
                FALSE, // alertable
                &timeout, // timeout
                &KiTestEvents[i].Header, // object
            )

        END

        Counter = context1

        KeSignalEvent (
            &KiTestEvents[j], // event
            2, // priorityboost
        )

        ipl2 : UWORD

        IF context1 & 2 THEN
            ipl2 = KeAcquireApcSafePushlockShared ( &KiTestPushlock )


        ELSE
            ipl2 = KeAcquireApcSafePushlockExclusive ( &KiTestPushlock )

            IF context1 & 1 THEN
                Item1Inserted $= 1

                IF Item1Inserted THEN
                    RtlInsertAtTailList (
                        &TestListHead, // head
                        &TestListItem1, // entry
                    )

                ELSE
                    RtlRemoveEntryList ( &TestListItem1 )
                    TestListItem1.Next = NULLPTR
                    TestListItem1.Prev = NULLPTR
                END

            ELSE
                Item2Inserted $= 1

                IF Item2Inserted THEN
                    RtlInsertAtTailList (
                        &TestListHead, // head
                        &TestListItem2, // entry
                    )

                ELSE
                    RtlRemoveEntryList ( &TestListItem2 )
                    TestListItem2.Next = NULLPTR
                    TestListItem2.Prev = NULLPTR
                END
            END
        END

        IF KiCurrentIpl () != KI_IPL_APC THEN
            KeCrash ( "Not APC\n" )
        END

        KeReleaseApcSafePushlock ( &KiTestPushlock, ipl2 )

        IF KiCurrentIpl () != KI_IPL_LOW THEN
            KeCrash ( "Not LOW\n" )
        END

        nexti := i + 1

        IF nexti >= KI_TEST_EVENTS THEN
            nexti %= KI_TEST_EVENTS
        END

        KeSignalEvent (
            &KiTestEvents[nexti], // event
            3, // priorityboost
        )

        i += 2
        j += 1
    END
END

FN (KeStartThreadF) KiTestThreadPinning (
    IN context1 : UWORD,
    IN context2 : UWORD,
)


    interval : RtlUquad
    interval.High = 0
    interval.Low = 10000

    testquad : RtlUquad
    testquad.High = 0xF
    testquad.Low = 0

    testquad2 : RtlUquad
    testquad2.High = 0x1
    testquad2.Low = 0x1

    RtlPrint ( "Sleep %p  ", KeCurrentThread () )

    KeSleep (
        &interval, // interval
        KE_USER_MODE, // waitmode
        FALSE, // alertable
    )

    RtlPrint ( "Woke " )

    testitem1 : RtlListEntry
    testitem2 : RtlListEntry
    testitem3 : RtlListEntry
    testitem4 : RtlListEntry

    KeInsertIntoBalancedQueue (
        &KiTestQueue, // queue
        &testitem1, // item
        FALSE, // head
        0, // priorityboost
    )

    KeInsertIntoBalancedQueue (
        &KiTestQueue, // queue
        &testitem2, // item
        FALSE, // head
        0, // priorityboost
    )

    KeInsertIntoBalancedQueue (
        &KiTestQueue, // queue
        &testitem3, // item
        FALSE, // head
        0, // priorityboost
    )

    KeInsertIntoBalancedQueue (
        &KiTestQueue, // queue
        &testitem4, // item
        FALSE, // head
        0, // priorityboost
    )

    i := 0

    WHILE TRUE DO
        KeSleep (
            &interval, // interval
            KE_USER_MODE, // waitmode
            FALSE, // alertable
        )

        RtlPrint ( "Woke " )

        IF i THEN
            RtlPrint ( "LOWER" )
            KiLowerIpl ( KI_IPL_LOW )

        ELSE
            RtlPrint ( "RAISE" )
            KiRaiseIpl ( KI_IPL_APC )

            q := 0

            WHILE q < 10000000 DO
                q += 1
            END

            RtlPrint ( "Q" )
        END

        i $= 1
    END
END

FN (KeApcF) KiTestApcFunction (
    IN apc : ^KeApc,
    IN context1 : UWORD,
    IN context2 : UWORD,
    IN rundown : UWORD,
)

    thread := KeCurrentThread ()

    RtlPrint ( "P%p ", thread )
END

FN (KeStartThreadF) KiTestThreadApc (
    IN context1 : UWORD,
    IN context2 : UWORD,
)


    interval : RtlUquad
    interval.High = 0
    interval.Low = 4000

    apc : KeApc

    KeInitializeApc (
        &apc, // apc
        &KiTestApcFunction, // func
        KE_APC_KERNEL, // type
        &KiTestThreads[0], // thread
    )

    WHILE TRUE DO
        KeSleep (
            &interval, // interval
            KE_USER_MODE, // waitmode
            FALSE, // alertable
        )

        stat := KeEnqueueKapc (
            &apc, // apc
            0, // priorityboost
            0, // context1
            0, // context2
        )
        
        RtlPrint ( "Enq%u ", stat )
    END
END

FN KiInitializeTest ()

    prb := KI_CURRENT_PRB

    IF prb^.Id == 0 THEN
        KeInitializePushlock ( &KiTestPushlock )

        RtlInitializeList ( &TestListHead )

        KeInitializeSemaphore (
            &KiTestSemaphore, // semaphore
            "TestSemaphore", // name
            0, // initialcount
        )

        KeInitializeBalancedQueue (
            &KiTestQueue, // queue
            "TestQueue", // name
            2, // maxthreads
        )

        ipl := KiRaiseIpl ( KI_IPL_DPC )

        KeInitializeThread (
            &KeIdleProcess, // process
            &KiTestThreads[0], // thread
            "TestThread", // name
            &KiTestThreadsStacks[0], // kstack
            2048, // kstacksize
            &KiTestThreadPinning, // startfunc
            0, // context1
            0, // context2
        )

        KeInitializeThread (
            &KeIdleProcess, // process
            &KiTestThreads[1], // thread
            "TestThread", // name
            &KiTestThreadsStacks[512], // kstack
            2048, // kstacksize
            &KiTestThreadApc, // startfunc
            0, // context1
            0, // context2
        )

        i := 0

        WHILE i < KI_TEST_EVENTS DO
            KeInitializeEvent (
                &KiTestEvents[i], // event
                "TestEvent", // name
                FALSE, // notification
                0, // signalstate
            )

            i += 1
        END

        i = 2

        WHILE i < KI_TEST_THREADS DO
            KeInitializeThread (
                &KeIdleProcess, // process
                &KiTestThreads[i], // thread
                "TestThread", // name
                &KiTestThreadsStacks[512 * i], // kstack
                2048, // kstacksize
                &KiTestThread, // startfunc
                i, // context1
                0, // context2
            )

            i += 1
        END

        i = 0

        WHILE i < KI_TEST_THREADS DO
            KiReadyThread ( &KiTestThreads[i] )

            i += 1
        END

        KiLowerIpl ( ipl )
    END
END