//
// Simple spinlock-guarded ringbuffer. Intended for stream-oriented drivers to
// communicate information between DPC and worker thread context.
//

#INCLUDE "Ki.hjk"

#IF BLD_MP

#MACRO KiAcquireRingBuffer ( ring ) [
    KiAcquireSpinlockRaise ( &(ring)^.Spinlock )
]

#MACRO KiReleaseRingBuffer ( ring, oldipl ) [
    KiReleaseSpinlockLower (
        &(ring)^.Spinlock, // spinlock
        oldipl, // oldipl
    )
]

#ELSE

#MACRO KiAcquireRingBuffer ( ring ) [
    KiRaiseIpl ( KI_IPL_DPC )
]

#MACRO KiReleaseRingBuffer ( ring, oldipl ) [
    KiLowerIpl ( oldipl )
]

#END

EXPORT FN KeInitializeRingBuffer (
    IN ring : ^KeRingBuffer,
    IN name : ^UBYTE,
    IN data : ^VOID,
    IN entrysizelog : UWORD,
    IN entrycountlog : UWORD,
    IN overwrite : UWORD,
)

    // Initialize a spinlock-guarded ringbuffer.

    ring^.Data = data
    ring^.EntrySizeLog = entrysizelog
    ring^.EntryCountLog = entrycountlog
    ring^.EntriesLeft = 1 << entrycountlog
    ring^.BufferMask = (1 << entrycountlog) - 1
    ring^.Overwrite = overwrite
    ring^.ReadIndex = 0
    ring^.WriteIndex = 0

#IF BLD_MP
    KiInitializeSpinlock ( &ring^.Spinlock )
#END

END

EXPORT FN KeInsertByteRingBuffer (
    IN ring : ^KeRingBuffer,
    IN byte : UBYTE,
) : UWORD

    // Insert a byte into the ringbuffer. Returns TRUE if overflow occurred,
    // FALSE otherwise.

#IF BLD_CHK
    IF ring^.EntrySizeLog != 0 THEN
        KeCrash ( "KeInsertByteRingBuffer: Entries not byte sized\n" )
    END
#END

    buf := CAST ring^.Data TO ^UBYTE

    mask := ring^.BufferMask

    // Acquire the spinlock.

    ipl := KiAcquireRingBuffer ( ring )

    windex := ring^.WriteIndex
    left := ring^.EntriesLeft

    IF NOT left THEN
        // The ring buffer is full.

        IF NOT ring^.Overwrite THEN
            // Overwrites aren't allowed.
            // Release the spinlock.

            KiReleaseRingBuffer ( ring, ipl )

            // Return that an overflow occurred.

            RETURN TRUE
        END

        // Overwrite an entry.
        // Force the read index forward by one.

        ring^.ReadIndex = (ring^.ReadIndex + 1) & mask

    ELSE
        ring^.EntriesLeft = left - 1
    END

    // Write the byte.

    buf[windex] = byte

    // Increment the write pointer.

    ring^.WriteIndex = (windex + 1) & mask

    // Release the spinlock.

    KiReleaseRingBuffer ( ring, ipl )

    // Return whether an overflow occurred.

    RETURN NOT left
END

EXPORT FN KeExtractByteRingBuffer (
    IN ring : ^KeRingBuffer,
    OUT byte : UBYTE,
) : UWORD

    // Extract a byte from the ringbuffer. Returns TRUE if a byte was available,
    // FALSE otherwise.

#IF BLD_CHK
    IF ring^.EntrySizeLog != 0 THEN
        KeCrash ( "KeInsertByteRingBuffer: Entries not byte sized\n" )
    END
#END

    // Acquire the spinlock.

    ipl := KiAcquireRingBuffer ( ring )

    rindex := ring^.ReadIndex
    gotentry := rindex != ring^.WriteIndex

    IF gotentry THEN
        // There's a byte available.

        buf := CAST ring^.Data TO ^UBYTE

        // Read the byte.

        byte = buf[rindex]

        // Increment the read pointer.

        ring^.ReadIndex = (rindex + 1) & ring^.BufferMask

        // Record that one more free entry exists.

        ring^.EntriesLeft += 1
    END

    // Release the spinlock.

    KiReleaseRingBuffer ( ring, ipl )

    // Return whether a byte was available.

    RETURN gotentry
END

EXPORT FN KeInsertEntryRingBuffer (
    IN ring : ^KeRingBuffer,
    IN entry : ^VOID,
) : UWORD

    // Insert an entry into the ringbuffer. Returns TRUE if overflow occurred,
    // FALSE otherwise.

    buf := CAST ring^.Data TO ^UBYTE

    mask := ring^.BufferMask

    // Acquire the spinlock.

    ipl := KiAcquireRingBuffer ( ring )

    windex := ring^.WriteIndex
    left := ring^.EntriesLeft

    IF NOT left THEN
        // The ring buffer is full.

        IF NOT ring^.Overwrite THEN
            // Overwrites aren't allowed.
            // Release the spinlock.

            KiReleaseRingBuffer ( ring, ipl )

            // Return that an overflow occurred.

            RETURN TRUE
        END

        // Overwrite an entry.
        // Force the read index forward by one.

        ring^.ReadIndex = (ring^.ReadIndex + 1) & mask
    
    ELSE
        ring^.EntriesLeft = left - 1
    END

    // Write the entry.

    RtlCopyBytes (
        &buf[windex << ring^.EntrySizeLog], // dest
        entry, // src
        1 << ring^.EntrySizeLog, // sz
    )

    // Increment the write pointer.

    ring^.WriteIndex = (windex + 1) & mask

    // Release the spinlock.

    KiReleaseRingBuffer ( ring, ipl )

    // Return whether an overflow occurred.

    RETURN NOT left
END

EXPORT FN KeExtractEntryRingBuffer (
    IN ring : ^KeRingBuffer,
    IN entry : ^VOID,
) : UWORD

    // Extract an entry from the ringbuffer. Returns TRUE if an entry was
    // available, FALSE otherwise.

    // Acquire the spinlock.

    ipl := KiAcquireRingBuffer ( ring )

    rindex := ring^.ReadIndex
    gotentry := rindex != ring^.WriteIndex

    IF gotentry THEN
        // There's an entry available.

        buf := CAST ring^.Data TO ^UBYTE

        // Read the entry.

        RtlCopyBytes (
            entry, // dest
            &buf[rindex << ring^.EntrySizeLog], // src
            1 << ring^.EntrySizeLog, // sz
        )

        // Increment the read pointer.

        ring^.ReadIndex = (rindex + 1) & ring^.BufferMask

        // Record that one more free entry exists.

        ring^.EntriesLeft += 1
    END

    // Release the spinlock.

    KiReleaseRingBuffer ( ring, ipl )

    // Return whether an entry was available.

    RETURN gotentry
END