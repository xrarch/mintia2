//
// Implements support for multiprocessor communication (IPIs).
//

#IF BLD_MP

#INCLUDE "Ki.hjk"

KiFreezeCount : ULONG = 0
KiFrozenProcessorCount : ULONG = 0

KiSendTable : ^KiPrb[8]
KiSendTableSet : ULONG = 0

#SECTION "text"
KiIndexFirstBitClear : UBYTE[256] = {
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 
    0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 8,
}

#DEFINE KI_FREEZE_SPIN 10000000
#DEFINE KI_FREEZE_RETRY 5

FN KiFreezeOtherProcessors ()

    // Freeze all other processors in the system in place.
    // Assumes interrupts are disabled on this processor and that they will
    // remain disabled until freezing is over (otherwise we might take an IPI
    // that makes us freeze too).
    //
    // This will jam up spinlocks and mutexes at random so this is primarily for
    // debugging and crash time and not for willy nilly usage.

    // First increment the global freeze count.

    oldcount := KeIncrementUlong (
        &KiFreezeCount, // ptr
        1, // ulong
    )

    IF oldcount THEN
        // Already frozen.

        LEAVE
    END

    // Now send IPIs to all of the processors in the system (other than me).

    selfid := KiCurrentProcessor ()

    j := 0

    WHILE j < KI_FREEZE_RETRY DO
        prb := CAST ExLoaderBlock.VirtualPrbBase TO ^KiPrb

        count := ExLoaderBlock.ProcessorCount
        i := 0

        WHILE i < count DO
            // Don't IPI the processor if it's me.

            IF prb^.Id != selfid THEN
                // Trigger an IPI.

                HalTriggerIpi ( prb )
            END

            i += 1
            prb += BL_PRB_SIZE
        END

        // Now wait for everyone except for me to freeze.

        expected := count - 1
        spincount := KI_FREEZE_SPIN

        WHILE KiFrozenProcessorCount != expected AND spincount DO
            // Language BARRIER so this loop isn't optimized out.

            BARRIER

            spincount -= 1
        END

        IF NOT spincount THEN
            // We ran out of spins. Try IPI'ing everyone again.

            j += 1

            CONTINUE
        END

        BREAK
    END

    IF j == KI_FREEZE_RETRY THEN
        // We failed to freeze everyone but we're going to just print a warning
        // and proceed anyway. Someone's probably frozen somewhere anyway and
        // can't hurt us, hopefully.

        RtlPrint ( "KiFreezeOtherProcessors: FAILED! Timeout.\n" )
    END

    // Reset the frozen processor count. They're all in place (or we gave up).

    KiFrozenProcessorCount = 0
END

FN KiUnfreezeOtherProcessors ()

    // Unfreeze the processors in the system.

    KeIncrementUlong (
        &KiFreezeCount, // ptr
        0xFFFFFFFF, // ulong
    )
END

FN KiExecuteOnOtherProcessor (
    IN target : ^KiPrb,
    IN function : KiIpiF,
    IN context1 : UWORD,
    IN context2 : UWORD,
)

    // Execute the specified function on another processor.
    // Actually this works even for self-IPIs but hopefully we aren't taking any
    // of those because that is not very efficient.

#IF BLD_CHK
    IF KiCurrentIpl () != KI_IPL_DPC THEN
        KeCrash ( "KiExecuteOnOtherProcessor: IPL != KI_IPL_DPC\n" )
    END
#END

    prb := KI_CURRENT_PRB

    // Initialize our IPI context.

    prb^.IpiFunction = function
    prb^.IpiContext1 = context1
    prb^.IpiContext2 = context2

    prb^.IpiSpin = 1

@Retry

    // Acquire a sender table entry. The allocation state is described by a
    // set of 8 bits, the KiSendTableSet. This lets us be O(1) and not take any
    // locks here. Since there are 8, thats how many IPIs can occur in parallel
    // before someone has to spin here.

    mask := KiSendTableSet

    WHILE mask == 0xFF DO
        // 0xFF means theres no clear bits; no free table slots. Spin-wait for
        // a free table slot.
        
        // Use a language BARRIER to stop this loop from being optimized out.

        BARRIER

        mask = KiSendTableSet
    END

    // There's at least one bit free in the set, so find the index of the lowest
    // one with the lookup table.

    index := KiIndexFirstBitClear[mask]

    // Set the bit to allocate the table entry.

    newmask := mask | (1 << index)

    // Try to atomic CAS the new bit set.

    IF KeCompareSwapUlong (
        &KiSendTableSet, // ptr
        newmask, // newvalue
        mask, // expectedvalue
    ) != mask THEN

        // Someone else modified it inbetween (rare case). Retry.

        GOTO Retry
    END

    // We've successfully allocated a table entry for our IPI.
    
    // Note that the following operations MUST be done in this order.
    // 1. Store our Prb in the table.

    KiSendTable[index] = prb

    // 2. Mark pending.

    KeOrUlong (
        &target^.IpiPendingSet, // ptr
        1 << index, // bitset
    )

    // 3. Trigger the IPI.

    HalTriggerIpi ( target )

    // 4. Spin-wait for execution of our callback.

    WHILE prb^.IpiSpin DO
        // Do a language BARRIER so that this loop isn't optimized out.

        BARRIER
    END

    // 5. Now release the sender table entry.

    KeMaskUlong (
        &KiSendTableSet, // ptr
        ~(1 << index), // mask
    )
END

FN KiExecuteOnEveryoneElse (
    IN function : KiIpiF,
    IN context1 : UWORD,
    IN context2 : UWORD,
)

    // Execute the specified function on every other processor.

#IF BLD_CHK
    IF KiCurrentIpl () != KI_IPL_DPC THEN
        KeCrash ( "KiExecuteOnEveryoneElse: IPL != KI_IPL_DPC\n" )
    END
#END

    count := ExLoaderBlock.ProcessorCount

    prb := KI_CURRENT_PRB

    // Initialize our IPI context.

    prb^.IpiFunction = function
    prb^.IpiContext1 = context1
    prb^.IpiContext2 = context2

    prb^.IpiSpin = count - 1

@Retry

    // Acquire a sender table entry. The allocation state is described by a
    // set of 8 bits, the KiSendTableSet. This lets us be O(1) and not take any
    // locks here. Since there are 8, thats how many IPIs can occur in parallel
    // before someone has to spin here.

    mask := KiSendTableSet

    WHILE mask == 0xFF DO
        // 0xFF means theres no clear bits; no free table slots. Spin-wait for
        // a free table slot.
        
        // Use a language BARRIER to stop this loop from being optimized out.

        BARRIER

        mask = KiSendTableSet
    END

    // There's at least one bit free in the set, so find the index of the lowest
    // one with the lookup table.

    index := KiIndexFirstBitClear[mask]

    // Set the bit to allocate the table entry.

    newmask := mask | (1 << index)

    // Try to atomic CAS the new bit set.

    IF KeCompareSwapUlong (
        &KiSendTableSet, // ptr
        newmask, // newvalue
        mask, // expectedvalue
    ) != mask THEN

        // Someone else modified it inbetween (rare case). Retry.

        GOTO Retry
    END

    // We've successfully allocated a table entry for our IPI.
    // Store our Prb in the table. This MUST be done before we set any pending
    // bits or send any IPIs.

    KiSendTable[index] = prb

    i := 0

    selfid := prb^.Id

    targetprb := CAST ExLoaderBlock.VirtualPrbBase TO ^KiPrb

    // Now send IPIs to all of the processors in the system (other than me).

    WHILE i < count DO
        // Don't IPI the processor if it's me.

        IF targetprb^.Id != selfid THEN
            // The order of the following operations is important.
            // 1. Mark pending.

            KeOrUlong (
                &targetprb^.IpiPendingSet, // ptr
                1 << index, // bitset
            )

            // 2. Trigger the IPI.

            HalTriggerIpi ( targetprb )
        END

        i += 1
        targetprb += BL_PRB_SIZE
    END

    // Spin-wait for execution of our callback.

    WHILE prb^.IpiSpin DO
        // Do a language BARRIER so that this loop isn't optimized out.

        BARRIER
    END

    // Now release the sender table entry.

    KeMaskUlong (
        &KiSendTableSet, // ptr
        ~(1 << index), // mask
    )
END

FN KiServiceIpi ()

    // An IPI interrupt has been delivered. Walk all of the PRBs and see who
    // wants our attention. Note that this interrupt is the highest priority in
    // the system so we should try to keep it brief - nothing can happen while
    // we are here, not even the timer can tick, and the reason for that is to
    // make sure IPI response times are high so we don't tie up other processors
    // waiting for us to release them from a spin wait.
    //
    // Not all IPIs cause waits on behalf of the requesting processor. Some of
    // them are perfectly happy being asynchronous such as requesting a software
    // interrupt in order to get us to service our APC or DPC queue or to switch
    // to a newly readied thread for which we were selected, to dispatch signals
    // in usermode, etc.

    prb := KI_CURRENT_PRB

    IF prb^.IpiPendingSet THEN
        // There are pending IPIs.

        // Atomically fetch the bit set of pending senders and set to zero.
        // Any IPIs sent after we do this we will catch on the next
        // IPI which will remain pending until we exit here.

        pendingset := KeFetchAndSetUlong (
            &prb^.IpiPendingSet, // ptr
            0, // newvalue
        )

        // For each bit set, execute the IPI function.

        index := 0

        WHILE pendingset DO
            IF pendingset & 1 THEN
                requestingprb := KiSendTable[index]

                // Call the requesting processor's function.

                requestingprb^.IpiFunction (
                    requestingprb^.IpiContext1, // context1
                    requestingprb^.IpiContext2, // context2
                )

                // Release him from his spin.

                KeIncrementUlong (
                    &requestingprb^.IpiSpin, // ptr
                    0xFFFFFFFF, // inc
                )
            END

            index += 1
            pendingset >>= 1
        END
    END

    IF KiFreezeCount THEN
        // Oh snap! Lock up until the freeze count reaches zero.

        // Increment this count so that the freezer knows when we froze.

        KeIncrementUlong (
            &KiFrozenProcessorCount, // ptr
            1, // inc
        )

        WHILE KiFreezeCount DO
            // Do a language BARRIER so that this loop isn't optimized out.

            BARRIER
        END
    END
END

#END