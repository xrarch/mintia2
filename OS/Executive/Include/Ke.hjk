//
// Public header file for the Kernel (Ke) component of the MINTIA Executive.
//

#IF BLD_MP

TYPE KiSpinlock : ULONG

#END

#DEFINE KE_KERNEL_MODE 1
#DEFINE KE_USER_MODE 2

EXTERN FN KeFindResource (
    IN name : ^UBYTE,
    OUT data : ^VOID,
) : ^BlResource

EXTERN FN KePinResource (
    IN rsrc : ^BlResource,
)

EXTERN FN KeIncrementUlong (
    IN ptr : ^ULONG,
    IN inc : ULONG,
) : ULONG

EXTERN FN KeCompareSwapUlong (
    IN ptr : ^ULONG,
    IN newvalue : ULONG,
    IN expectedvalue : ULONG,
) : ULONG

EXTERN FN KeMaskUlong (
    IN ptr : ^ULONG,
    IN mask : ULONG,
) : ULONG

EXTERN FN KeOrUlong (
    IN ptr : ^ULONG,
    IN bitset : ULONG,
) : ULONG

EXTERN FN KeFetchAndSetUlong (
    IN ptr : ^ULONG,
    IN newvalue : ULONG,
) : ULONG

#IF ( == BLD_BITS 64 )

#MACRO KeIncrementPtr ( ptr, inc ) [
    KeIncrementUquad ( CAST (ptr) TO ^VOID, inc )
]

#MACRO KeCompareSwapPtr ( ptr, newvalue, expectedvalue ) [
    KeCompareSwapUquad (
        CAST (ptr) TO ^VOID,
        CAST (newvalue) TO UQUAD,
        CAST (expectedvalue) TO UQUAD,
    )
]

#MACRO KeMaskPtr ( ptr, mask ) [
    KeMaskUquad ( CAST (ptr) TO ^VOID, mask )
]

#MACRO KeOrPtr ( ptr, bitset ) [
    KeOrUquad ( CAST (ptr) TO ^VOID, bitset )
]

#MACRO KeFetchAndSetPtr ( ptr, newvalue ) [
    KeFetchAndSetUquad (
        CAST (ptr) TO ^VOID,
        CAST (newvalue) TO UQUAD,
    )
]

#ELSE

#MACRO KeIncrementPtr ( ptr, inc ) [
    KeIncrementUlong ( CAST (ptr) TO ^VOID, inc )
]

#MACRO KeCompareSwapPtr ( ptr, newvalue, expectedvalue ) [
    KeCompareSwapUlong (
        CAST (ptr) TO ^VOID,
        CAST (newvalue) TO ULONG,
        CAST (expectedvalue) TO ULONG,
    )
]

#MACRO KeMaskPtr ( ptr, mask ) [
    KeMaskUlong ( CAST (ptr) TO ^VOID, mask )
]

#MACRO KeOrPtr ( ptr, bitset ) [
    KeOrUlong ( CAST (ptr) TO ^VOID, bitset )
]

#MACRO KeFetchAndSetPtr ( ptr, newvalue ) [
    KeFetchAndSetUlong (
        CAST (ptr) TO ^VOID,
        CAST (newvalue) TO ULONG,
    )
]

#END

EXTERN FN KeCrash (
    IN fmt : ^UBYTE,
    ... argv argc
)

EXTERN FN KeBreakpoint ()

FNPTR KeCrashCallbackF (
    IN columns : UWORD,
)

STRUCT KeCrashCallback
    Entry : RtlListEntry,

    Function : KeCrashCallbackF,
    DoesPrint : UBYTE,
    Horizontal : UBYTE,
END

EXTERN FN KeRegisterCrashCallback (
    IN callback : ^KeCrashCallback,
    IN callbackfunc : KeCrashCallbackF,
    IN doesprint : UWORD,
    IN horizontal : UWORD,
)

FNPTR KeDebuggerEntryF (
    IN context : ^OsContext,
)

EXTERN KeDebuggerEntry : KeDebuggerEntryF

EXTERN FN KeCurrentThread () : ^KeThread

FNPTR KeDpcF (
    IN dpc : ^KeDpc,
    IN context1 : UWORD,
    IN context2 : UWORD,
)

STRUCT KeDpc
    Entry : RtlListEntry,
    Function : KeDpcF,
    Context1 : UWORD,
    Context2 : UWORD,
    EnqueuedTo : ^KiPrb,
END

EXTERN FN KeInitializeDpc (
    IN dpc : ^KeDpc,
    IN func : KeDpcF,
)

EXTERN FN KeDequeueDpc (
    IN dpc : ^KeDpc,
) : UWORD

EXTERN FN KeEnqueueDpc (
    IN dpc : ^KeDpc,
    IN context1 : UWORD,
    IN context2 : UWORD,
) : UWORD

FNPTR KeInterruptF (
    IN interrupt : ^KeInterrupt,
    IN context : ^OsContext,
)

STRUCT KeInterrupt
    Entry : RtlListEntry,

    Routine : KeInterruptF,
    Context : UWORD,
    Vector : UWORD,
    ProcessorId : UWORD,

#IF BLD_MP
    Spinlock : KiSpinlock,
#END

    ShareVector : UBYTE,
    EdgeTriggered : UBYTE,
    Ipl : UBYTE,
    Connected : UBYTE,
END

EXTERN FN KeInitializeInterrupt (
    IN interrupt : ^KeInterrupt,
    IN routine : KeInterruptF,
    IN context : UWORD,
    IN vector : UWORD,
    IN ipl : UWORD,
    IN edgetriggered : UWORD,
    IN sharevector : UWORD,
    IN procid : UWORD,
)

EXTERN FN KeConnectInterrupt (
    IN interrupt : ^KeInterrupt,
) : UWORD

EXTERN FN KeDisconnectInterrupt (
    IN interrupt : ^KeInterrupt,
) : UWORD

// This is here instead of Ki.hjk so that the size is known in this header.
// That doesn't mean it should be manipulated outside of Ke.

ENUM KiDispatchType : UBYTE
    KI_DISPATCH_NULL,

    KI_DISPATCH_TIMER,
    KI_DISPATCH_MUTEX,
    KI_DISPATCH_EVENT_NOTIF,
    KI_DISPATCH_EVENT_SYNCH,
    KI_DISPATCH_SEMAPHORE,
END

STRUCT KiDispatchHeader
    WaitListHead : RtlListEntry,
    Name : ^UBYTE,
    SignalCount : ULONG,
#IF BLD_MP
    Spinlock : KiSpinlock,
#END
    Type : KiDispatchType,
END

STRUCT KiWaitBlock
    Entry : RtlListEntry,
    Thread : ^KeThread,
    Object : ^KiDispatchHeader,
    WakeStatus : UWORD,
END

STRUCT KeTimer
    Header : KiDispatchHeader,

    EnqueuedTo : ^KiPrb,
    Entry : RtlHeapEntry,
    ExpiryTime : RtlUquad,
    Dpc : ^KeDpc,
END

EXTERN FN KeInitializeTimer (
    IN timer : ^KeTimer,
    IN dpc : ^KeDpc,
    IN name : ^UBYTE,
)

EXTERN FN KeEnqueueTimer (
    IN timer : ^KeTimer,
    IN interval : ^RtlUquad,
    IN context1 : UWORD,
    IN context2 : UWORD,
) : UWORD

EXTERN FN KeDequeueTimer (
    IN timer : ^KeTimer,
) : UWORD

STRUCT KeProcess
    PageDirectoryPfn : UWORD,

#IF ( STRCMP ARCHITECTURE "xr17032" )
    Asid : UWORD,
    AsidSequenceNumber : RtlUquad,
#IF BLD_MP
    AsidLock : KiSpinlock,
#END
#END
END

#DEFINE KI_THREAD_WAIT_BLOCKS 4

#DEFINE KI_THREAD_WAIT_NONE 0
#DEFINE KI_THREAD_WAIT_TRY 1
#DEFINE KI_THREAD_WAIT_ABORTED 2
#DEFINE KI_THREAD_WAIT_COMMITTED 3

#DEFINE KI_THREAD_RUNNING 1
#DEFINE KI_THREAD_READY 2
#DEFINE KI_THREAD_WAITING 3

STRUCT KeThread
    KapcListHead : RtlListEntry,
    LapcListHead : RtlListEntry,
    UapcListHead : RtlListEntry,

    UserTimeMs : RtlUquad,
    DpcTimeMs : RtlUquad,
    SystemTimeMs : RtlUquad,

    WaitBlockTable : ^KiWaitBlock,
    Context : ^OsContext,
    Process : ^KeProcess,
    KernelStackTop : ^VOID,

    WaitBlocks : KiWaitBlock[KI_THREAD_WAIT_BLOCKS],
    TimeoutWaitBlock : KiWaitBlock,
    Timeout : KeTimer,

#IF BLD_MP
    Spinlock : KiSpinlock,
#END

    SignalMask : ULONG,
    SignalAcceptMask : ULONG,
    SignalDeliverOnWaitMask : ULONG,
    IgnoreEventCount : ULONG,
    WaitStatus : ULONG,

    RemainingQuantum : UBYTE,
    WaitAttempt : UBYTE,
    UserApcTriggered : UBYTE,
    UserInterrupt : UBYTE,
    WaitCount : UBYTE,
    Priority : UBYTE,
    BasePriority : UBYTE,
    Status : UBYTE,
    Alertable : UBYTE,
    WaitMode : UBYTE,
    WaitIpl : UBYTE,
END