//
// Public header file for the Kernel (Ke) component of the MINTIA Executive.
//

#INCLUDE "<ll>/System/OsStatus.hjk"
#INCLUDE "<ll>/System/OsContext.hjk"

TYPE KiSpinlock : ULONG

#IF ( STRCMP ARCHITECTURE "xr17032" )
    #INCLUDE "KeXr17032.hjk"

#ELSEIF ( STRCMP ARCHITECTURE "fox32" )
    #INCLUDE "KeFox32.hjk"

#ELSE
    #ERROR "Unknown architecture"
#END

#MACRO KeCurrentProcess () [
    KeCurrentThread ()^.Process
]

STRUCT KeLock
    Ptr : UWORD,
END

#DEFINE KE_INITIAL_LOCK [{
    [Ptr] = 0,
}]

#MACRO KeInitializeLock ( lock ) [
    NOTHING (lock)^.Ptr = 0
]

#DEFINE KE_STACK_PAGES 1

#DEFINE KE_KERNEL_MODE 1
#DEFINE KE_USER_MODE 2

EXTERN KeSharedUserPage : ^OsSharedUserPage

EXTERN FN KeFindResource (
    IN name : ^UBYTE,
    OUT data : ^VOID,
) : ^BlResource

EXTERN FN KePinResource (
    IN rsrc : ^BlResource,
)

EXTERN FN KeIncrementUlong (
    IN ptr : ^ULONG,
    IN inc : ULONG,
) : ULONG

EXTERN FN KeCompareSwapUlong (
    IN ptr : ^ULONG,
    IN newvalue : ULONG,
    IN expectedvalue : ULONG,
) : ULONG

EXTERN FN KeCompareSwapUlongAbortOnFault (
    IN ptr : ^ULONG,
    IN newvalue : ULONG,
    IN expectedvalue : ULONG,
    OUT aborted : UWORD,
) : ULONG

EXTERN FN KeMaskUlong (
    IN ptr : ^ULONG,
    IN mask : ULONG,
) : ULONG

EXTERN FN KeOrUlong (
    IN ptr : ^ULONG,
    IN bitset : ULONG,
) : ULONG

EXTERN FN KeFetchAndSetUlong (
    IN ptr : ^ULONG,
    IN newvalue : ULONG,
) : ULONG

#IF ( == BLD_BITS 64 )

#MACRO KeIncrementPtr ( ptr, inc ) [
    KeIncrementUquad ( CAST (ptr) TO ^VOID, inc )
]

#MACRO KeCompareSwapPtrAbortOnFault ( ptr, newvalue, expectedvalue, aborted ) [
    KeCompareSwapUquadAbortOnFault (
        CAST (ptr) TO ^VOID,
        CAST (newvalue) TO UQUAD,
        CAST (expectedvalue) TO UQUAD,
        aborted,
    )
]

#MACRO KeCompareSwapPtr ( ptr, newvalue, expectedvalue ) [
    KeCompareSwapUquad (
        CAST (ptr) TO ^VOID,
        CAST (newvalue) TO UQUAD,
        CAST (expectedvalue) TO UQUAD,
    )
]

#MACRO KeMaskPtr ( ptr, mask ) [
    KeMaskUquad ( CAST (ptr) TO ^VOID, mask )
]

#MACRO KeOrPtr ( ptr, bitset ) [
    KeOrUquad ( CAST (ptr) TO ^VOID, bitset )
]

#MACRO KeFetchAndSetPtr ( ptr, newvalue ) [
    KeFetchAndSetUquad (
        CAST (ptr) TO ^VOID,
        CAST (newvalue) TO UQUAD,
    )
]

#ELSE

#MACRO KeIncrementPtr ( ptr, inc ) [
    KeIncrementUlong ( CAST (ptr) TO ^VOID, inc )
]

#MACRO KeCompareSwapPtrAbortOnFault ( ptr, newvalue, expectedvalue, aborted ) [
    KeCompareSwapUlongAbortOnFault (
        CAST (ptr) TO ^VOID,
        CAST (newvalue) TO ULONG,
        CAST (expectedvalue) TO ULONG,
        aborted,
    )
]

#MACRO KeCompareSwapPtr ( ptr, newvalue, expectedvalue ) [
    KeCompareSwapUlong (
        CAST (ptr) TO ^VOID,
        CAST (newvalue) TO ULONG,
        CAST (expectedvalue) TO ULONG,
    )
]

#MACRO KeMaskPtr ( ptr, mask ) [
    KeMaskUlong ( CAST (ptr) TO ^VOID, mask )
]

#MACRO KeOrPtr ( ptr, bitset ) [
    KeOrUlong ( CAST (ptr) TO ^VOID, bitset )
]

#MACRO KeFetchAndSetPtr ( ptr, newvalue ) [
    KeFetchAndSetUlong (
        CAST (ptr) TO ^VOID,
        CAST (newvalue) TO ULONG,
    )
]

#END

EXTERN FN KeCrash (
    IN fmt : ^UBYTE,
    ... argv argc
)

EXTERN FN KeBreakpoint ()

FNPTR KeCrashCallbackF (
    IN columns : UWORD,
)

STRUCT KeCrashCallback
    Entry : RtlListEntry,

    Function : KeCrashCallbackF,
    DoesPrint : UBYTE,
    Horizontal : UBYTE,
END

EXTERN FN KeRegisterCrashCallback (
    IN callback : ^KeCrashCallback,
    IN callbackfunc : KeCrashCallbackF,
    IN doesprint : UWORD,
    IN horizontal : UWORD,
)

FNPTR KeDebuggerEntryF (
    IN context : ^OsContext,
)

EXTERN KeDebuggerEntry : KeDebuggerEntryF

FNPTR KeDpcF (
    IN dpc : ^KeDpc,
    IN context1 : UWORD,
    IN context2 : UWORD,
)

STRUCT KeDpc
    Entry : RtlListEntry,
    Function : KeDpcF,
    Context1 : UWORD,
    Context2 : UWORD,
    EnqueuedTo : ^KiPrb,
END

EXTERN FN KeInitializeDpc (
    IN dpc : ^KeDpc,
    IN func : KeDpcF,
)

EXTERN FN KeDequeueDpc (
    IN dpc : ^KeDpc,
) : UWORD

EXTERN FN KeEnqueueDpc (
    IN dpc : ^KeDpc,
    IN context1 : UWORD,
    IN context2 : UWORD,
) : UWORD

FNPTR KeInterruptF (
    IN interrupt : ^KeInterrupt,
    IN context : ^OsContext,
)

STRUCT KeInterrupt
    Entry : RtlListEntry,

    Routine : KeInterruptF,
    Context : UWORD,
    Vector : UWORD,
    ProcessorId : UWORD,

#IF BLD_MP
    Spinlock : KiSpinlock,
#END

    ShareVector : UBYTE,
    EdgeTriggered : UBYTE,
    Ipl : UBYTE,
    Connected : UBYTE,
END

#DEFINE KE_AUTOMATIC_INTERRUPT_PROCESSOR -1

EXTERN FN KeInitializeInterrupt (
    IN interrupt : ^KeInterrupt,
    IN routine : KeInterruptF,
    IN context : UWORD,
    IN vector : UWORD,
    IN ipl : UWORD,
    IN edgetriggered : UWORD,
    IN sharevector : UWORD,
    IN procid : UWORD,
)

EXTERN FN KeConnectInterrupt (
    IN interrupt : ^KeInterrupt,
) : UWORD

EXTERN FN KeDisconnectInterrupt (
    IN interrupt : ^KeInterrupt,
) : UWORD

// This is here instead of Ki.hjk so that the size is known in this header.
// That doesn't mean it should be manipulated outside of Ke.

ENUM KiDispatchType : UBYTE
    KI_DISPATCH_NULL,

    KI_DISPATCH_EVENT_NOTIF,
    KI_DISPATCH_EVENT_SYNCH,
    KI_DISPATCH_BALANCED_QUEUE,
END

STRUCT KiDispatchHeader
    WaitListHead : RtlListEntry,
    Name : ^UBYTE,
    SignalCount : ULONG,
    WaiterCount : ULONG,
#IF BLD_MP
    Spinlock : KiSpinlock,
#END
    Type : KiDispatchType,
END

#DEFINE KI_WB_UNWAITED 1
#DEFINE KI_WB_DEQUEUED 2

STRUCT KiWaitBlock
    Entry : RtlListEntry,
    Thread : ^KeThread,
    Object : ^KiDispatchHeader,
    WakeStatus : ULONG,
    Flags : ULONG,
END

STRUCT KeTimer
    Header : KiDispatchHeader,

    EnqueuedTo : ^KiPrb,
    Entry : RtlHeapEntry,
    ExpiryTime : RtlUquad,
    Dpc : ^KeDpc,
END

EXTERN FN KeInitializeTimer (
    IN timer : ^KeTimer,
    IN dpc : ^KeDpc,
    IN name : ^UBYTE,
)

EXTERN FN KeEnqueueTimer (
    IN timer : ^KeTimer,
    IN interval : ^RtlUquad,
    IN context1 : UWORD,
    IN context2 : UWORD,
) : UWORD

EXTERN FN KeDequeueTimer (
    IN timer : ^KeTimer,
) : UWORD

EXTERN FN KeResetTimer (
    IN timer : ^KeTimer,
) :  UWORD

EXTERN FN KeRealTimeToLocalTime (
    IN desttime : ^RtlUquad,
    IN srctime : ^RtlUquad,
)

EXTERN FN KeLocalTimeToRealTime (
    IN desttime : ^RtlUquad,
    IN srctime : ^RtlUquad,
)

EXTERN FN KeSetTimeZoneOffset (
    IN offset : ULONG,
)

EXTERN FN KeGetTimeZoneOffset () : ULONG

EXTERN FN KeQueryTime (
    IN time : ^RtlUquad,
    IN local : UWORD,
)

#DEFINE KE_APC_USER 1
#DEFINE KE_APC_LAZY 2
#DEFINE KE_APC_KERNEL 3

FNPTR KeApcF (
    IN apc : ^KeApc,
    IN context1 : UWORD,
    IN context2 : UWORD,
    IN rundown : UWORD,
)

STRUCT KeApc
    Entry : RtlListEntry,
    Function : KeApcF,
    Thread : ^KeThread,
    Context1 : UWORD,
    Context2 : UWORD,
    Type : UBYTE,
    Enqueued : UBYTE,
END

EXTERN FN KeInitializeApc (
    IN apc : ^KeApc,
    IN func : KeApcF,
    IN type : UWORD,
    IN thread : ^KeThread,
)

EXTERN FN KeEnqueueKapc (
    IN apc : ^KeApc,
    IN priorityboost : UWORD,
    IN context1 : UWORD,
    IN context2 : UWORD,
) : UWORD

EXTERN FN KeEnqueueLapc (
    IN apc : ^KeApc,
    IN priorityboost : UWORD,
    IN context1 : UWORD,
    IN context2 : UWORD,
) : UWORD

EXTERN FN KeEnqueueUapc (
    IN apc : ^KeApc,
    IN priorityboost : UWORD,
    IN context1 : UWORD,
    IN context2 : UWORD,
) : UWORD

EXTERN FN KeDequeueApc (
    IN apc : ^KeApc,
) : UWORD

EXTERN FN KeMaskApcs () : UWORD

EXTERN FN KeUnmaskApcs (
    IN oldipl : UWORD,
)

EXTERN FN KeAreApcsDeliverable () : UWORD

STRUCT KeEvent
    Header : KiDispatchHeader,
END

STRUCT KeSemaphore
    Header : KiDispatchHeader,
END

EXTERN FN KeAllocateInitialTurnstile () : ^KiTurnstile

STRUCT KiTurnstile
    ChainEntry : RtlListEntry,

    PiEntry : RtlListEntry,

    WaiterHeapRoot : ^RtlHeapEntry,

    Free : ^KiTurnstile,

    Key : ^VOID,

    Event : KeEvent,

    Owner : ^KeThread,

#IF BLD_MP
    Spinlock : KiSpinlock,
#END

END

EXTERN FN KeSignalProcess (
    IN process : ^KeProcess,
    IN signal : UWORD,
)

EXTERN FN KeSetBasePriorityProcess (
    IN process : ^KeProcess,
    IN priority : UWORD,
)

EXTERN FN KeAttachProcess (
    IN process : ^KeProcess,
    IN try : UWORD,
) : UWORD

EXTERN FN KeDetachProcess (
    IN process : ^KeProcess,
)

EXTERN FN KeInitializeProcess (
    IN process : ^KeProcess,
    IN name : ^UBYTE,
)

FNPTR KeStartThreadF (
    IN context1 : UWORD,
    IN context2 : UWORD,
)

EXTERN FN KeInitializeThread (
    IN process : ^KeProcess,
    IN thread : ^KeThread,
    IN name : ^UBYTE,
    IN kstack : ^VOID,
    IN kstacksize : UWORD,
    IN turnstile : ^KiTurnstile,
    IN startfunc : KeStartThreadF,
    IN context1 : UWORD,
    IN context2 : UWORD,
) : UWORD

EXTERN FN KeUninitializeThread (
    IN thread : ^KeThread,
) : UWORD

// This is the per-processor entry in the ASID table attached to each KeProcess
// object.

STRUCT KiAsidInfoEntry
    AsidSequenceNumber : RtlUquad,
    Asid : UWORD,
END

#DEFINE KE_DEBUG_NAME_LENGTH 32

#DEFINE KI_PROCESS_RESIDENT 1
#DEFINE KI_PROCESS_OUTSWAPPED 2
#DEFINE KI_PROCESS_TRANSITION 3

STRUCT KeProcess
    Name : UBYTE[KE_DEBUG_NAME_LENGTH],

    ThreadListHead : RtlListEntry,

    SignalThread : ^KeThread,

    SwapNext : ^KeProcess,
    SwapListHead : ^KeThread,

    Lock : KeLock,

    PageDirectoryPfn : UWORD,

#IF ( STRCMP ARCHITECTURE "xr17032" )
    AsidTable : ^KiAsidInfoEntry,
#END

#IF BLD_MP
    SwapStateSpinlock : KiSpinlock,
#END

    ResidentThreadCount : ULONG,
    ThreadCount : ULONG,

    Terminated : UBYTE,
    MemoryState : UBYTE,
    BasePriority : UBYTE,
END

#DEFINE KI_THREAD_WAIT_BLOCKS 4

#DEFINE KI_THREAD_WAIT_NONE 0
#DEFINE KI_THREAD_WAIT_TRY 1
#DEFINE KI_THREAD_WAIT_ABORTED 2
#DEFINE KI_THREAD_WAIT_COMMITTED 3

#DEFINE KI_THREAD_RUNNING 1
#DEFINE KI_THREAD_READY 2
#DEFINE KI_THREAD_WAITING 3
#DEFINE KI_THREAD_INITIALIZED 4
#DEFINE KI_THREAD_STANDBY 5
#DEFINE KI_THREAD_INFLIGHT 6
#DEFINE KI_THREAD_TERMINATED 7

#DEFINE KI_IDLE_QUEUE 1
#DEFINE KI_TIMESHARED_QUEUE 2
#DEFINE KI_REAL_TIME_QUEUE 3

#DEFINE KE_SUSPEND_MAX 255

STRUCT KeThread
    WaitBlockTable : ^KiWaitBlock,
    Context : ^OsContext,
    Process : ^KeProcess,
    ActualProcess : ^KeProcess,
    KernelStackTop : ^VOID,
    UserFrame : ^OsContext,

    BalancedQueue : ^KeBalancedQueue,
    QueueItem : ^RtlListEntry,

#IF BLD_MP
    AffinityPrb : ^KiPrb,
    CurrentPrb : ^KiPrb,
#END
    SwapCandidatePrb : ^KiPrb,

#IF BLD_MP
    Spinlock : KiSpinlock,
#END

    SignalMask : ULONG,
    SignalAcceptMask : ULONG,
    SignalDeliverOnWaitMask : ULONG,
    WaitStatus : OsStatus,
    SleepMs : ULONG,
    RunMs : ULONG,
    StateMs : ULONG,

    RemainingQuantum : BYTE,
    UserApcTriggered : UBYTE,
    UserInterrupt : UBYTE,
    WaitCount : UBYTE,
    Priority : UBYTE,
    BasePriority : UBYTE,
    Status : UBYTE,
    Alertable : UBYTE,
    WaitMode : UBYTE,
    WaitIpl : UBYTE,
    InSwapList : UBYTE,
    Interactive : UBYTE,
    CurrentQueue : UBYTE,
    SuspendCount : UBYTE,
    Terminated : UBYTE,
    KernelStackResident : UBYTE,
    IgnoreEventCount : UBYTE,
    KernelStackSwappable : UBYTE,
    AttachIpl : UBYTE,
    PriorityFloor : UBYTE,
    InteractivityFloor : UBYTE,
    PendingEventsSet : UBYTE,

#IF BLD_MP
    WaitAttempt : UBYTE,
    Pinned : UBYTE,
    Switching : UBYTE,
    CurrentMode : UBYTE,
    Boosted : UBYTE,
#END

    BestowedPriority : UBYTE,
    BestowedInteractivity : UBYTE,
    ExecutingKapc : UBYTE,

    // Put large and uncommonly accessed fields at the end to increase odds that
    // the commonly accessed ones are within range of immediate offsets on
    // various architectures (especially fox32 whose range is only 255 bytes).

    // NOTE: The ReadyEntry is reused by thread reaping and kernel stack
    //       swapping.

    ReadyEntry : RtlListEntry,
    BalancedQueueEntry : RtlListEntry,
    WaitEntry : RtlListEntry,
    ProcessListEntry : RtlListEntry,

    KapcListHead : RtlListEntry,
    LapcListHead : RtlListEntry,
    UapcListHead : RtlListEntry,

    // My turnstile.

    Turnstile : ^KiTurnstile,

    // The turnstile I'm currently blocked on.

    BlockedOnTurnstile : ^KiTurnstile,

    // Entry on the max-heap of threads blocked on that turnstile.
    // Ordered by BestowedPriority and BestowedInteractivity.

    TurnstileEntry : RtlHeapEntry,

    // List of turnstiles that were made by people waiting for me to release a
    // lock.

    PiTurnstileListHead : RtlListEntry,

    // The list head array is indexed by the current value of the ExecutingKapc
    // field.

    AbortListHead : ^KeAbortBlock[2],

    UserTimeMs : RtlUquad,
    DpcTimeMs : RtlUquad,
    SystemTimeMs : RtlUquad,

    SuspendLapc : KeApc,
    SuspendHeader : KiDispatchHeader,

    TimeoutWaitBlock : KiWaitBlock,
    Timeout : KeTimer,

    TerminationEvent : KeEvent,

    WaitBlocks : KiWaitBlock[KI_THREAD_WAIT_BLOCKS],

    LastFaultStatus : OsStatus,

    Name : UBYTE[KE_DEBUG_NAME_LENGTH],
END

EXTERN FN KeIgnoreEvents ()

EXTERN FN KeAcceptEvents ()

EXTERN FN KeInitializeEvent (
    IN event : ^KeEvent,
    IN name : ^UBYTE,
    IN notification : UWORD,
    IN signalstate : UWORD,
)

EXTERN FN KeResetEvent (
    IN event : ^KeEvent,
) : UWORD

EXTERN FN KeSignalEvent (
    IN event : ^KeEvent,
    IN priorityboost : UWORD,
) : UWORD

EXTERN FN KeSignalThread (
    IN thread : ^KeThread,
    IN signal : UWORD,
)

EXTERN FN KeSetBasePriorityThread (
    IN thread : ^KeThread,
    IN priority : UWORD,
    IN setcurrentpriority : UWORD,
)

EXTERN FN KeSetPriorityThread (
    IN thread : ^KeThread,
    IN priority : UWORD,
)

EXTERN FN KeReadyThread (
    IN thread : ^KeThread,
)

EXTERN FN KeSuspendThread (
    IN thread : ^KeThread,
) : UWORD

EXTERN FN KeUnsuspendThread (
    IN thread : ^KeThread,
    IN force : UWORD,
) : UWORD

EXTERN FN KeMaskSignalThread (
    IN thread : ^KeThread,
    IN signal : UWORD,
    IN enable : UWORD,
) : UWORD

EXTERN FN KeDeliverOnWaitSignalThread (
    IN thread : ^KeThread,
    IN signal : UWORD,
    IN enable : UWORD,
) : UWORD

EXTERN FN KeInitializeSemaphore (
    IN semaphore : ^KeSemaphore,
    IN name : ^UBYTE,
    IN initialcount : UWORD,
)

EXTERN FN KeReleaseSemaphore (
    IN semaphore : ^KeSemaphore,
    IN priorityboost : UWORD,
    IN count : UWORD,
) : UWORD

EXTERN FN KeAcquireLockShared (
    IN lock : ^KeLock,
)
EXTERN FN KeAcquireLockExclusive (
    IN lock : ^KeLock,
)

EXTERN FN KeReleaseLock (
    IN lock : ^KeLock,
)

EXTERN FN KeAcquireApcLockShared (
    IN lock : ^KeLock,
) : UWORD

EXTERN FN KeAcquireApcLockExclusive (
    IN lock : ^KeLock,
) : UWORD

EXTERN FN KeReleaseApcLock (
    IN lock : ^KeLock,
    IN oldipl : UWORD,
)

EXTERN FN KeConvertLockToShared (
    IN lock : ^KeLock,
)

EXTERN FN KeTryConvertLockToExclusive (
    IN lock : ^KeLock,
) : UWORD

#DEFINE KE_UNALERTABLE 0
#DEFINE KE_ALERTABLE 1
#DEFINE KE_CANCEL_ON_KAPC 2
#DEFINE KE_MAX_USER_ALERTABLE 2

#MACRO KeInvalidAlertability ( alertable ) [
    ((alertable) >= KE_MAX_USER_ALERTABLE)
]

#MACRO KeInvalidSignal ( signal ) [
    (((signal) == 0) | ((signal) >= OS_SIGNAL_COUNT))
]

EXTERN FN KeWaitForObjects (
    IN waitmode : UWORD,
    IN alertable : UWORD,
    IN timeout : ^RtlUquad,
    IN objectcount : UWORD,
    IN objecttable : ^^KiDispatchHeader,
    IN waitblocktable : ^KiWaitBlock,
) : OsStatus

EXTERN FN KeSleep (
    IN interval : ^RtlUquad,
    IN waitmode : UWORD,
    IN alertable : UWORD,
) : OsStatus

EXTERN FN KeWaitForSingleObject (
    IN waitmode : UWORD,
    IN alertable : UWORD,
    IN timeout : ^RtlUquad,
    IN object : ^KiDispatchHeader,
) : OsStatus

STRUCT KeBalancedQueue
    Header : KiDispatchHeader,
    ThreadListHead : RtlListEntry,
    ItemListHead : RtlListEntry,
    ActiveThreadCount : ULONG,
    MaximumThreadCount : ULONG,
END

EXTERN FN KeInitializeBalancedQueue (
    IN queue : ^KeBalancedQueue,
    IN name : ^UBYTE,
    IN maxthreads : UWORD,
)

EXTERN FN KeInsertIntoBalancedQueue (
    IN queue : ^KeBalancedQueue,
    IN item : ^RtlListEntry,
    IN head : UWORD,
    IN priorityboost : UWORD,
)

EXTERN FN KeRemoveFromBalancedQueue (
    IN queue : ^KeBalancedQueue,
    IN waitmode : UWORD,
    IN alertable : UWORD,
    IN timeout : ^RtlUquad,
    OUT item : ^RtlListEntry,
) : OsStatus

STRUCT KeRingBuffer
    Data : ^VOID,

    WriteIndex : ULONG,
    ReadIndex : ULONG,
    EntriesLeft : ULONG,
    BufferMask : ULONG,
#IF BLD_MP
    Spinlock : KiSpinlock,
#END

    EntrySizeLog : UINT,
    EntryCountLog : UINT,
    Overwrite : UBYTE,
END

UNION KiRequestLinks
    Sorted : RtlHeapEntry,
    List : RtlListEntry,
END

#DEFINE KE_REQUEST_QUEUE_FIFO 0
#DEFINE KE_REQUEST_QUEUE_KEY 1
#DEFINE KE_REQUEST_QUEUE_COST 2

#DEFINE KI_REQUEST_NONE 0
#DEFINE KI_REQUEST_ENQUEUED 1
#DEFINE KI_REQUEST_CURRENT 2
#DEFINE KI_REQUEST_CANCELLED 3
#DEFINE KI_REQUEST_COMPLETED 4

STRUCT KeRequestEntry
    Entry : KiRequestLinks,
    SortKey : UWORD,
    Cost : UINT,
    HeapIndex : UBYTE,
    Status : UBYTE,
END

#MACRO KeInitializeCostRequest ( request, cost ) [
    NOTHING (request)^.Cost = (cost)
    NOTHING (request)^.SortKey = (cost)
    NOTHING (request)^.Status = KI_REQUEST_NONE
]

#MACRO KeInitializeSortedRequest ( request, sortkey, cost ) [
    NOTHING (request)^.Cost = (cost)
    NOTHING (request)^.SortKey = (sortkey)
    NOTHING (request)^.Status = KI_REQUEST_NONE
]

#MACRO KeInitializeFifoRequest ( request, cost ) [
    NOTHING (request)^.Cost = (cost)
    NOTHING (request)^.Status = KI_REQUEST_NONE
]

FNPTR KeRequestStartF (
    IN request : ^KeRequestEntry,
)

FNPTR KeRequestCompleteF (
    IN request : ^KeRequestEntry,
    IN cancelled : UWORD,
) : UWORD

STRUCT KiRequestSortedHead
    Roots : ^RtlHeapEntry[2],
END

UNION KiRequestHeads
    Sorted : KiRequestSortedHead,
    List : RtlListEntry,
END

STRUCT KeRequestQueue
    Head : KiRequestHeads,
    Pivot : UWORD,
    StartFunction : KeRequestStartF,
    CompleteFunction : KeRequestCompleteF,

#IF BLD_MP
    Spinlock : KiSpinlock,
#END

    Current : UINT,
    Maximum : UINT,

    SortPolicy : UBYTE,
    CurrentQueueIndex : UBYTE,
END

EXTERN FN KeInitializeRequestQueue (
    IN queue : ^KeRequestQueue,
    IN sortpolicy : UWORD,
    IN startfunc : KeRequestStartF,
    IN completefunc : KeRequestCompleteF,
    IN maximum : UWORD,
)

EXTERN FN KeCompleteRequestQueue (
    IN queue : ^KeRequestQueue,
    IN request : ^KeRequestEntry,
) : UWORD

EXTERN FN KeCancelRequestQueue (
    IN queue : ^KeRequestQueue,
    IN request : ^KeRequestEntry,
) : UWORD

EXTERN FN KeFinishCancelRequestQueue (
    IN queue : ^KeRequestQueue,
    IN request : ^KeRequestEntry,
)

EXTERN KeStackSwapperEvent : KeEvent

EXTERN FN KeFlushThreadInSwapQueue () : ^KeThread
EXTERN FN KeFlushProcessInSwapQueue () : ^KeProcess
EXTERN FN KeFlushProcessOutSwapQueue () : ^KeProcess

EXTERN FN KeSetProcessOutswapped (
    IN process : ^KeProcess,
) : UWORD

EXTERN FN KeHarvestSwapCandidates (
    IN procid : UWORD,
) : ^KeThread

EXTERN FN KeReadyInswappedThread (
    IN thread : ^KeThread,
)

EXTERN FN KeReadyInswappedProcess (
    IN process : ^KeProcess,
)

EXTERN FN KeExitThread (
    IN thread : ^KeThread,
)

EXTERN FN KeSweepMyTb (
    IN keepglobal : UWORD,
)

EXTERN FN KeFlushMyTbAddress (
    IN address : ^VOID,
)

EXTERN FN KeSweepTb (
    IN keepglobal : UWORD,
)

EXTERN FN KeFlushSingleTb (
    IN vaddr : ^VOID,
)

EXTERN FN KeFlushMultipleTb (
    IN vaddrtable : ^^VOID,
    IN pagecount : UWORD,
)

EXTERN FN KeSweepDcache ()

EXTERN FN KeFlushDcachePages (
    IN pfntable : ^^VOID,
    IN pagecount : UWORD,
)

EXTERN FN KeSweepIcache ()

EXTERN FN KeFlushIcachePages (
    IN pfntable : ^^VOID,
    IN pagecount : UWORD,
)

EXTERN FN KeSetQuickPtes (
    IN basepte : ^VOID,
    IN ptesize : UWORD,
)

EXTERN FN KeZeroPage (
    IN pfn : UWORD,
)

EXTERN KeSystemPageDirectoryPfn : UWORD

FNPTR KeAbortableF (
    IN context : ^VOID,
) : OsStatus

#DEFINE KE_ABORT_CATCH_SYSTEM_SPACE 1
#DEFINE KE_ABORT_CATCH_USER_SPACE 2

STRUCT KeAbortBlock
    Next : ^KeAbortBlock,
    Context : OsContext,
    Status : ULONG,
    Flags : ULONG,
END

EXTERN FN KeExceptionJacket (
    IN abortblock : ^KeAbortBlock,
    IN func : KeAbortableF,
    IN context : ^VOID,
    IN flags : UWORD,
) : OsStatus

EXTERN KeUexecApcDispatcher : ^VOID
EXTERN KeUexecSignalDispatcher : ^VOID

FNPTR KeCustodyListActivateF (
    IN list : ^KeCustodyList,
)

FNPTR KeProcessCustodyListF (
    IN list : ^KeCustodyList,
    IN object : ^VOID,
    IN context : ^VOID,
)

STRUCT KeCustodyList
    Head : ^VOID,
    ActivateRoutine : KeCustodyListActivateF,
    Context : UWORD,
END

EXTERN FN KeInsertCustodyList (
    IN list : ^KeCustodyList,
    IN link : ^^VOID,
)

EXTERN FN KeProcessCustodyList (
    IN list : ^KeCustodyList,
    IN callback : KeProcessCustodyListF,
    IN context : ^VOID,
)

#MACRO KeInitializeCustodyList ( list, activateroutine, context ) [
    NOTHING (list)^.Head = NULLPTR
    NOTHING (list)^.ActivateRoutine = (activateroutine)
    NOTHING (list)^.Context = (context)
]

#IF BLD_MP

EXTERN FN KeReaperBarrier (
    IN thread : ^KeThread,
)

#END

EXTERN KeReaperCustodyList : KeCustodyList

#IF BLD_CHK

EXTERN KiAssertionMessage : UBYTE[]

#MACRO KeAssert ( expression ) [
    #DEFINE EXPR_STRING ( STRCAT ( STRCAT "\"" expression ) "\"" )
    #DEFINE FN_STRING ( STRCAT ( STRCAT "\"" JKL_FILE_NAME ) "\"" )
    #DEFINE FUNC_STRING ( STRCAT ( STRCAT "\"" JKL_FUNC_NAME ) "\"" )
    #DEFINE LN_STRING ( STRCAT "" JKL_LINE_NUMBER )

    IF NOT (expression) THEN
        KeCrash (
            &KiAssertionMessage[0], // fmt
            FUNC_STRING,
            FN_STRING,
            LN_STRING,
            EXPR_STRING,
        )
    END
]

#ELSE

#MACRO KeAssert ( expression ) []

#END