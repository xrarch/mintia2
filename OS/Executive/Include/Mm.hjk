//
// Public header file for the Memory Management (Mm) component of the MINTIA
// Executive.
//

#INCLUDE "<ll>/Rtl.hjk"

FNPTR MmUseQuickPteF (
    IN vaddr : ^VOID,
    IN context : ^VOID,
) : OsStatus

EXTERN FN MmUseQuickPte (
    IN func : MmUseQuickPteF,
    IN pfn : UWORD,
    IN context : ^VOID,
) : OsStatus

EXTERN FN MmZeroPage (
    IN pfn : UWORD,
)

EXTERN FN MmShouldAccessCrash (
    IN abortblock : ^KeAbortBlock,
    IN badaddr : ^VOID,
    IN status : OsStatus,
) : UWORD

EXTERN FN MmIsVirtualValid (
    IN vaddr : ^VOID,
) : UWORD

EXTERN FN MmCreateKernelStack (
    IN process : ^PsProcess,
    OUT kstack : ^VOID,
) : OsStatus

EXTERN FN MmFreeKernelStack (
    IN process : ^PsProcess,
    IN kstack : ^VOID,
)

#MACRO MmAllocatePool ( poolindex, bytes, tag, wait ) [
    MmAllocatePoolEx (
        NULLPTR, // node
        poolindex, // poolindex
        bytes, // bytes
        tag, // tag
        wait, // wait
    )
]

EXTERN FN MmAllocatePoolEx (
    IN node : ^MiNode,
    IN poolindex : UWORD,
    IN bytes : UWORD,
    IN tag : ULONG,
    IN wait : UWORD,
) : ^VOID

EXTERN FN MmFreePool (
    IN ptr : ^VOID,
    IN tag : ULONG,
)

EXTERN FN MmGetOverheadOfBlock (
    IN ptr : ^VOID,
) : UWORD

EXTERN FN MmGetOverheadOfBytes (
    IN bytes : UWORD,
) : UWORD

STRUCT MmZoneHeader
    BlockSize : UWORD,
    FreeListHead : ^MiFreeZoneBlock,
    ChunkListHead : ^MiZoneChunk,
END

STRUCT MiZoneChunk
    Next : ^MiZoneChunk,
END

#DEFINE MM_ZONE_OVERHEAD [(SIZEOF MiZoneChunk)]

EXTERN FN MmInitializeZone (
    IN zone : ^MmZoneHeader,
    IN blocksize : UWORD,
)

EXTERN FN MmExtendZone (
    IN zone : ^MmZoneHeader,
    IN hunk : ^VOID,
    IN bytes : UWORD,
)

EXTERN FN MmEmptyZone (
    IN zone : ^MmZoneHeader,
    IN tag : UWORD,
)

EXTERN FN MmAllocateZone (
    IN zone : ^MmZoneHeader,
) : ^VOID

EXTERN FN MmFreeZone (
    IN zone : ^MmZoneHeader,
    IN ptr : ^VOID,
)

EXTERN FN MmChargeCommit (
    IN partition : ^MiPartition,
    IN pages : UWORD,
    IN wait : UWORD,
) : OsStatus

EXTERN FN MmUnchargeCommit (
    IN partition : ^MiPartition,
    IN pages : UWORD,
)

EXTERN FN MmReferenceQuotaBlock (
    IN quotablock : ^MiQuotaBlock,
)

EXTERN FN MmUnreferenceQuotaBlock (
    IN quotablock : ^MiQuotaBlock,
)

EXTERN FN MmLookupQuotaBlock (
    IN uid : UWORD,
    IN copyquotablock : ^MiQuotaBlock,
) : ^MiQuotaBlock

EXTERN FN MmChargePoolQuota (
    IN quotablock : ^MiQuotaBlock,
    IN charge : UWORD,
    IN poolindex : UWORD,
) : OsStatus

EXTERN FN MmUnchargePoolQuota (
    IN quotablock : ^MiQuotaBlock,
    IN charge : UWORD,
    IN poolindex : UWORD,
)

EXTERN FN MmChargeVmQuota (
    IN partition : ^MiPartition,
    IN quotablock : ^MiQuotaBlock,
    IN pages : UWORD,
) : OsStatus

EXTERN FN MmUnchargeVmQuota (
    IN partition : ^MiPartition,
    IN quotablock : ^MiQuotaBlock,
    IN pages : UWORD,
)

EXTERN FN MmSetQuotaLimits (
    IN quotablock : ^MiQuotaBlock,
    IN query : ^OsQuotaQuery,
)

EXTERN FN MmQueryQuota (
    IN quotablock : ^MiQuotaBlock,
    IN query : ^OsQuotaQuery,
)

EXTERN FN MmInitializeProcess (
    IN parentprocess : ^PsProcess,
    IN process : ^PsProcess,
    IN partition : ^MiPartition,
) : OsStatus

EXTERN FN MmUninitializeProcess (
    IN process : ^PsProcess,
)

EXTERN FN MmDeleteProcess (
    IN process : ^PsProcess,
)

EXTERN FN MmQueryProcess (
    IN process : ^PsProcess,
    IN query : ^OsProcessQuery,
)

EXTERN FN MmInitializeThread (
    IN process : ^PsProcess,
    IN thread : ^PsThread,
    IN mode : UWORD,
) : OsStatus

EXTERN FN MmUninitializeThread (
    IN process : ^PsProcess,
    IN thread : ^PsThread,
)

EXTERN FN MmInitializeStage1 ()

EXTERN FN MmJettisonUnusedResources ()

ENUM MmPoolIndices : UBYTE
    MM_NONPAGED_POOL,
    MM_PRIVILEGED_POOL,
    MM_PAGED_POOL,
    MM_PAGE_TRACKING_POOL,

    MM_MAXIMUM_POOL,
END

STRUCT MmObject
    // The object lock is superior to the page list lock.

    Lock : KeLock,

    // The structure lock is inferior to the page list lock.

    StructureLock : KeLock,

    SizeInBytes : RtlUquad,
END

STRUCT MmBackedObject
    Hdr : MmObject,

    PageTreeRoot : RtlAvlNode,
END

#DEFINE MM_UNINITIALIZED_SYSTEM 0
#DEFINE MM_TINY_SYSTEM 1
#DEFINE MM_SMALL_SYSTEM 2
#DEFINE MM_MEDIUM_SYSTEM 3
#DEFINE MM_LARGE_SYSTEM 4
#DEFINE MM_MASSIVE_SYSTEM 5

EXTERN FN MmGetSystemSize () : UWORD

// With three levels this can describe 4,311,810,312 pages, or about 18TB.

#DEFINE MI_EMBEDDED_PAGES 8
#DEFINE MI_LEVEL_ENTRIES 256
#DEFINE MI_DIRECT [(MI_EMBEDDED_PAGES + MI_LEVEL_ENTRIES)]
#DEFINE MI_INDIRECT [(MI_DIRECT + (MI_LEVEL_ENTRIES * MI_LEVEL_ENTRIES))]
#DEFINE MI_DBLY_INDIRECT [(MI_INDIRECT + (MI_LEVEL_ENTRIES * MI_LEVEL_ENTRIES * MI_LEVEL_ENTRIES))]
#DEFINE MI_TPLY_INDIRECT [(MI_DBLY_INDIRECT + (MI_LEVEL_ENTRIES * MI_LEVEL_ENTRIES * MI_LEVEL_ENTRIES * MI_LEVEL_ENTRIES))]

STRUCT MmExtensibleObject
    Hdr : MmObject,

    EmbeddedArray : UWORD[MI_EMBEDDED_PAGES],
    DirectArray : ^UWORD,
    IndirectArray : ^^UWORD,
    DoublyIndirectArray : ^^^UWORD,
    TriplyIndirectArray : ^^^^UWORD,
END

#DEFINE MM_MDL_FREE 1
#DEFINE MM_MDL_UNPIN 2
#DEFINE MM_MDL_UNMAP 4

STRUCT MmMdlHeader
    VirtualAddress : ^VOID,
    MappedAddress : ^VOID,
    
    Length : UWORD,

    Process : ^PsProcess,

    Flags : UBYTE,
END

EXTERN FN MmCompleteMdl (
    IN mdl : ^MmMdlHeader,
)

EXTERN FN MmSafeCopyIn (
    IN dest : ^VOID,
    IN src : ^VOID,
    IN sz : UWORD,
) : OsStatus

EXTERN FN MmSafeCopyOut (
    IN dest : ^VOID,
    IN src : ^VOID,
    IN sz : UWORD,
) : OsStatus

EXTERN FN MmCaptureString (
    IN string : ^RtlString,
    IN output : ^RtlString,
    IN maxlen : UWORD,
) : OsStatus

EXTERN FN MmFreeCapturedString (
    IN string : ^RtlString,
)

EXTERN FN MmAllocateAndChargeSysBuffer (
    IN bytes : UWORD,
    IN poolindex : UWORD,
    IN tag : UWORD,
    OUT ptr : ^VOID,
) : OsStatus

EXTERN FN MmDeallocateAndUnchargeSysBuffer (
    IN ptr : ^VOID,
    IN tag : UWORD,
    IN bytes : UWORD,
    IN poolindex : UWORD,
)

EXTERN FN MmPageFault (
    IN address : ^VOID,
    IN writing : UWORD,
    IN usermode : UWORD,
) : OsStatus

FNPTR MmPoolCacheConstructorF (
    IN node : ^MiNode,
    IN ptr : ^VOID,
    IN context : ^VOID,
    IN wait : UWORD,
) : OsStatus

FNPTR MmPoolCacheDestructorF (
    IN ptr : ^VOID,
    IN context : ^VOID,
)

EXTERN FN MmAllocateFromPoolCache (
    IN cache : ^MiPoolCache,
    IN wait : UWORD,
) : ^VOID

EXTERN FN MmFreeToPoolCache (
    IN cache : ^MiPoolCache,
    IN ptr : ^VOID,
)

EXTERN FN MmCreatePoolCache (
    IN node : ^MiNode,
    IN name : ^UBYTE,
    IN size : UWORD,
    IN poolindex : UWORD,
    IN tag : UWORD,
    IN constructor : MmPoolCacheConstructorF,
    IN destructor : MmPoolCacheDestructorF,
    IN context : ^VOID,
) : ^MiPoolCache

EXTERN FN MmDeletePoolCache (
    IN cache : ^MiPoolCache,
)