//
// Public header for namespace management for the MINTIA Executive.
//

#INCLUDE "<inc>/Ob.hjk"

#INCLUDE "<ll>/System/OsNamespace.hjk"

#DEFINE NS_ENTRY_CREATED 1
#DEFINE NS_ENTRY_VIRTUAL 2
#DEFINE NS_ENTRY_NEGATIVE 4
#DEFINE NS_ENTRY_TRANSITION 8
#DEFINE NS_ENTRY_LEAF 16

STRUCT NsEntry
    LookupEntry : RtlAvlNode,

    ReclaimEntry : RtlListEntry,

    VirtualChildEntry : RtlListEntry,

    Name : ^ExName,

    BouncePath : ^ExName,

    Object : ^VOID,

    Parent : ^NsEntry,

    LookupRoot : RtlAvlNode,

    VirtualChildListHead : RtlListEntry,

    References : ULONG,
    VirtualChildCount : ULONG,
    MountedOnCount : ULONG,

    Permissions : ^ObPermissions,

    Flags : UBYTE,
END

STRUCT NsContainerEntry
    Entry : NsEntry,
    Permissions : ObPermissions,
END

STRUCT NsHandle
    Entry : ^NsEntry,
    Subspace : ^NsSubspace,
END

STRUCT NsSubspace
    MountListEntry : RtlListEntry,

    Root : ^NsEntry,
    MountedUpon : NsHandle,

    References : ULONG,
END

STRUCT NsLookupContext
    // The parent object is passed in through here, and the new object is passed
    // out through the same field.

    Object : ^VOID,

    // The name is passed in through here.

    Name : ^UBYTE,
    
    // If a symlink is followed, a new path should be passed out here.

    BouncePath : ^ExName,

    // Open flags are passed in through here.

    Flags : ULONG,
    
    // Namespace entry flags are passed out through here.

    EntryFlags : ULONG,
END

FNPTR NsObjectInitializationF (
    IN object : ^VOID,
    IN context : ^VOID,
) : OsStatus

#DEFINE NS_RESULT_CREATED 1

STRUCT NsOpenParameters
    Captured : OsOpenParameters,

    Path : RtlString,
    InitialHandle : NsHandle,

    ResultFlags : ULONG,
END

EXTERN FN NsCreateObject (
    IN params : ^NsOpenParameters,
    IN obparams : ^ObParameters,
    OUT object : ^VOID,
) : OsStatus

EXTERN FN NsLookupObject (
    IN params : ^NsOpenParameters,
    IN type : ^ObType,
    OUT object : ^VOID,
) : OsStatus

EXTERN FN NsUnlinkObject (
    IN object : ^VOID,
)

EXTERN FN NsLookupEntryByPath (
    IN params : ^NsOpenParameters,
    IN handle : ^NsHandle,
    IN cred : ^ObCredentials,
    IN obparams : ^ObParameters,
    IN type : ^ObType,
) : OsStatus

EXTERN FN NsCaptureOpenParameters (
    IN userparams : ^OsOpenParameters,
    IN sysparams : ^NsOpenParameters,
) : OsStatus

EXTERN FN NsFreeOpenParameters (
    IN params : ^NsOpenParameters,
)

EXTERN FN NsInitializeProcess (
    IN process : ^PsProcess,
    IN parentprocess : ^PsProcess,
)

EXTERN FN NsUninitializeProcess (
    IN process : ^PsProcess,
)

EXTERN FN NspReferenceEntry (
    IN entry : ^NsEntry,
)

EXTERN FN NspUnreferenceEntry (
    IN entry : ^NsEntry,
)

EXTERN FN NsInitialize ()

#MACRO NsCopyHandle ( dest, src ) [
    NOTHING (dest)^.Entry = (src)^.Entry
    NOTHING (dest)^.Subspace = (src)^.Subspace
]

#MACRO NspReferenceSubspace ( subspace ) [
    KeIncrementUlong ( &(subspace)^.References, 1 )
]

#MACRO NspUnreferenceSubspace ( subspace ) [
    KeIncrementUlong ( &(subspace)^.References, 0xFFFFFFFF )
]

#MACRO NsUnreferenceHandle ( handle ) [
    NspUnreferenceEntry ( (handle)^.Entry )
    NspUnreferenceSubspace ( (handle)^.Subspace )
]

#MACRO NsReferenceHandle ( handle ) [
    NspReferenceEntry ( (handle)^.Entry )
    NspReferenceSubspace ( (handle)^.Subspace )
]

#MACRO NsInitializeObjectParameters ( obparams, params, type, context, bodysize, pagedbodysize, npquotabias, pgquotabias ) [
    ObInitializeParameters (
        obparams, // obparams
        type, // type
        context, // context
        PsCurrentCredentials (), // cred
        (params)^.Captured.Permissions, // access
        (params)^.Captured.ObFlags, // flags
        bodysize, // bodysize
        pagedbodysize, // pagedbodysize
        npquotabias, // npquotabias
        pgquotabias, // pgquotabias
    )
]