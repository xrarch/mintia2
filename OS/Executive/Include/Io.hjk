//
// Public header for I/O management for the MINTIA Executive.
//

#INCLUDE "<inc>/Ns.hjk"
#INCLUDE "<ll>/System/OsFile.hjk"

#IF ( NOT ( DEFINED IO_INTERNAL ) )
    #DEFINE IO_INTERNAL 0
#END

EXTERN FN IoInitialize ()

FNPTR IoOpenFileObjectF (
    IN process : ^PsProcess,
    IN file : ^IoFile,
    IN access : UWORD,
) : OsStatus

FNPTR IoCloseFileObjectF (
    IN file : ^IoFile,
    IN access : UWORD,
    IN lasthandlecount : UWORD,
)

FNPTR IoDeleteFileObjectF (
    IN file : ^IoFile,
)

FNPTR IoDeleteFcbF (
    IN fcb : ^IoFcb,
) : UWORD

FNPTR IoSetSecurityFcbF (
    IN fcb : ^IoFcb,
    IN permissions : ^ObPermissions,
) : OsStatus

FNPTR IoNamespaceLookupF (
    IN context : ^NsLookupContext,
) : OsStatus

FNPTR IoPacketBasedCallF (
    IN packet : ^IoPacket,
    IN trampoline : ^IoTrampoline,
) : OsStatus

ENUM IoFunctionCode : UBYTE
    IO_FUNCTION_READ,
    IO_FUNCTION_WRITE,
    IO_FUNCTION_IOCTL,

    IO_FUNCTION_MAX,
END

STRUCT IoDispatchTableCalls
    Read : IoPacketBasedCallF, // 0
    Write : IoPacketBasedCallF, // 1
    Ioctl : IoPacketBasedCallF, // 2

    OpenFileObject : IoOpenFileObjectF,
    CloseFileObject : IoCloseFileObjectF,
    DeleteFileObject : IoDeleteFileObjectF,

    DeleteFcb : IoDeleteFcbF,
    SetSecurityFcb : IoSetSecurityFcbF,
    NamespaceLookup : IoNamespaceLookupF,
END

UNION IoDispatchTable
    F : IoDispatchTableCalls,
    A : IoPacketBasedCallF[IO_FUNCTION_MAX],
END

STRUCT IoFcb
    Dispatch : ^IoDispatchTable,
END

STRUCT IoFile
    Handle : NsHandle,

    Fcb : ^IoFcb,

    Seek : RtlUquad,
END

EXTERN FN IoRundownThread (
    IN thread : ^PsThread,
)

// Assume the average context size for an IoLocation is 4 UWORDs, which is
// 16 bytes on 32-bit and 32 bytes on 64-bit.

#DEFINE IO_LOCATION_AVERAGE_CONTEXT [(SIZEOF UWORD * 4)]

FNPTR IoLocationCompletionF (
    IN iol : ^IoLocation,
) : OsStatus

FNPTR IoPacketCompletionF (
    IN packet : ^IoPacket,
) : OsStatus

// The location was allocated from a zone.

#DEFINE IOP_LOCATION_FROM_ZONE 1

// The location should not be freed.

#DEFINE IOP_LOCATION_DONT_FREE 2

STRUCT IoLocation // IOL
    // Pointer to the packet.

    Packet : ^IoPacket,

    // Location list links.

    Entry : RtlListEntry,

    // Driver-specific context area allocated inline with the location.

    Context : ^VOID,

    // Optional routine to run in completion context.

    CompletionRoutine : IoLocationCompletionF,

#IF IO_INTERNAL
    // Flags related to things like whether the location was allocated from a
    // zone.

    Flags : UBYTE,
#END

END

STRUCT IopInlinedLocation
    Location : IoLocation,

    Context : UBYTE[IO_LOCATION_AVERAGE_CONTEXT],
END

ENUM IoPacketType : UBYTE
    IO_PACKET_TYPE_NORMAL,
    IO_PACKET_TYPE_USERASYNC,

    IO_PACKET_TYPE_MAX,
END

// The IOP was taken from one of the zones.

#DEFINE IO_PACKET_FROM_ZONE 1

// The IOP should be freed upon completion.

#DEFINE IO_PACKET_AUTO_FREE 2

// The associated MDL should be completed (unpinned etc) with the IOP.

#DEFINE IO_PACKET_AUTO_COMPLETE_MDL 4

// The request is on behalf of usermode.

#DEFINE IO_PACKET_USERMODE 16

// The packet has been completed.

#DEFINE IO_PACKET_COMPLETED 32

// The packet has a timeout.

#DEFINE IO_PACKET_TIMEOUT 64

// N.B. Changing the offsets of the fields within the following structs will
//      break practically every driver. Extending the overall size of the
//      structs, however, is designed to be fine.

STRUCT IoPacket // aka "IOP"
    // Timeout (if any).

    Timeout : RtlUquad,

    // If this is an associated (fragment) packet, this contains the pointer to
    // the parent IOP.

    ParentPacket : ^IoPacket,

    // General completion routine, set by the guy who allocated the packet.

    CompletionRoutine : IoPacketCompletionF,

    // Pointer to a ref'd event object if user async I/O. Otherwise, just some
    // KeEvent. In either case, signal upon completion if non-null.

    CompletionEvent : ^KeEvent,

    // Pointer to an MDL that describes the buffer this operation is
    // transferring to/from, if relevant. If the flag
    // IO_PACKET_AUTO_COMPLETE_MDL is set, the MDL will be unmapped, unpinned,
    // and freed when the IOP completes.

    Mdl : ^MmMdlHeader,

    // An offset in the MDL to which the transfer should be directed.

    OffsetInMdl : UWORD,

    // Links for generic device-specific queue of pending IOPs.

    RequestEntry : KeRequestEntry,

    // IOL list head.

    LocationListHead : RtlListEntry,

    // An inlined IoLocation, since having at least one is exceedingly common.

    Inlined : IopInlinedLocation,

    // Status block that will be copied out upon completion.
    // Contains space for a 32-bit status and 32-bit informational (i.e.
    // length).

    StatusBlock : OsIoStatusBlock,

    // An inlined IoLocation, since having at least one (at the physical device
    // level) is exceedingly common.

    // Multipurpose kernel-reserved IO flags.

    KernelFlags : ULONG,

    // Number of associated packets depended upon by this one for completion.
    // It is also biased by one just because this IOP exists, since completion
    // occurs when IoCount drops to zero and otherwise that count is simply
    // decremented.

    IoCount : ULONG,

    // Status at enqueue time.

    EnqueueStatus : OsStatus,

    // Saved priority boost.

    PriorityBoost : UBYTE,

    // Packet type:
    //  o NORMAL: Synchronous user IO, page-in IO, associated (fragment) IO, etc
    //  o USERASYNC: Asynchronous user IO (needs special completion).

    Type : IoPacketType,

    // Flags pertaining to things like whether the IOP is zone-allocated or
    // pool-allocated, whether the MDL should be freed, etc.

    IopFlags : UBYTE,
END

#IF IO_INTERNAL

STRUCT IoUserAsyncPacket
    Header : IoPacket,

    // Things required for user async IO completion.

    // An APC is required to write out the IO status block and/or enqueue the
    // completion message and/or enqueue the completion APC. Will be reused as
    // the user completion APC if required.

    CompletionApc : KeApc,

    // A file object pointer is required in order to unreference the target
    // file.

    FileObject : ^IoFile,

    // Pointer to the userspace IO status block.

    UserStatusBlock : ^VOID,

    // Pointer to the user-supplied completion APC routine.

    UserApcRoutine : ^VOID,

    // Links for the per-thread list of pending IOPs.

    ThreadEntry : RtlListEntry,
END

#END

#MACRO IoPacketFromLocation ( iopl ) [
    ((iopl)^.Iop)
]

#MACRO IoPacketMappedBuffer ( iop ) [
    ((iop)^.Mdl^.MappedAddress + (iop)^.OffsetInMdl)
]

#MACRO IoPacketVirtualBuffer ( iop ) [
    ((iop)^.Mdl^.VirtualAddress + (iop)^.OffsetInMdl)
]

#MACRO IoPacketWasEnqueued ( iop ) [
    NOTHING (iop)^.IopFlags |= IO_PACKET_ENQUEUED_BY_DEVICE
]

STRUCT IoReadWriteParameters
    ByteOffset : RtlUquad,
    Length : ULONG,
    Flags : ULONG,
END

STRUCT IoIoctlParameters
    InputBuffer : ^VOID,
    InputLength : ULONG,
    Code : ULONG,
    OutputLength : ULONG,
END

UNION IoParameters
    Rw : IoReadWriteParameters,
    Ioctl : IoIoctlParameters,
END

// The inline location has been used.

#DEFINE IOP_TRAMPOLINE_INLINE_LOC_USED 1

// A location has been allocated for the current level.

#DEFINE IOP_TRAMPOLINE_LOC_ALLOCED 2

// The trampoline was zone-allocated.

#DEFINE IOP_TRAMPOLINE_FROM_ZONE 4

// Don't free the trampoline.

#DEFINE IOP_TRAMPOLINE_DONT_FREE 8

STRUCT IoTrampoline
    // Target FCB of the IO operation.

    Fcb : ^IoFcb,

    // Function-specific parameters.

    P : IoParameters,

    // Indicates the function code of the operation.

    FunctionCode : IoFunctionCode,

#IF IO_INTERNAL
    // Pointer to the packet related to the IO operation.

    Packet : ^IoPacket,

    // Deferred enqueue list links.

    DeferredEntry : RtlListEntry,

    // Internal flags.

    InternalFlags : ULONG,
#END

END

EXTERN FN IoCompletePacket (
    IN packet : ^IoPacket,
    IN status : OsStatus,
    IN priorityboost : UWORD,
)