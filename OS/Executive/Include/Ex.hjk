//
// Public header file for the Executive Support (Ex) component of the MINTIA
// Executive.
//

#INCLUDE "<inc>/Ke.hjk"

EXTERN FN (KeStartThreadF) ExStartSystemProcess (
    IN context1 : UWORD,
    IN context2 : UWORD,
)

STRUCT ExHandleTable
    Entries : UWORD,

    QuotaBlock : ^MiQuotaBlock,

    Table : ^^VOID,

    FreeListHead : ULONG,

    EntrySizeLog : UBYTE,
END

FNPTR ExHandleTableEnumerationF (
    IN handletable : ^ExHandleTable,
    IN handle : UWORD,
    IN entryptr : ^VOID,
    IN context : UWORD,
)

EXTERN FN ExInitializeHandleTable (
    IN handletable : ^ExHandleTable,
    IN entrysizelog : UWORD,
    IN quotablock : ^MiQuotaBlock,
)

EXTERN FN ExEnumerateHandleTable (
    IN handletable : ^ExHandleTable,
    IN func : ExHandleTableEnumerationF,
    IN context : UWORD,
)

EXTERN FN ExLookupHandle (
    IN handletable : ^ExHandleTable,
    IN handle : UWORD,
) : ^VOID

EXTERN FN ExDeleteHandleTable (
    IN handletable : ^ExHandleTable,
    IN func : ExHandleTableEnumerationF,
    IN context : UWORD,
)

EXTERN FN ExDeleteHandle (
    IN handletable : ^ExHandleTable,
    IN handle : UWORD,
    IN entry : ^VOID,
) : UWORD

EXTERN FN ExCreateHandle (
    IN handletable : ^ExHandleTable,
    OUT handle : UWORD,
    OUT entryptr : ^VOID,
) : OsStatus

STRUCT ExpEventCounterUsed
    Event : KeEvent,
    References : ULONG,
END

UNION ExEventCounter
    Used : ExpEventCounterUsed,
    Free : RtlListEntry,
END

EXTERN FN ExAllocateEventCounter (
    IN wait : UWORD,
) : ^ExEventCounter

EXTERN FN ExReferenceEventCounter (
    IN counter : ^ExEventCounter,
)

EXTERN FN ExUnreferenceEventCounter (
    IN counter : ^ExEventCounter,
)

STRUCT ExName
    Entry : RtlAvlNode,

    References : ULONG,

    BucketIndex : UBYTE,
END

#MACRO ExNameToString ( name ) [
    (CAST (name + SIZEOF ExName) TO ^RtlString)
]

EXTERN FN ExFindName (
    IN str : ^RtlString,
) : ^ExName

EXTERN FN ExUnreferenceName (
    IN name : ^ExName,
)

EXTERN FN ExReferenceName (
    IN name : ^ExName,
)

STRUCT ExEvent
    Event : KeEvent,
END

#MACRO ExInitializeWorkItem ( item, routine ) [
    NOTHING (item)^.Routine = (routine)
]

FNPTR ExWorkItemF (
    IN context1 : UWORD,
    IN context2 : UWORD,
)

STRUCT ExWorkItem
    QueueEntry : RtlListEntry,
    Routine : ExWorkItemF,
    Context1 : UWORD,
    Context2 : UWORD,
END

ENUM ExWorkQueuePriority : UBYTE
    EX_LOW_WORK_PRIORITY,
    EX_HIGH_WORK_PRIORITY,

    EX_MAX_WORK_PRIORITY,
END

EXTERN FN ExEnqueueWorkItem (
    IN item : ^ExWorkItem,
    IN priority : ExWorkQueuePriority,
    IN context1 : UWORD,
    IN context2 : UWORD,
)

#DEFINE EX_SET_INITIAL_BUFFER 4

STRUCT ExObjectSet
    Buffer : ^^VOID,
    InitialBuffer : ^VOID[EX_SET_INITIAL_BUFFER],
    Index : ULONG,
    Capacity : ULONG,
    Tag : ULONG,
    PoolIndex : UBYTE,
END

EXTERN FN ExRemoveObjectFromSetByIndex (
    IN set : ^ExObjectSet,
    IN index : UWORD,
)

EXTERN FN ExFindObjectInSet (
    IN set : ^ExObjectSet,
    IN object : ^VOID,
) : UWORD

EXTERN FN ExAppendSet (
    IN set : ^ExObjectSet,
    IN object : ^VOID,
) : OsStatus

EXTERN FN ExInitializeSet (
    IN set : ^ExObjectSet,
    IN tag : UWORD,
    IN poolindex : UWORD,
)

EXTERN FN ExRemoveObjectFromSet (
    IN set : ^ExObjectSet,
    IN object : ^VOID,
) : UWORD

FNPTR ExEnumerateSetF (
    IN set : ^ExObjectSet,
    IN object : ^VOID,
    IN context : ^VOID,
) : OsStatus

EXTERN FN ExEnumerateSet (
    IN set : ^ExObjectSet,
    IN enumfunc : ExEnumerateSetF,
    IN context : ^VOID,
) : OsStatus

EXTERN FN ExEmptySet (
    IN set : ^ExObjectSet,
    IN enumfunc : ExEnumerateSetF,
    IN context : ^VOID,
)