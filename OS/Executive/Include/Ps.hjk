//
// Public header for process and thread management for the MINTIA Executive.
//

#INCLUDE "<inc>/Ke.hjk"
#INCLUDE "<inc>/Ex.hjk"
#INCLUDE "<inc>/Mm.hjk"
#INCLUDE "<inc>/Ob.hjk"
#INCLUDE "<inc>/Ns.hjk"

EXTERN PsProcessType : ObType

EXTERN PsThreadType : ObType

EXTERN PsGroupType : ObType

STRUCT PsProcessGroup
    ProcessListHead : RtlListEntry,

    Lock : KeLock,

    LeaderPid : ULONG,
    LeaderSid : ULONG,

    LeaderDied : UBYTE,
END

STRUCT PsPagedProcess
    GlobalEntry : RtlListEntry,
    JobEntry : RtlListEntry,
    GroupEntry : RtlListEntry,

    Process : ^PsProcess,

    HandleTable : ExHandleTable,

    Cred : ObCredentials,

    RootHandle : NsHandle,

    Name : ^ExName,

    ActivationEvent : ^ExEventCounter,

    Job : ^PsJob,

    ProcessGroup : ^PsProcessGroup,
    SessionGroup : ^PsProcessGroup,

    RootLock : KeLock,
    ActivationLock : KeLock,
    HandleTableLock : KeLock,
    GroupLock : KeLock,

    Pid : ULONG,
    ParentPid : ULONG,

    ActivationStatus : OsStatus,
    TerminationStatus : OsStatus,

    CleanedUp : UBYTE,
END

STRUCT PsProcess
    Pcb : KeProcess,

    Paged : ^PsPagedProcess,

    Partition : ^MiPartition,

    TerminationEvent : KeEvent,

    WorkingSetSize : ULONG,
    PageFaultCount : ULONG,
END

STRUCT PsPagedThread
    Name : ^ExName,

    IpcBlock : ^IpcpThreadBlock,

    Tid : ULONG,
    TerminationStatus : OsStatus,

    Mode : UBYTE,
END

STRUCT PsThread
    Tcb : KeThread,

    Paged : ^PsPagedThread,

    IopListHead : RtlListEntry,

    DeferredIopListHead : RtlListEntry,
END

STRUCT PsJob
    RootJob : ^PsJob,
    ParentJob : ^PsJob,

    Entry : RtlListEntry,

    SubJobListHead : RtlListEntry,

    ProcessListHead : RtlListEntry,

    TerminationEvent : KeEvent,

    // Counts both processes and sub-jobs. Job termination signaling occurs
    // when this count transitions to zero due to process exit.

    ActiveCount : ULONG,

    Depth : UBYTE,
    Flags : UBYTE,
    SignalOnClose : UBYTE,
    Terminated : UBYTE,

    CleanedUp : UBYTE,
END

EXTERN PsSystemProcess : ^PsProcess

EXTERN PsActiveProcessCount : UWORD

EXTERN FN PsExitThread ()

EXTERN FN PsInitializeIdleProcess ()

EXTERN FN PsInitializeStage1 ()

EXTERN FN PsInitializeStage2 ()

EXTERN FN PsCreateProcessObject (
    IN params : ^NsOpenParameters,
    IN partition : ^MiPartition,
    IN name : ^RtlString,
    IN quotauid : UWORD,
    IN flags : UWORD,
    OUT process : ^PsProcess,
) : OsStatus

EXTERN FN PsCreateThreadObject (
    IN params : ^NsOpenParameters,
    IN name : ^RtlString,
    IN startfunc : KeStartThreadF,
    IN context1 : UWORD,
    IN context2 : UWORD,
    IN process : ^PsProcess,
    IN flags : UWORD,
    OUT thread : ^PsThread,
) : OsStatus

EXTERN FN PsCreateExecutiveThread (
    IN name : ^RtlString,
    IN startfunc : KeStartThreadF,
    IN context1 : UWORD,
    IN context2 : UWORD,
    IN flags : UWORD,
    OUT thread : ^PsThread,
) : OsStatus

EXTERN KeIdleProcess : PsProcess

#MACRO PsCurrentProcess () [
    (CONTAINEROF KeCurrentProcess () TO PsProcess.Pcb)
]

#MACRO PsCurrentThread () [
    (CONTAINEROF KeCurrentThread () TO PsThread.Tcb)
]

#MACRO PsQuotaBlock ( process ) [
    ((process)^.Paged^.HandleTable.QuotaBlock)
]

#MACRO PsUnblockRundownProcess ( process ) [
    KeReleaseLock ( &(process)^.Pcb.Lock )
]

EXTERN FN PsBlockRundownProcess (
    IN process : ^PsProcess,
) : UWORD