//
// Implements IO packet management.
//

#INCLUDE "Iop.hjk"

IopPacketZones : MmZoneHeader[IO_PACKET_TYPE_MAX]

IopPacketZoneLock : KeLock = KE_INITIAL_LOCK

IopLocationZone : MmZoneHeader

IopLocationZoneLock : KeLock = KE_INITIAL_LOCK

IopTrampolineZone : MmZoneHeader

IopTrampolineZoneLock : KeLock = KE_INITIAL_LOCK

IopPacketSize : UBYTE[IO_PACKET_TYPE_MAX] = {
    [IO_PACKET_TYPE_NORMAL] = SIZEOF IoPacket,
    [IO_PACKET_TYPE_USERASYNC] = SIZEOF IoUserAsyncPacket,
}

#ENTERSECTION "INITtext"

FN IopInitPacketZone (
    IN zone : ^MmZoneHeader,
    IN packetsize : UWORD,
    IN count : UWORD,
)

    // Initialize a packet zone and populate it with packets.

    RtlPrint ( "IopInitPacketZone: zonesize %u\n",
        packetsize * count + MM_ZONE_OVERHEAD )

    hunk := MmAllocatePool (
        MM_NONPAGED_POOL, // poolindex
        packetsize * count + MM_ZONE_OVERHEAD, // bytes
        'IOPz', // tag
        FALSE, // wait
    )

    IF NOT hunk THEN
        KeCrash ( "IopInitPacketZone: failed to create zones\n" )
    END

    MmInitializeZone (
        zone, // zone
        packetsize, // blocksize
    )

    MmExtendZone (
        zone, // zone
        hunk, // hunk
        packetsize * count + MM_ZONE_OVERHEAD, // bytes
    )
END

FN IopInitPacketZones ()

    // Initialize the packet zones, for fast allocation of common packet sizes
    // without hitting pool.

    normalcount : UWORD
    asynccount : UWORD
    locationcount : UWORD
    trampolinecount : UWORD

    systemsize := MmGetSystemSize ()

    IF systemsize <= MM_TINY_SYSTEM THEN
        normalcount = 5
        asynccount = 4

    ELSEIF systemsize <= MM_MEDIUM_SYSTEM THEN
        normalcount = 10
        asynccount = 8

    ELSE
        normalcount = 64
        asynccount = 24
    END

    trampolinecount = normalcount
    locationcount = normalcount * 2

    // Create normal zone.

    IopInitPacketZone (
        &IopPacketZones[IO_PACKET_TYPE_NORMAL], // zone
        SIZEOF IoPacket, // headersize
        normalcount, // count
    )

    // Create user async zone.

    IopInitPacketZone (
        &IopPacketZones[IO_PACKET_TYPE_USERASYNC], // zone
        SIZEOF IoUserAsyncPacket, // headersize
        asynccount, // count
    )

    // Create location zone.

    IopInitPacketZone (
        &IopLocationZone, // zone
        SIZEOF IoLocation, // headersize
        locationcount, // count
    )

    // Create trampoline zone.

    IopInitPacketZone (
        &IopTrampolineZone, // zone
        SIZEOF IoTrampoline, // headersize
        trampolinecount, // count
    )
END

#LEAVESECTION

FN IopFreeLocation (
    IN location : ^IoLocation,
)

    // Free an IoLocation.

    IF location^.Flags & IOP_LOCATION_DONT_FREE THEN
        // Nevermind.

        LEAVE
    END

    IF location^.Flags & IOP_LOCATION_FROM_ZONE THEN
        // Return to zone.

        KeAcquireLockExclusive ( &IopLocationZoneLock )

        MmFreeZone (
            &IopLocationZone, // zone
            location, // ptr
        )

        KeReleaseLock ( &IopLocationZoneLock )

        LEAVE
    END

    // Free to pool.

    MmFreePool (
        location, // ptr
        'IoLo', // tag
    )
END

EXPORT FN IoGetCurrentLocation (
    IN trampoline : ^IoTrampoline,
    IN contextsize : UWORD,
) : ^IoLocation

    // Allocate a packet location with the given context size.

    packet := trampoline^.Packet

    IF trampoline^.InternalFlags & IOP_TRAMPOLINE_LOC_ALLOCED THEN
        // Already allocated one for this device stack location.
        // Return the tail of the packet's location list.

        RETURN CONTAINEROF packet^.LocationListHead.Prev TO IoLocation.Entry
    END

    location : ^IoLocation = NULLPTR

    IF contextsize <= IO_LOCATION_AVERAGE_CONTEXT THEN
        // The context size is less or equal to the expected average so we can
        // allocate the location from the inlined one or the zone.

        IF trampoline^.InternalFlags & IOP_TRAMPOLINE_INLINE_LOC_USED == 0 THEN
            // The inline location is still available, so allocate it.

            trampoline^.InternalFlags |= IOP_TRAMPOLINE_INLINE_LOC_USED

            location = &packet^.Inlined.Location

            location^.Flags = IOP_LOCATION_DONT_FREE

        ELSE
            // Try to allocate from the location zone.

            KeAcquireLockExclusive ( &IopLocationZoneLock )

            location = MmAllocateZone ( &IopLocationZone )

            KeReleaseLock ( &IopLocationZoneLock )

            IF location THEN
                location^.Flags = IOP_LOCATION_FROM_ZONE
            END
        END
    END

    IF NOT location THEN
        // Still don't have a location so try to pool-allocate one.

        location = MmAllocatePool (
            MM_NONPAGED_POOL, // poolindex
            SIZEOF IoLocation + contextsize +
            (RTL_MACHINE_WORD_SIZE - 1), // bytes
            'IoLo', // tag
            TRUE, // wait
        )

        IF NOT location THEN
            RETURN NULLPTR
        END

        location^.Flags = 0
    END

    trampoline^.InternalFlags |= IOP_TRAMPOLINE_LOC_ALLOCED

    // Initialize the location.

    location^.Packet = packet

    RtlInsertAtTailList (
        &packet^.LocationListHead, // head
        &location^.Entry, // entry
    )

    location^.CompletionRoutine = NULLPTR

    location^.Context = location + SIZEOF IoLocation

    RETURN location
END

FN IoAllocatePacket (
    IN mdl : ^MmMdlHeader,
    IN mdloffset : UWORD,
    IN ioptype : UWORD,
    IN iopflags : UWORD,
    IN kernelflags : UWORD,
    IN event : ^KeEvent,
    IN completionroutine : IoPacketCompletionF,
    IN timeout : ^RtlUquad,
) : ^IoPacket

    // Allocate a packet.

    ipl := KeAcquireApcLockExclusive ( &IopPacketZoneLock )

    packet := CAST MmAllocateZone ( &IopPacketZones[ioptype] ) TO ^IoPacket

    KeReleaseApcLock ( &IopPacketZoneLock, ipl )

    IF NOT packet THEN
        // Try to pool-allocate the packet.

        packet = MmAllocatePool (
            MM_NONPAGED_POOL, // poolindex
            SIZEOF IoPacket, // bytes
            'Iop ', // tag
            TRUE, // wait
        )

        IF NOT packet THEN
            RETURN NULLPTR
        END
    END

    // Initialize the packet.

    packet^.IopFlags = iopflags
    packet^.Type = ioptype

    IF timeout THEN
        packet^.IopFlags |= IO_PACKET_TIMEOUT

        RtlMoveUquad (
            &packet^.Timeout, // destquad
            timeout, // srcquad
        )
    END

    packet^.ParentPacket = NULLPTR
    packet^.CompletionRoutine = completionroutine
    packet^.CompletionEvent = event
    packet^.Mdl = mdl
    packet^.OffsetInMdl = mdloffset
    packet^.StatusBlock.Status = OS_STATUS_SUCCESS
    packet^.KernelFlags = kernelflags
    packet^.IoCount = 1
    packet^.EnqueueStatus = OS_STATUS_PENDING
    packet^.PriorityBoost = 0

    RtlInitializeList ( &packet^.LocationListHead )

    RETURN packet
END

FN IoAllocateFragmentPacket (
    IN parentpacket : ^IoPacket,
    IN iopflags : UWORD,
    IN kernelflags : UWORD,
    IN event : ^KeEvent,
    IN completionroutine : IoPacketCompletionF,
    IN timeout : ^RtlUquad,
) : ^IoPacket

    // Helper routine for allocating a fragment packet.

    RETURN IoAllocatePacket (
        parentpacket^.Mdl, // mdl
        parentpacket^.OffsetInMdl, // mdloffset
        IO_PACKET_TYPE_NORMAL, // ioptype
        iopflags | (parentpacket^.IopFlags & IO_PACKET_USERMODE), // iopflags
        kernelflags, // kernelflags
        event, // event
        completionroutine, // completionroutine
        timeout, // timeout
    )
END

FN IoFreePacket (
    IN packet : ^IoPacket,
)

    // Free a packet back to the appropriate zone or pool.

    IF packet^.IopFlags & IO_PACKET_FROM_ZONE THEN
        // Release to zone.

        ipl := KeAcquireApcLockExclusive ( &IopPacketZoneLock )

        MmFreeZone (
            &IopPacketZones[packet^.Type], // zone
            packet, // ptr
        )

        KeReleaseApcLock ( &IopPacketZoneLock, ipl )

        LEAVE
    END

    // Release to pool.

    MmFreePool (
        packet, // ptr
        'Iop ', // tag
    )
END

FN IopRundownPacket (
    IN packet : ^IoPacket,
)

    // Perform final rundown of the IOP upon completion.
    // This can be done either from APC context or from original completion
    // context.

    // The location list must be empty or we will leak memory here.

    KeAssert ( RtlEmptyList ( &packet^.LocationListHead ) )

    event := packet^.CompletionEvent

    IF event THEN
        KeSignalEvent (
            event, // event
            packet^.PriorityBoost, // priorityboost
        )

        IF packet^.Type == IO_PACKET_TYPE_USERASYNC THEN
            ObUnreferenceObject ( event )
        END
    END

    IF packet^.IopFlags & IO_PACKET_AUTO_FREE THEN
        IoFreePacket ( packet )
    END
END

FN IopBounceOnTrampoline (
    IN trampoline : ^IoTrampoline,
    IN packet : ^IoPacket,
) : OsStatus

    // Dispatch an I/O request through the trampoline.

    status : OsStatus

    IF packet^.ParentPacket THEN
        status = packet^.ParentPacket^.EnqueueStatus

        IF status != OS_STATUS_PENDING THEN
            // The parent packet was already completed early, so don't start this
            // new one.

            IoCompletePacket (
                packet, // packet
                status, // status
                0, // priorityboost
            )

            GOTO Exit
        END
    END

    WHILE TRUE DO
        // Call through trampoline.

        status = trampoline^.Fcb^.Dispatch^.A[trampoline^.FunctionCode] (
            packet, // packet
            trampoline, // trampoline
        )

        IF status == OS_STATUS_MORE_PROCESSING_REQUIRED THEN
            // This level has taken custody of the packet.
            // We should break out now.

            status = OS_STATUS_PENDING

            BREAK
        END

        IF status != OS_STATUS_PENDING THEN
            // Any status other than PENDING indicates an early completion
            // should be performed.

            packet^.EnqueueStatus = status

            IoCompletePacket (
                packet, // packet
                status, // status
                0, // priorityboost
            )

            BREAK
        END

        // Clear the flag indicating that a location has been allocated for the
        // current level, so that the next level gets a new one.

        trampoline^.InternalFlags &= ~IOP_TRAMPOLINE_LOC_ALLOCED
    END

@Exit

    IF trampoline^.InternalFlags & IOP_TRAMPOLINE_DONT_FREE == 0 THEN
        // Free the trampoline.

        IF trampoline^.InternalFlags & IOP_TRAMPOLINE_FROM_ZONE THEN
            // Free to the zone.

            KeAcquireLockExclusive ( &IopTrampolineZoneLock )

            MmFreeZone (
                &IopTrampolineZone, // zone
                trampoline, // ptr
            )

            KeReleaseLock ( &IopTrampolineZoneLock )

        ELSE
            // Free to pool.

            MmFreePool (
                trampoline, // ptr
                'IoTr', // tag
            )
        END
    END

    RETURN status
END

EXPORT FN IoCompletePacket (
    IN packet : ^IoPacket,
    IN status : OsStatus,
    IN priorityboost : UWORD,
)

    // Complete an IO packet along with any parents that may arise.
    // This MUST be called from thread context - if you want to complete a
    // packet directly from a DPC, call IoCompletePacketFromDpc which will
    // helpfully enqueue a work item to do it for you.

@NextPacket

    IF OsError ( status ) THEN
        // Save the error status.

        // This is racey on purpose - there's no reason for a lock here since we
        // can only return one error status back up anyway. The user will see
        // "one of them".

        packet^.StatusBlock.Status = status
    END

    // Set our priority boost if it's higher.
    // Otherwise propagate the higher one to the ancestors.

    IF priorityboost > packet^.PriorityBoost THEN
        packet^.PriorityBoost = priorityboost
    ELSE
        priorityboost = packet^.PriorityBoost
    END

    // Decrement the IoCount to reflect a dependent upon this packet being
    // removed. If we drop it to zero, then we should perform full packet
    // completion and potentially complete the parent as well if this is
    // another associated IOP.

    oldcount := KeIncrementUlong (
        &packet^.IoCount, // ptr
        0xFFFFFFFF, // inc
    )

    IF oldcount != 1 THEN
        // There are still dependents upon this packet.

        LEAVE
    END

    IF status == OS_STATUS_SUCCESS THEN
        // Try to propagate an existing error status up the packet hierarchy.
        // Have to do this after we're sure we're the last completer or an
        // error status may get lost.

        status = packet^.StatusBlock.Status
    END

    // Reset the IoCount to 1 just in case we pass the packet on to someone who
    // wants to take custody of it and retry completion later. We can't do this
    // after we know that, because they'll have custody, and we can't touch this
    // field at that time.

    packet^.IoCount = 1

    // Call the completion routines starting from the location at the tail of
    // the list.

    listhead := &packet^.LocationListHead
    listentry := listhead^.Prev

    WHILE listentry != listhead DO
        location := CONTAINEROF listentry TO IoLocation.Entry

        listentry = listentry^.Prev

        IF location^.CompletionRoutine THEN
            IF location^.CompletionRoutine ( location )
                == OS_STATUS_MORE_PROCESSING_REQUIRED THEN

                // The driver would like us not to continue completing the
                // packet. It will call us back later when it's done with
                // whatever it's doing. Note that the IOP is now in its sole
                // custody; it can free it or do whatever at any time and we
                // cannot touch it anymore.

                LEAVE
            END
        END

        // Pop the location from the stack.

        RtlRemoveEntryList ( &location^.Entry )

        // Free its memory.

        IopFreeLocation ( location )
    END

    IF packet^.IopFlags & IO_PACKET_AUTO_COMPLETE_MDL THEN
        // Unlock the pages ASAP. We could do this at packet rundown instead but
        // that might take however long it takes a user thread to get scheduled
        // in to run its completion APC, which is suboptimal.

        MmCompleteMdl ( packet^.Mdl )
    END

    packet^.IopFlags |= IO_PACKET_COMPLETED

    parentpacket := packet^.ParentPacket

    // Call the general completion routine, if one was set.

    IF NOT packet^.CompletionRoutine OR
        packet^.CompletionRoutine ( packet )
        != OS_STATUS_MORE_PROCESSING_REQUIRED THEN

        // General completion routine didn't request that we not free the
        // packet.

        IopRundownPacket ( packet )
    END

    packet = parentpacket

    IF packet THEN
        GOTO NextPacket
    END
END

EXPORT FN IoEnqueuePacket (
    IN packet : ^IoPacket,
    IN parentpacket : ^IoPacket,
    IN fcb : ^IoFcb,
    IN functioncode : UWORD,
    IN parameters : ^IoParameters,
) : OsStatus

    // Start an asynchronous request.

    KeAssert ( KeAreApcsDeliverable () )

    status : OsStatus

    stacktrampoline : IoTrampoline
    trampoline := &stacktrampoline

    stacktrampoline.InternalFlags = IOP_TRAMPOLINE_DONT_FREE

    thread := PsCurrentThread ()

    IF thread^.InIoRequest THEN
        // Nested I/O request.
        // Allocate a trampoline.

        KeAcquireLockExclusive ( &IopTrampolineZoneLock )

        trampoline = MmAllocateZone ( &IopTrampolineZone )

        KeReleaseLock ( &IopTrampolineZoneLock )

        IF trampoline THEN
            trampoline^.InternalFlags = IOP_TRAMPOLINE_FROM_ZONE

        ELSE
            // Allocate from pool.

            trampoline = MmAllocatePool (
                MM_NONPAGED_POOL, // poolindex
                SIZEOF IoTrampoline, // bytes
                'IoTr', // tag
                TRUE, // wait
            )

            IF NOT trampoline THEN
                RETURN OS_STATUS_NO_MEMORY
            END

            trampoline^.InternalFlags = 0
        END
    END

    // Initialize the trampoline.

    trampoline^.Fcb = fcb
    trampoline^.Packet = packet
    trampoline^.FunctionCode = functioncode

    RtlCopyBytes (
        &trampoline^.P, // dest
        parameters, // src
        SIZEOF IoParameters, // sz
    )

    // Initialize the packet.

    packet^.ParentPacket = parentpacket

    IF parentpacket THEN
        // Associate with parent packet.

        // Incrementing this count requires no synchronization because the
        // parent packet is in our sole custody right now.

        parentpacket^.IoCount += 1

        packet^.KernelFlags |= parentpacket^.KernelFlags
    END

    IF thread^.InIoRequest THEN
        // Already dispatching a request, this is a recursive enqueue (probably
        // for I/O that fragmented on disk but it could be a number of things).

        // Enqueue as a deferred request to the current thread and return.

        RtlInsertAtTailList (
            &thread^.DeferredRequestListHead, // head
            &trampoline^.DeferredEntry, // entry
        )

        RETURN OS_STATUS_PENDING
    END

    // Not already dispatching a request, so do it now.

    thread^.InIoRequest = TRUE

    status = IopBounceOnTrampoline (
        trampoline, // trampoline
        packet, // packet
    )

    WHILE NOT RtlEmptyList ( &thread^.DeferredRequestListHead ) DO
        // Pop another request off the list head and do it.

        trampoline = CONTAINEROF thread^.DeferredRequestListHead.Next
            TO IoTrampoline.DeferredEntry

        RtlRemoveEntryList ( &trampoline^.DeferredEntry )

        IopBounceOnTrampoline (
            trampoline, // trampoline
            trampoline^.Packet, // packet
        )
    END

    thread^.InIoRequest = FALSE

    RETURN status
END