//
// Implements the File object type for the I/O subsystem of the MINTIA
// Executive.
//

#INCLUDE "Iop.hjk"

#SECTION "PAGEtext"
FN (ObTypeOpenF) IopOpenFileObject (
    IN process : ^PsProcess,
    IN object : ^VOID,
    IN access : UWORD,
) : OsStatus

    // Call the driver's file object open function, if present.

    file := CAST object TO ^IoFile

    fcb := file^.Fcb

    IF NOT fcb THEN
        // This is a file object for a namespace container.

        RETURN OS_STATUS_SUCCESS
    END

    RETURN fcb^.Dispatch^.OpenFileObject (
        process, // process
        file, // file
        access, // access
    )
END

#SECTION "PAGEtext"
FN (ObTypeCloseF) IopCloseFileObject (
    IN object : ^VOID,
    IN access : UWORD,
    IN lasthandlecount : UWORD,
)

    // Call the driver's file object close function, if present.

    file := CAST object TO ^IoFile

    fcb := file^.Fcb

    IF NOT fcb THEN
        // This is a file object for a namespace container.

        LEAVE
    END

    fcb^.Dispatch^.CloseFileObject (
        file, // file
        access, // access
        lasthandlecount, // lasthandlecount
    )
END

#SECTION "PAGEtext"
FN (ObTypeDeleteF) IopDeleteFileObject (
    IN object : ^VOID,
) : UWORD

    // Delete a file object.

    file := CAST object TO ^IoFile

    // Call the driver's file object deletion function, if present.

    fcb := file^.Fcb

    IF fcb THEN
        fcb^.Dispatch^.DeleteFileObject ( file )
    END

    // Unreference the namespace handle tracked by the file object.

    NsUnreferenceHandle ( &file^.Handle )

    RETURN TRUE
END

#SECTION "PAGEtext"
FN (ObTypeSetSecurityF) IopSetSecurityFileObject (
    IN object : ^VOID,
    IN permissions : ^ObPermissions,
) : OsStatus

    // Acquire a pointer to the namespace entry and call the driver's file
    // object security function, if present.

    file := CAST object TO ^IoFile

    fcb := file^.Fcb

    IF NOT fcb THEN
        // This is a file object for a namespace container.

        RETURN OS_STATUS_SUCCESS
    END

    RETURN fcb^.Dispatch^.SetSecurityFcb (
        fcb, // fcb
        permissions, // permissions
    )
END

#SECTION "PAGEtext"
FN (ObTypeDeleteF) IopDeleteFcbObject (
    IN object : ^VOID,
) : UWORD

    // Delete an FCB object.

    fcb := CAST object TO ^IoFcb

    // Call the driver's FCB deletion function, if present.

    RETURN fcb^.Dispatch^.DeleteFcb ( fcb )
END

#SECTION "PAGEtext"
FN (ObTypeNamespaceLookupF) IopNamespaceLookupFcbObject (
    IN context : ^NsLookupContext,
) : OsStatus

    // Lookup a name under this FCB.

    fcb := CAST context^.Object TO ^IoFcb

    RETURN fcb^.Dispatch^.NamespaceLookup ( context )
END

#SECTION "PAGEtext"
PUBLIC IoFileType : ObType = {
    [Name] = "File",

    [Open] = &IopOpenFileObject,
    [Close] = &IopCloseFileObject,
    [Delete] = &IopDeleteFileObject,
    [SetSecurity] = &IopSetSecurityFileObject,

    [WaitOffset] = OB_TYPE_NO_WAIT_OFFSET,
    [TypeIdentifier] = OS_FILE_TYPE,
    [Tag] = 'File',

    [IsPaged] = TRUE,
}

#SECTION "PAGEtext"
PUBLIC IoFcbType : ObType = {
    [Name] = "Fcb",

    [Delete] = &IopDeleteFcbObject,
    [NamespaceLookup] = &IopNamespaceLookupFcbObject,

    [WaitOffset] = OB_TYPE_NO_WAIT_OFFSET,
    [TypeIdentifier] = OS_FCB_TYPE,
    [Tag] = 'Fcb',

    [IsPaged] = FALSE,
}